

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Jun 16 16:13:35 2019

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1786
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBIGRAM,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	intentry,global,class=CODE,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	dabs	1,0x620,48
    70                           	dabs	1,0x5A0,80
    71                           	dabs	1,0x520,80
    72                           	dabs	1,0x4A0,80
    73                           	dabs	1,0x420,80
    74                           	dabs	1,0x3E0,16
    75                           	dabs	1,0x2270,0,_level
    76                           	dabs	1,0x7E,2
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0090                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  0111                     	;# 
   130  0112                     	;# 
   131  0113                     	;# 
   132  0114                     	;# 
   133  0115                     	;# 
   134  0116                     	;# 
   135  0117                     	;# 
   136  0118                     	;# 
   137  0119                     	;# 
   138  011A                     	;# 
   139  011B                     	;# 
   140  011C                     	;# 
   141  011D                     	;# 
   142  011D                     	;# 
   143  011D                     	;# 
   144  011E                     	;# 
   145  011F                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  0191                     	;# 
   149  0191                     	;# 
   150  0192                     	;# 
   151  0193                     	;# 
   152  0193                     	;# 
   153  0193                     	;# 
   154  0194                     	;# 
   155  0195                     	;# 
   156  0196                     	;# 
   157  0197                     	;# 
   158  0199                     	;# 
   159  0199                     	;# 
   160  0199                     	;# 
   161  019A                     	;# 
   162  019A                     	;# 
   163  019A                     	;# 
   164  019B                     	;# 
   165  019B                     	;# 
   166  019B                     	;# 
   167  019B                     	;# 
   168  019B                     	;# 
   169  019C                     	;# 
   170  019C                     	;# 
   171  019C                     	;# 
   172  019D                     	;# 
   173  019D                     	;# 
   174  019D                     	;# 
   175  019E                     	;# 
   176  019E                     	;# 
   177  019E                     	;# 
   178  019F                     	;# 
   179  019F                     	;# 
   180  019F                     	;# 
   181  019F                     	;# 
   182  019F                     	;# 
   183  020C                     	;# 
   184  020D                     	;# 
   185  020E                     	;# 
   186  0210                     	;# 
   187  0211                     	;# 
   188  0211                     	;# 
   189  0212                     	;# 
   190  0212                     	;# 
   191  0213                     	;# 
   192  0213                     	;# 
   193  0214                     	;# 
   194  0214                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0215                     	;# 
   198  0215                     	;# 
   199  0216                     	;# 
   200  0216                     	;# 
   201  0217                     	;# 
   202  0217                     	;# 
   203  028C                     	;# 
   204  028D                     	;# 
   205  028E                     	;# 
   206  0291                     	;# 
   207  0291                     	;# 
   208  0292                     	;# 
   209  0293                     	;# 
   210  0298                     	;# 
   211  0298                     	;# 
   212  0299                     	;# 
   213  029A                     	;# 
   214  030C                     	;# 
   215  030D                     	;# 
   216  030E                     	;# 
   217  0311                     	;# 
   218  0311                     	;# 
   219  0312                     	;# 
   220  0313                     	;# 
   221  038C                     	;# 
   222  038D                     	;# 
   223  038E                     	;# 
   224  0390                     	;# 
   225  0391                     	;# 
   226  0392                     	;# 
   227  0393                     	;# 
   228  0394                     	;# 
   229  0395                     	;# 
   230  0396                     	;# 
   231  0397                     	;# 
   232  0398                     	;# 
   233  0399                     	;# 
   234  039D                     	;# 
   235  039E                     	;# 
   236  039F                     	;# 
   237  0511                     	;# 
   238  0513                     	;# 
   239  051A                     	;# 
   240  0811                     	;# 
   241  0812                     	;# 
   242  0813                     	;# 
   243  0814                     	;# 
   244  0815                     	;# 
   245  0816                     	;# 
   246  0817                     	;# 
   247  0818                     	;# 
   248  0819                     	;# 
   249  081A                     	;# 
   250  081B                     	;# 
   251  081C                     	;# 
   252  081D                     	;# 
   253  081E                     	;# 
   254  081F                     	;# 
   255  0820                     	;# 
   256  0821                     	;# 
   257  0821                     	;# 
   258  0822                     	;# 
   259  0823                     	;# 
   260  0823                     	;# 
   261  0824                     	;# 
   262  0825                     	;# 
   263  0825                     	;# 
   264  0826                     	;# 
   265  0827                     	;# 
   266  0827                     	;# 
   267  0828                     	;# 
   268  0829                     	;# 
   269  082A                     	;# 
   270  082B                     	;# 
   271  082C                     	;# 
   272  082D                     	;# 
   273  082E                     	;# 
   274  082F                     	;# 
   275  0831                     	;# 
   276  0832                     	;# 
   277  0833                     	;# 
   278  0834                     	;# 
   279  0835                     	;# 
   280  0836                     	;# 
   281  0837                     	;# 
   282  0838                     	;# 
   283  0839                     	;# 
   284  083A                     	;# 
   285  083B                     	;# 
   286  083C                     	;# 
   287  083D                     	;# 
   288  083E                     	;# 
   289  083F                     	;# 
   290  0840                     	;# 
   291  0841                     	;# 
   292  0841                     	;# 
   293  0842                     	;# 
   294  0843                     	;# 
   295  0843                     	;# 
   296  0844                     	;# 
   297  0845                     	;# 
   298  0845                     	;# 
   299  0846                     	;# 
   300  0847                     	;# 
   301  0847                     	;# 
   302  0848                     	;# 
   303  0849                     	;# 
   304  084A                     	;# 
   305  084B                     	;# 
   306  084C                     	;# 
   307  084D                     	;# 
   308  084E                     	;# 
   309  084F                     	;# 
   310  0851                     	;# 
   311  0852                     	;# 
   312  0853                     	;# 
   313  0854                     	;# 
   314  0855                     	;# 
   315  0856                     	;# 
   316  0857                     	;# 
   317  0858                     	;# 
   318  0859                     	;# 
   319  085A                     	;# 
   320  085B                     	;# 
   321  085C                     	;# 
   322  085D                     	;# 
   323  085E                     	;# 
   324  085F                     	;# 
   325  0860                     	;# 
   326  0861                     	;# 
   327  0861                     	;# 
   328  0862                     	;# 
   329  0863                     	;# 
   330  0863                     	;# 
   331  0864                     	;# 
   332  0865                     	;# 
   333  0865                     	;# 
   334  0866                     	;# 
   335  0867                     	;# 
   336  0867                     	;# 
   337  0868                     	;# 
   338  0869                     	;# 
   339  086A                     	;# 
   340  086B                     	;# 
   341  086C                     	;# 
   342  086D                     	;# 
   343  086E                     	;# 
   344  086F                     	;# 
   345  0FE4                     	;# 
   346  0FE5                     	;# 
   347  0FE6                     	;# 
   348  0FE7                     	;# 
   349  0FE8                     	;# 
   350  0FE9                     	;# 
   351  0FEA                     	;# 
   352  0FEB                     	;# 
   353  0FED                     	;# 
   354  0FEE                     	;# 
   355  0FEF                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0008                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  0010                     	;# 
   372  0011                     	;# 
   373  0012                     	;# 
   374  0013                     	;# 
   375  0014                     	;# 
   376  0015                     	;# 
   377  0016                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001C                     	;# 
   385  008C                     	;# 
   386  008D                     	;# 
   387  008E                     	;# 
   388  0090                     	;# 
   389  0091                     	;# 
   390  0092                     	;# 
   391  0093                     	;# 
   392  0094                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009A                     	;# 
   399  009B                     	;# 
   400  009B                     	;# 
   401  009C                     	;# 
   402  009D                     	;# 
   403  009E                     	;# 
   404  009F                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  0111                     	;# 
   409  0112                     	;# 
   410  0113                     	;# 
   411  0114                     	;# 
   412  0115                     	;# 
   413  0116                     	;# 
   414  0117                     	;# 
   415  0118                     	;# 
   416  0119                     	;# 
   417  011A                     	;# 
   418  011B                     	;# 
   419  011C                     	;# 
   420  011D                     	;# 
   421  011D                     	;# 
   422  011D                     	;# 
   423  011E                     	;# 
   424  011F                     	;# 
   425  018C                     	;# 
   426  018D                     	;# 
   427  0191                     	;# 
   428  0191                     	;# 
   429  0192                     	;# 
   430  0193                     	;# 
   431  0193                     	;# 
   432  0193                     	;# 
   433  0194                     	;# 
   434  0195                     	;# 
   435  0196                     	;# 
   436  0197                     	;# 
   437  0199                     	;# 
   438  0199                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019A                     	;# 
   442  019A                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019C                     	;# 
   451  019D                     	;# 
   452  019D                     	;# 
   453  019D                     	;# 
   454  019E                     	;# 
   455  019E                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  019F                     	;# 
   459  019F                     	;# 
   460  019F                     	;# 
   461  019F                     	;# 
   462  020C                     	;# 
   463  020D                     	;# 
   464  020E                     	;# 
   465  0210                     	;# 
   466  0211                     	;# 
   467  0211                     	;# 
   468  0212                     	;# 
   469  0212                     	;# 
   470  0213                     	;# 
   471  0213                     	;# 
   472  0214                     	;# 
   473  0214                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0215                     	;# 
   477  0215                     	;# 
   478  0216                     	;# 
   479  0216                     	;# 
   480  0217                     	;# 
   481  0217                     	;# 
   482  028C                     	;# 
   483  028D                     	;# 
   484  028E                     	;# 
   485  0291                     	;# 
   486  0291                     	;# 
   487  0292                     	;# 
   488  0293                     	;# 
   489  0298                     	;# 
   490  0298                     	;# 
   491  0299                     	;# 
   492  029A                     	;# 
   493  030C                     	;# 
   494  030D                     	;# 
   495  030E                     	;# 
   496  0311                     	;# 
   497  0311                     	;# 
   498  0312                     	;# 
   499  0313                     	;# 
   500  038C                     	;# 
   501  038D                     	;# 
   502  038E                     	;# 
   503  0390                     	;# 
   504  0391                     	;# 
   505  0392                     	;# 
   506  0393                     	;# 
   507  0394                     	;# 
   508  0395                     	;# 
   509  0396                     	;# 
   510  0397                     	;# 
   511  0398                     	;# 
   512  0399                     	;# 
   513  039D                     	;# 
   514  039E                     	;# 
   515  039F                     	;# 
   516  0511                     	;# 
   517  0513                     	;# 
   518  051A                     	;# 
   519  0811                     	;# 
   520  0812                     	;# 
   521  0813                     	;# 
   522  0814                     	;# 
   523  0815                     	;# 
   524  0816                     	;# 
   525  0817                     	;# 
   526  0818                     	;# 
   527  0819                     	;# 
   528  081A                     	;# 
   529  081B                     	;# 
   530  081C                     	;# 
   531  081D                     	;# 
   532  081E                     	;# 
   533  081F                     	;# 
   534  0820                     	;# 
   535  0821                     	;# 
   536  0821                     	;# 
   537  0822                     	;# 
   538  0823                     	;# 
   539  0823                     	;# 
   540  0824                     	;# 
   541  0825                     	;# 
   542  0825                     	;# 
   543  0826                     	;# 
   544  0827                     	;# 
   545  0827                     	;# 
   546  0828                     	;# 
   547  0829                     	;# 
   548  082A                     	;# 
   549  082B                     	;# 
   550  082C                     	;# 
   551  082D                     	;# 
   552  082E                     	;# 
   553  082F                     	;# 
   554  0831                     	;# 
   555  0832                     	;# 
   556  0833                     	;# 
   557  0834                     	;# 
   558  0835                     	;# 
   559  0836                     	;# 
   560  0837                     	;# 
   561  0838                     	;# 
   562  0839                     	;# 
   563  083A                     	;# 
   564  083B                     	;# 
   565  083C                     	;# 
   566  083D                     	;# 
   567  083E                     	;# 
   568  083F                     	;# 
   569  0840                     	;# 
   570  0841                     	;# 
   571  0841                     	;# 
   572  0842                     	;# 
   573  0843                     	;# 
   574  0843                     	;# 
   575  0844                     	;# 
   576  0845                     	;# 
   577  0845                     	;# 
   578  0846                     	;# 
   579  0847                     	;# 
   580  0847                     	;# 
   581  0848                     	;# 
   582  0849                     	;# 
   583  084A                     	;# 
   584  084B                     	;# 
   585  084C                     	;# 
   586  084D                     	;# 
   587  084E                     	;# 
   588  084F                     	;# 
   589  0851                     	;# 
   590  0852                     	;# 
   591  0853                     	;# 
   592  0854                     	;# 
   593  0855                     	;# 
   594  0856                     	;# 
   595  0857                     	;# 
   596  0858                     	;# 
   597  0859                     	;# 
   598  085A                     	;# 
   599  085B                     	;# 
   600  085C                     	;# 
   601  085D                     	;# 
   602  085E                     	;# 
   603  085F                     	;# 
   604  0860                     	;# 
   605  0861                     	;# 
   606  0861                     	;# 
   607  0862                     	;# 
   608  0863                     	;# 
   609  0863                     	;# 
   610  0864                     	;# 
   611  0865                     	;# 
   612  0865                     	;# 
   613  0866                     	;# 
   614  0867                     	;# 
   615  0867                     	;# 
   616  0868                     	;# 
   617  0869                     	;# 
   618  086A                     	;# 
   619  086B                     	;# 
   620  086C                     	;# 
   621  086D                     	;# 
   622  086E                     	;# 
   623  086F                     	;# 
   624  0FE4                     	;# 
   625  0FE5                     	;# 
   626  0FE6                     	;# 
   627  0FE7                     	;# 
   628  0FE8                     	;# 
   629  0FE9                     	;# 
   630  0FEA                     	;# 
   631  0FEB                     	;# 
   632  0FED                     	;# 
   633  0FEE                     	;# 
   634  0FEF                     	;# 
   635  0000                     	;# 
   636  0001                     	;# 
   637  0002                     	;# 
   638  0003                     	;# 
   639  0004                     	;# 
   640  0005                     	;# 
   641  0006                     	;# 
   642  0007                     	;# 
   643  0008                     	;# 
   644  0009                     	;# 
   645  000A                     	;# 
   646  000B                     	;# 
   647  000C                     	;# 
   648  000D                     	;# 
   649  000E                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0013                     	;# 
   654  0014                     	;# 
   655  0015                     	;# 
   656  0016                     	;# 
   657  0016                     	;# 
   658  0017                     	;# 
   659  0018                     	;# 
   660  0019                     	;# 
   661  001A                     	;# 
   662  001B                     	;# 
   663  001C                     	;# 
   664  008C                     	;# 
   665  008D                     	;# 
   666  008E                     	;# 
   667  0090                     	;# 
   668  0091                     	;# 
   669  0092                     	;# 
   670  0093                     	;# 
   671  0094                     	;# 
   672  0095                     	;# 
   673  0096                     	;# 
   674  0097                     	;# 
   675  0098                     	;# 
   676  0099                     	;# 
   677  009A                     	;# 
   678  009B                     	;# 
   679  009B                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  009F                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  0111                     	;# 
   688  0112                     	;# 
   689  0113                     	;# 
   690  0114                     	;# 
   691  0115                     	;# 
   692  0116                     	;# 
   693  0117                     	;# 
   694  0118                     	;# 
   695  0119                     	;# 
   696  011A                     	;# 
   697  011B                     	;# 
   698  011C                     	;# 
   699  011D                     	;# 
   700  011D                     	;# 
   701  011D                     	;# 
   702  011E                     	;# 
   703  011F                     	;# 
   704  018C                     	;# 
   705  018D                     	;# 
   706  0191                     	;# 
   707  0191                     	;# 
   708  0192                     	;# 
   709  0193                     	;# 
   710  0193                     	;# 
   711  0193                     	;# 
   712  0194                     	;# 
   713  0195                     	;# 
   714  0196                     	;# 
   715  0197                     	;# 
   716  0199                     	;# 
   717  0199                     	;# 
   718  0199                     	;# 
   719  019A                     	;# 
   720  019A                     	;# 
   721  019A                     	;# 
   722  019B                     	;# 
   723  019B                     	;# 
   724  019B                     	;# 
   725  019B                     	;# 
   726  019B                     	;# 
   727  019C                     	;# 
   728  019C                     	;# 
   729  019C                     	;# 
   730  019D                     	;# 
   731  019D                     	;# 
   732  019D                     	;# 
   733  019E                     	;# 
   734  019E                     	;# 
   735  019E                     	;# 
   736  019F                     	;# 
   737  019F                     	;# 
   738  019F                     	;# 
   739  019F                     	;# 
   740  019F                     	;# 
   741  020C                     	;# 
   742  020D                     	;# 
   743  020E                     	;# 
   744  0210                     	;# 
   745  0211                     	;# 
   746  0211                     	;# 
   747  0212                     	;# 
   748  0212                     	;# 
   749  0213                     	;# 
   750  0213                     	;# 
   751  0214                     	;# 
   752  0214                     	;# 
   753  0215                     	;# 
   754  0215                     	;# 
   755  0215                     	;# 
   756  0215                     	;# 
   757  0216                     	;# 
   758  0216                     	;# 
   759  0217                     	;# 
   760  0217                     	;# 
   761  028C                     	;# 
   762  028D                     	;# 
   763  028E                     	;# 
   764  0291                     	;# 
   765  0291                     	;# 
   766  0292                     	;# 
   767  0293                     	;# 
   768  0298                     	;# 
   769  0298                     	;# 
   770  0299                     	;# 
   771  029A                     	;# 
   772  030C                     	;# 
   773  030D                     	;# 
   774  030E                     	;# 
   775  0311                     	;# 
   776  0311                     	;# 
   777  0312                     	;# 
   778  0313                     	;# 
   779  038C                     	;# 
   780  038D                     	;# 
   781  038E                     	;# 
   782  0390                     	;# 
   783  0391                     	;# 
   784  0392                     	;# 
   785  0393                     	;# 
   786  0394                     	;# 
   787  0395                     	;# 
   788  0396                     	;# 
   789  0397                     	;# 
   790  0398                     	;# 
   791  0399                     	;# 
   792  039D                     	;# 
   793  039E                     	;# 
   794  039F                     	;# 
   795  0511                     	;# 
   796  0513                     	;# 
   797  051A                     	;# 
   798  0811                     	;# 
   799  0812                     	;# 
   800  0813                     	;# 
   801  0814                     	;# 
   802  0815                     	;# 
   803  0816                     	;# 
   804  0817                     	;# 
   805  0818                     	;# 
   806  0819                     	;# 
   807  081A                     	;# 
   808  081B                     	;# 
   809  081C                     	;# 
   810  081D                     	;# 
   811  081E                     	;# 
   812  081F                     	;# 
   813  0820                     	;# 
   814  0821                     	;# 
   815  0821                     	;# 
   816  0822                     	;# 
   817  0823                     	;# 
   818  0823                     	;# 
   819  0824                     	;# 
   820  0825                     	;# 
   821  0825                     	;# 
   822  0826                     	;# 
   823  0827                     	;# 
   824  0827                     	;# 
   825  0828                     	;# 
   826  0829                     	;# 
   827  082A                     	;# 
   828  082B                     	;# 
   829  082C                     	;# 
   830  082D                     	;# 
   831  082E                     	;# 
   832  082F                     	;# 
   833  0831                     	;# 
   834  0832                     	;# 
   835  0833                     	;# 
   836  0834                     	;# 
   837  0835                     	;# 
   838  0836                     	;# 
   839  0837                     	;# 
   840  0838                     	;# 
   841  0839                     	;# 
   842  083A                     	;# 
   843  083B                     	;# 
   844  083C                     	;# 
   845  083D                     	;# 
   846  083E                     	;# 
   847  083F                     	;# 
   848  0840                     	;# 
   849  0841                     	;# 
   850  0841                     	;# 
   851  0842                     	;# 
   852  0843                     	;# 
   853  0843                     	;# 
   854  0844                     	;# 
   855  0845                     	;# 
   856  0845                     	;# 
   857  0846                     	;# 
   858  0847                     	;# 
   859  0847                     	;# 
   860  0848                     	;# 
   861  0849                     	;# 
   862  084A                     	;# 
   863  084B                     	;# 
   864  084C                     	;# 
   865  084D                     	;# 
   866  084E                     	;# 
   867  084F                     	;# 
   868  0851                     	;# 
   869  0852                     	;# 
   870  0853                     	;# 
   871  0854                     	;# 
   872  0855                     	;# 
   873  0856                     	;# 
   874  0857                     	;# 
   875  0858                     	;# 
   876  0859                     	;# 
   877  085A                     	;# 
   878  085B                     	;# 
   879  085C                     	;# 
   880  085D                     	;# 
   881  085E                     	;# 
   882  085F                     	;# 
   883  0860                     	;# 
   884  0861                     	;# 
   885  0861                     	;# 
   886  0862                     	;# 
   887  0863                     	;# 
   888  0863                     	;# 
   889  0864                     	;# 
   890  0865                     	;# 
   891  0865                     	;# 
   892  0866                     	;# 
   893  0867                     	;# 
   894  0867                     	;# 
   895  0868                     	;# 
   896  0869                     	;# 
   897  086A                     	;# 
   898  086B                     	;# 
   899  086C                     	;# 
   900  086D                     	;# 
   901  086E                     	;# 
   902  086F                     	;# 
   903  0FE4                     	;# 
   904  0FE5                     	;# 
   905  0FE6                     	;# 
   906  0FE7                     	;# 
   907  0FE8                     	;# 
   908  0FE9                     	;# 
   909  0FEA                     	;# 
   910  0FEB                     	;# 
   911  0FED                     	;# 
   912  0FEE                     	;# 
   913  0FEF                     	;# 
   914  0000                     	;# 
   915  0001                     	;# 
   916  0002                     	;# 
   917  0003                     	;# 
   918  0004                     	;# 
   919  0005                     	;# 
   920  0006                     	;# 
   921  0007                     	;# 
   922  0008                     	;# 
   923  0009                     	;# 
   924  000A                     	;# 
   925  000B                     	;# 
   926  000C                     	;# 
   927  000D                     	;# 
   928  000E                     	;# 
   929  0010                     	;# 
   930  0011                     	;# 
   931  0012                     	;# 
   932  0013                     	;# 
   933  0014                     	;# 
   934  0015                     	;# 
   935  0016                     	;# 
   936  0016                     	;# 
   937  0017                     	;# 
   938  0018                     	;# 
   939  0019                     	;# 
   940  001A                     	;# 
   941  001B                     	;# 
   942  001C                     	;# 
   943  008C                     	;# 
   944  008D                     	;# 
   945  008E                     	;# 
   946  0090                     	;# 
   947  0091                     	;# 
   948  0092                     	;# 
   949  0093                     	;# 
   950  0094                     	;# 
   951  0095                     	;# 
   952  0096                     	;# 
   953  0097                     	;# 
   954  0098                     	;# 
   955  0099                     	;# 
   956  009A                     	;# 
   957  009B                     	;# 
   958  009B                     	;# 
   959  009C                     	;# 
   960  009D                     	;# 
   961  009E                     	;# 
   962  009F                     	;# 
   963  010C                     	;# 
   964  010D                     	;# 
   965  010E                     	;# 
   966  0111                     	;# 
   967  0112                     	;# 
   968  0113                     	;# 
   969  0114                     	;# 
   970  0115                     	;# 
   971  0116                     	;# 
   972  0117                     	;# 
   973  0118                     	;# 
   974  0119                     	;# 
   975  011A                     	;# 
   976  011B                     	;# 
   977  011C                     	;# 
   978  011D                     	;# 
   979  011D                     	;# 
   980  011D                     	;# 
   981  011E                     	;# 
   982  011F                     	;# 
   983  018C                     	;# 
   984  018D                     	;# 
   985  0191                     	;# 
   986  0191                     	;# 
   987  0192                     	;# 
   988  0193                     	;# 
   989  0193                     	;# 
   990  0193                     	;# 
   991  0194                     	;# 
   992  0195                     	;# 
   993  0196                     	;# 
   994  0197                     	;# 
   995  0199                     	;# 
   996  0199                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019A                     	;# 
  1000  019A                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019C                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019D                     	;# 
  1011  019D                     	;# 
  1012  019E                     	;# 
  1013  019E                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  019F                     	;# 
  1017  019F                     	;# 
  1018  019F                     	;# 
  1019  019F                     	;# 
  1020  020C                     	;# 
  1021  020D                     	;# 
  1022  020E                     	;# 
  1023  0210                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0215                     	;# 
  1036  0216                     	;# 
  1037  0216                     	;# 
  1038  0217                     	;# 
  1039  0217                     	;# 
  1040  028C                     	;# 
  1041  028D                     	;# 
  1042  028E                     	;# 
  1043  0291                     	;# 
  1044  0291                     	;# 
  1045  0292                     	;# 
  1046  0293                     	;# 
  1047  0298                     	;# 
  1048  0298                     	;# 
  1049  0299                     	;# 
  1050  029A                     	;# 
  1051  030C                     	;# 
  1052  030D                     	;# 
  1053  030E                     	;# 
  1054  0311                     	;# 
  1055  0311                     	;# 
  1056  0312                     	;# 
  1057  0313                     	;# 
  1058  038C                     	;# 
  1059  038D                     	;# 
  1060  038E                     	;# 
  1061  0390                     	;# 
  1062  0391                     	;# 
  1063  0392                     	;# 
  1064  0393                     	;# 
  1065  0394                     	;# 
  1066  0395                     	;# 
  1067  0396                     	;# 
  1068  0397                     	;# 
  1069  0398                     	;# 
  1070  0399                     	;# 
  1071  039D                     	;# 
  1072  039E                     	;# 
  1073  039F                     	;# 
  1074  0511                     	;# 
  1075  0513                     	;# 
  1076  051A                     	;# 
  1077  0811                     	;# 
  1078  0812                     	;# 
  1079  0813                     	;# 
  1080  0814                     	;# 
  1081  0815                     	;# 
  1082  0816                     	;# 
  1083  0817                     	;# 
  1084  0818                     	;# 
  1085  0819                     	;# 
  1086  081A                     	;# 
  1087  081B                     	;# 
  1088  081C                     	;# 
  1089  081D                     	;# 
  1090  081E                     	;# 
  1091  081F                     	;# 
  1092  0820                     	;# 
  1093  0821                     	;# 
  1094  0821                     	;# 
  1095  0822                     	;# 
  1096  0823                     	;# 
  1097  0823                     	;# 
  1098  0824                     	;# 
  1099  0825                     	;# 
  1100  0825                     	;# 
  1101  0826                     	;# 
  1102  0827                     	;# 
  1103  0827                     	;# 
  1104  0828                     	;# 
  1105  0829                     	;# 
  1106  082A                     	;# 
  1107  082B                     	;# 
  1108  082C                     	;# 
  1109  082D                     	;# 
  1110  082E                     	;# 
  1111  082F                     	;# 
  1112  0831                     	;# 
  1113  0832                     	;# 
  1114  0833                     	;# 
  1115  0834                     	;# 
  1116  0835                     	;# 
  1117  0836                     	;# 
  1118  0837                     	;# 
  1119  0838                     	;# 
  1120  0839                     	;# 
  1121  083A                     	;# 
  1122  083B                     	;# 
  1123  083C                     	;# 
  1124  083D                     	;# 
  1125  083E                     	;# 
  1126  083F                     	;# 
  1127  0840                     	;# 
  1128  0841                     	;# 
  1129  0841                     	;# 
  1130  0842                     	;# 
  1131  0843                     	;# 
  1132  0843                     	;# 
  1133  0844                     	;# 
  1134  0845                     	;# 
  1135  0845                     	;# 
  1136  0846                     	;# 
  1137  0847                     	;# 
  1138  0847                     	;# 
  1139  0848                     	;# 
  1140  0849                     	;# 
  1141  084A                     	;# 
  1142  084B                     	;# 
  1143  084C                     	;# 
  1144  084D                     	;# 
  1145  084E                     	;# 
  1146  084F                     	;# 
  1147  0851                     	;# 
  1148  0852                     	;# 
  1149  0853                     	;# 
  1150  0854                     	;# 
  1151  0855                     	;# 
  1152  0856                     	;# 
  1153  0857                     	;# 
  1154  0858                     	;# 
  1155  0859                     	;# 
  1156  085A                     	;# 
  1157  085B                     	;# 
  1158  085C                     	;# 
  1159  085D                     	;# 
  1160  085E                     	;# 
  1161  085F                     	;# 
  1162  0860                     	;# 
  1163  0861                     	;# 
  1164  0861                     	;# 
  1165  0862                     	;# 
  1166  0863                     	;# 
  1167  0863                     	;# 
  1168  0864                     	;# 
  1169  0865                     	;# 
  1170  0865                     	;# 
  1171  0866                     	;# 
  1172  0867                     	;# 
  1173  0867                     	;# 
  1174  0868                     	;# 
  1175  0869                     	;# 
  1176  086A                     	;# 
  1177  086B                     	;# 
  1178  086C                     	;# 
  1179  086D                     	;# 
  1180  086E                     	;# 
  1181  086F                     	;# 
  1182  0FE4                     	;# 
  1183  0FE5                     	;# 
  1184  0FE6                     	;# 
  1185  0FE7                     	;# 
  1186  0FE8                     	;# 
  1187  0FE9                     	;# 
  1188  0FEA                     	;# 
  1189  0FEB                     	;# 
  1190  0FED                     	;# 
  1191  0FEE                     	;# 
  1192  0FEF                     	;_level
  1193                           
  1194                           	psect	idataBANK1
  1195  0801                     __pidataBANK1:	
  1196                           
  1197                           ;initializer for Display_Chars@F6414
  1198  0801  3480               	retlw	128
  1199  0802  3490               	retlw	144
  1200  0803  3488               	retlw	136
  1201  0804  3498               	retlw	152
  1202                           
  1203                           ;initializer for get_Y_Addr@F6419
  1204  0805  3480               	retlw	128
  1205  0806  3488               	retlw	136
  1206                           
  1207                           	psect	idataBANK2
  1208  1200                     __pidataBANK2:	
  1209                           
  1210                           ;initializer for _screen
  1211  1200  3400               	retlw	0
  1212  1201  3400               	retlw	0
  1213  1202  3400               	retlw	0
  1214  1203  3400               	retlw	0
  1215  1204  3400               	retlw	0
  1216  1205  3400               	retlw	0
  1217  1206  3400               	retlw	0
  1218  1207  3400               	retlw	0
  1219  1208  3400               	retlw	0
  1220  1209  343C               	retlw	60
  1221  120A  347E               	retlw	126
  1222  120B  347E               	retlw	126
  1223  120C  347E               	retlw	126
  1224  120D  347E               	retlw	126
  1225  120E  343C               	retlw	60
  1226  120F  3400               	retlw	0
  1227  1210  3400               	retlw	0
  1228  1211  343C               	retlw	60
  1229  1212  3442               	retlw	66
  1230  1213  3442               	retlw	66
  1231  1214  3442               	retlw	66
  1232  1215  3442               	retlw	66
  1233  1216  343C               	retlw	60
  1234  1217  3400               	retlw	0
  1235  1218  34FF               	retlw	255
  1236  1219  3481               	retlw	129
  1237  121A  3481               	retlw	129
  1238  121B  3481               	retlw	129
  1239  121C  3481               	retlw	129
  1240  121D  3481               	retlw	129
  1241  121E  3481               	retlw	129
  1242  121F  34FF               	retlw	255
  1243  1220  34FF               	retlw	255
  1244  1221  3481               	retlw	129
  1245  1222  3499               	retlw	153
  1246  1223  34BD               	retlw	189
  1247  1224  34BD               	retlw	189
  1248  1225  3499               	retlw	153
  1249  1226  3481               	retlw	129
  1250  1227  34FF               	retlw	255
  1251  1228  34FF               	retlw	255
  1252  1229  3481               	retlw	129
  1253  122A  3499               	retlw	153
  1254  122B  34A5               	retlw	165
  1255  122C  34A5               	retlw	165
  1256  122D  3499               	retlw	153
  1257  122E  3481               	retlw	129
  1258  122F  34FF               	retlw	255
  1259                           
  1260                           ;initializer for _display_black
  1261  1230  3420               	retlw	32
  1262  1231  345B               	retlw	91
  1263  1232  3442               	retlw	66
  1264  1233  345D               	retlw	93
  1265  1234  343A               	retlw	58
  1266  1235  3400               	retlw	0
  1267  1236  3400               	retlw	0
  1268  1237  3400               	retlw	0
  1269  1238  3400               	retlw	0
  1270  1239  3400               	retlw	0
  1271                           
  1272                           ;initializer for _display_white
  1273  123A  3420               	retlw	32
  1274  123B  345B               	retlw	91
  1275  123C  3457               	retlw	87
  1276  123D  345D               	retlw	93
  1277  123E  343A               	retlw	58
  1278  123F  3400               	retlw	0
  1279  1240  3400               	retlw	0
  1280  1241  3400               	retlw	0
  1281  1242  3400               	retlw	0
  1282  1243  3400               	retlw	0
  1283                           
  1284                           ;initializer for _second_chess
  1285  1244  3400               	retlw	0
  1286  1245  343C               	retlw	60
  1287  1246  3442               	retlw	66
  1288  1247  3442               	retlw	66
  1289  1248  3442               	retlw	66
  1290  1249  3442               	retlw	66
  1291  124A  343C               	retlw	60
  1292  124B  3400               	retlw	0
  1293                           
  1294                           	psect	idataBANK3
  1295  10F2                     __pidataBANK3:	
  1296                           
  1297                           ;initializer for _towards
  1298  10F2  3400               	retlw	0
  1299  10F3  3401               	retlw	1
  1300  10F4  3400               	retlw	0
  1301  10F5  34FF               	retlw	255
  1302  10F6  3401               	retlw	1
  1303  10F7  3400               	retlw	0
  1304  10F8  3401               	retlw	1
  1305  10F9  3401               	retlw	1
  1306  10FA  3401               	retlw	1
  1307  10FB  34FF               	retlw	255
  1308  10FC  34FF               	retlw	255
  1309  10FD  3400               	retlw	0
  1310  10FE  34FF               	retlw	255
  1311  10FF  3401               	retlw	1
  1312  1100  34FF               	retlw	255
  1313  1101  34FF               	retlw	255
  1314                           
  1315                           ;initializer for _display_step
  1316  1102  3420               	retlw	32
  1317  1103  3457               	retlw	87
  1318  1104  3461               	retlw	97
  1319  1105  3479               	retlw	121
  1320  1106  343A               	retlw	58
  1321  1107  3400               	retlw	0
  1322  1108  3400               	retlw	0
  1323  1109  3400               	retlw	0
  1324  110A  3400               	retlw	0
  1325  110B  3400               	retlw	0
  1326                           
  1327                           ;initializer for _choose_empty
  1328  110C  34FF               	retlw	255
  1329  110D  3481               	retlw	129
  1330  110E  3481               	retlw	129
  1331  110F  3481               	retlw	129
  1332  1110  3481               	retlw	129
  1333  1111  3481               	retlw	129
  1334  1112  3481               	retlw	129
  1335  1113  34FF               	retlw	255
  1336                           
  1337                           ;initializer for _choose_first
  1338  1114  34FF               	retlw	255
  1339  1115  3481               	retlw	129
  1340  1116  3499               	retlw	153
  1341  1117  34BD               	retlw	189
  1342  1118  34BD               	retlw	189
  1343  1119  3499               	retlw	153
  1344  111A  3481               	retlw	129
  1345  111B  34FF               	retlw	255
  1346                           
  1347                           ;initializer for _choose_second
  1348  111C  34FF               	retlw	255
  1349  111D  3481               	retlw	129
  1350  111E  3499               	retlw	153
  1351  111F  34A5               	retlw	165
  1352  1120  34A5               	retlw	165
  1353  1121  3499               	retlw	153
  1354  1122  3481               	retlw	129
  1355  1123  34FF               	retlw	255
  1356                           
  1357                           ;initializer for _first_chess
  1358  1124  3400               	retlw	0
  1359  1125  343C               	retlw	60
  1360  1126  347E               	retlw	126
  1361  1127  347E               	retlw	126
  1362  1128  347E               	retlw	126
  1363  1129  347E               	retlw	126
  1364  112A  343C               	retlw	60
  1365  112B  3400               	retlw	0
  1366                           
  1367                           	psect	idataBIGRAM
  1368  0E80                     __pidataBIGRAM:	
  1369                           
  1370                           ;initializer for _level
  1371  0E80  3400               	retlw	0
  1372  0E81  3400               	retlw	0
  1373  0E82  3400               	retlw	0
  1374  0E83  3400               	retlw	0
  1375  0E84  3400               	retlw	0
  1376  0E85  3400               	retlw	0
  1377  0E86  3400               	retlw	0
  1378  0E87  3400               	retlw	0
  1379  0E88  3400               	retlw	0
  1380  0E89  3400               	retlw	0
  1381  0E8A  3400               	retlw	0
  1382  0E8B  3400               	retlw	0
  1383  0E8C  3400               	retlw	0
  1384  0E8D  3400               	retlw	0
  1385  0E8E  3400               	retlw	0
  1386  0E8F  3400               	retlw	0
  1387  0E90  3400               	retlw	0
  1388  0E91  3400               	retlw	0
  1389  0E92  3401               	retlw	1
  1390  0E93  3402               	retlw	2
  1391  0E94  3401               	retlw	1
  1392  0E95  3400               	retlw	0
  1393  0E96  3400               	retlw	0
  1394  0E97  3400               	retlw	0
  1395  0E98  3400               	retlw	0
  1396  0E99  3400               	retlw	0
  1397  0E9A  3402               	retlw	2
  1398  0E9B  3402               	retlw	2
  1399  0E9C  3402               	retlw	2
  1400  0E9D  3400               	retlw	0
  1401  0E9E  3400               	retlw	0
  1402  0E9F  3400               	retlw	0
  1403  0EA0  3400               	retlw	0
  1404  0EA1  3400               	retlw	0
  1405  0EA2  3401               	retlw	1
  1406  0EA3  3402               	retlw	2
  1407  0EA4  3401               	retlw	1
  1408  0EA5  3400               	retlw	0
  1409  0EA6  3400               	retlw	0
  1410  0EA7  3400               	retlw	0
  1411  0EA8  3400               	retlw	0
  1412  0EA9  3400               	retlw	0
  1413  0EAA  3400               	retlw	0
  1414  0EAB  3400               	retlw	0
  1415  0EAC  3400               	retlw	0
  1416  0EAD  3400               	retlw	0
  1417  0EAE  3400               	retlw	0
  1418  0EAF  3400               	retlw	0
  1419  0EB0  3400               	retlw	0
  1420  0EB1  3400               	retlw	0
  1421  0EB2  3400               	retlw	0
  1422  0EB3  3400               	retlw	0
  1423  0EB4  3400               	retlw	0
  1424  0EB5  3400               	retlw	0
  1425  0EB6  3400               	retlw	0
  1426  0EB7  3400               	retlw	0
  1427  0EB8  3400               	retlw	0
  1428  0EB9  3400               	retlw	0
  1429  0EBA  3400               	retlw	0
  1430  0EBB  3400               	retlw	0
  1431  0EBC  3400               	retlw	0
  1432  0EBD  3400               	retlw	0
  1433  0EBE  3400               	retlw	0
  1434  0EBF  3400               	retlw	0
  1435  0EC0  3400               	retlw	0
  1436  0EC1  3400               	retlw	0
  1437  0EC2  3400               	retlw	0
  1438  0EC3  3400               	retlw	0
  1439  0EC4  3400               	retlw	0
  1440  0EC5  3400               	retlw	0
  1441  0EC6  3400               	retlw	0
  1442  0EC7  3400               	retlw	0
  1443  0EC8  3400               	retlw	0
  1444  0EC9  3400               	retlw	0
  1445  0ECA  3400               	retlw	0
  1446  0ECB  3400               	retlw	0
  1447  0ECC  3400               	retlw	0
  1448  0ECD  3400               	retlw	0
  1449  0ECE  3400               	retlw	0
  1450  0ECF  3400               	retlw	0
  1451  0ED0  3400               	retlw	0
  1452  0ED1  3400               	retlw	0
  1453  0ED2  3402               	retlw	2
  1454  0ED3  3402               	retlw	2
  1455  0ED4  3400               	retlw	0
  1456  0ED5  3400               	retlw	0
  1457  0ED6  3400               	retlw	0
  1458  0ED7  3400               	retlw	0
  1459  0ED8  3400               	retlw	0
  1460  0ED9  3400               	retlw	0
  1461  0EDA  3402               	retlw	2
  1462  0EDB  3401               	retlw	1
  1463  0EDC  3402               	retlw	2
  1464  0EDD  3400               	retlw	0
  1465  0EDE  3400               	retlw	0
  1466  0EDF  3400               	retlw	0
  1467  0EE0  3400               	retlw	0
  1468  0EE1  3400               	retlw	0
  1469  0EE2  3400               	retlw	0
  1470  0EE3  3402               	retlw	2
  1471  0EE4  3402               	retlw	2
  1472  0EE5  3400               	retlw	0
  1473  0EE6  3400               	retlw	0
  1474  0EE7  3400               	retlw	0
  1475  0EE8  3400               	retlw	0
  1476  0EE9  3400               	retlw	0
  1477  0EEA  3400               	retlw	0
  1478  0EEB  3400               	retlw	0
  1479  0EEC  3400               	retlw	0
  1480  0EED  3400               	retlw	0
  1481  0EEE  3400               	retlw	0
  1482  0EEF  3400               	retlw	0
  1483  0EF0  3400               	retlw	0
  1484  0EF1  3400               	retlw	0
  1485  0EF2  3400               	retlw	0
  1486  0EF3  3400               	retlw	0
  1487  0EF4  3400               	retlw	0
  1488  0EF5  3400               	retlw	0
  1489  0EF6  3400               	retlw	0
  1490  0EF7  3400               	retlw	0
  1491  0EF8  3400               	retlw	0
  1492  0EF9  3400               	retlw	0
  1493  0EFA  3400               	retlw	0
  1494  0EFB  3400               	retlw	0
  1495  0EFC  3400               	retlw	0
  1496  0EFD  3400               	retlw	0
  1497  0EFE  3400               	retlw	0
  1498  0EFF  3400               	retlw	0
  1499  0F00  3400               	retlw	0
  1500  0F01  3400               	retlw	0
  1501  0F02  3400               	retlw	0
  1502  0F03  3400               	retlw	0
  1503  0F04  3400               	retlw	0
  1504  0F05  3400               	retlw	0
  1505  0F06  3400               	retlw	0
  1506  0F07  3400               	retlw	0
  1507  0F08  3400               	retlw	0
  1508  0F09  3400               	retlw	0
  1509  0F0A  3400               	retlw	0
  1510  0F0B  3400               	retlw	0
  1511  0F0C  3400               	retlw	0
  1512  0F0D  3400               	retlw	0
  1513  0F0E  3400               	retlw	0
  1514  0F0F  3400               	retlw	0
  1515  0F10  3400               	retlw	0
  1516  0F11  3400               	retlw	0
  1517  0F12  3402               	retlw	2
  1518  0F13  3400               	retlw	0
  1519  0F14  3400               	retlw	0
  1520  0F15  3400               	retlw	0
  1521  0F16  3400               	retlw	0
  1522  0F17  3400               	retlw	0
  1523  0F18  3400               	retlw	0
  1524  0F19  3400               	retlw	0
  1525  0F1A  3401               	retlw	1
  1526  0F1B  3402               	retlw	2
  1527  0F1C  3400               	retlw	0
  1528  0F1D  3400               	retlw	0
  1529  0F1E  3400               	retlw	0
  1530  0F1F  3400               	retlw	0
  1531  0F20  3400               	retlw	0
  1532  0F21  3400               	retlw	0
  1533  0F22  3401               	retlw	1
  1534  0F23  3401               	retlw	1
  1535  0F24  3402               	retlw	2
  1536  0F25  3400               	retlw	0
  1537  0F26  3400               	retlw	0
  1538  0F27  3400               	retlw	0
  1539  0F28  3400               	retlw	0
  1540  0F29  3400               	retlw	0
  1541  0F2A  3400               	retlw	0
  1542  0F2B  3400               	retlw	0
  1543  0F2C  3400               	retlw	0
  1544  0F2D  3400               	retlw	0
  1545  0F2E  3400               	retlw	0
  1546  0F2F  3400               	retlw	0
  1547  0F30  3400               	retlw	0
  1548  0F31  3400               	retlw	0
  1549  0F32  3400               	retlw	0
  1550  0F33  3400               	retlw	0
  1551  0F34  3400               	retlw	0
  1552  0F35  3400               	retlw	0
  1553  0F36  3400               	retlw	0
  1554  0F37  3400               	retlw	0
  1555  0F38  3400               	retlw	0
  1556  0F39  3400               	retlw	0
  1557  0F3A  3400               	retlw	0
  1558  0F3B  3400               	retlw	0
  1559  0F3C  3400               	retlw	0
  1560  0F3D  3400               	retlw	0
  1561  0F3E  3400               	retlw	0
  1562  0F3F  3400               	retlw	0
  1563  0F40  3400               	retlw	0
  1564  0F41  3400               	retlw	0
  1565  0F42  3400               	retlw	0
  1566  0F43  3400               	retlw	0
  1567  0F44  3400               	retlw	0
  1568  0F45  3400               	retlw	0
  1569  0F46  3400               	retlw	0
  1570  0F47  3400               	retlw	0
  1571  0F48  3400               	retlw	0
  1572  0F49  3400               	retlw	0
  1573  0F4A  3400               	retlw	0
  1574  0F4B  3400               	retlw	0
  1575  0F4C  3400               	retlw	0
  1576  0F4D  3400               	retlw	0
  1577  0F4E  3400               	retlw	0
  1578  0F4F  3400               	retlw	0
  1579  0F50  3400               	retlw	0
  1580  0F51  3400               	retlw	0
  1581  0F52  3402               	retlw	2
  1582  0F53  3401               	retlw	1
  1583  0F54  3402               	retlw	2
  1584  0F55  3400               	retlw	0
  1585  0F56  3400               	retlw	0
  1586  0F57  3400               	retlw	0
  1587  0F58  3400               	retlw	0
  1588  0F59  3400               	retlw	0
  1589  0F5A  3401               	retlw	1
  1590  0F5B  3401               	retlw	1
  1591  0F5C  3400               	retlw	0
  1592  0F5D  3402               	retlw	2
  1593  0F5E  3400               	retlw	0
  1594  0F5F  3400               	retlw	0
  1595  0F60  3400               	retlw	0
  1596  0F61  3400               	retlw	0
  1597  0F62  3402               	retlw	2
  1598  0F63  3400               	retlw	0
  1599  0F64  3402               	retlw	2
  1600  0F65  3402               	retlw	2
  1601  0F66  3400               	retlw	0
  1602  0F67  3400               	retlw	0
  1603  0F68  3400               	retlw	0
  1604  0F69  3400               	retlw	0
  1605  0F6A  3400               	retlw	0
  1606  0F6B  3402               	retlw	2
  1607  0F6C  3402               	retlw	2
  1608  0F6D  3402               	retlw	2
  1609  0F6E  3400               	retlw	0
  1610  0F6F  3400               	retlw	0
  1611  0F70  3400               	retlw	0
  1612  0F71  3400               	retlw	0
  1613  0F72  3400               	retlw	0
  1614  0F73  3400               	retlw	0
  1615  0F74  3400               	retlw	0
  1616  0F75  3400               	retlw	0
  1617  0F76  3400               	retlw	0
  1618  0F77  3400               	retlw	0
  1619  0F78  3400               	retlw	0
  1620  0F79  3400               	retlw	0
  1621  0F7A  3400               	retlw	0
  1622  0F7B  3400               	retlw	0
  1623  0F7C  3400               	retlw	0
  1624  0F7D  3400               	retlw	0
  1625  0F7E  3400               	retlw	0
  1626  0F7F  3400               	retlw	0
  1627  0F80  3400               	retlw	0
  1628  0F81  3400               	retlw	0
  1629  0F82  3400               	retlw	0
  1630  0F83  3400               	retlw	0
  1631  0F84  3400               	retlw	0
  1632  0F85  3400               	retlw	0
  1633  0F86  3400               	retlw	0
  1634  0F87  3400               	retlw	0
  1635  0F88  3400               	retlw	0
  1636  0F89  3400               	retlw	0
  1637  0F8A  3400               	retlw	0
  1638  0F8B  3400               	retlw	0
  1639  0F8C  3400               	retlw	0
  1640  0F8D  3402               	retlw	2
  1641  0F8E  3402               	retlw	2
  1642  0F8F  3400               	retlw	0
  1643  0F90  3400               	retlw	0
  1644  0F91  3400               	retlw	0
  1645  0F92  3400               	retlw	0
  1646  0F93  3400               	retlw	0
  1647  0F94  3402               	retlw	2
  1648  0F95  3400               	retlw	0
  1649  0F96  3401               	retlw	1
  1650  0F97  3400               	retlw	0
  1651  0F98  3400               	retlw	0
  1652  0F99  3402               	retlw	2
  1653  0F9A  3402               	retlw	2
  1654  0F9B  3400               	retlw	0
  1655  0F9C  3402               	retlw	2
  1656  0F9D  3401               	retlw	1
  1657  0F9E  3402               	retlw	2
  1658  0F9F  3400               	retlw	0
  1659  0FA0  3400               	retlw	0
  1660  0FA1  3401               	retlw	1
  1661  0FA2  3401               	retlw	1
  1662  0FA3  3400               	retlw	0
  1663  0FA4  3400               	retlw	0
  1664  0FA5  3400               	retlw	0
  1665  0FA6  3400               	retlw	0
  1666  0FA7  3400               	retlw	0
  1667  0FA8  3400               	retlw	0
  1668  0FA9  3402               	retlw	2
  1669  0FAA  3401               	retlw	1
  1670  0FAB  3401               	retlw	1
  1671  0FAC  3402               	retlw	2
  1672  0FAD  3400               	retlw	0
  1673  0FAE  3400               	retlw	0
  1674  0FAF  3400               	retlw	0
  1675  0FB0  3400               	retlw	0
  1676  0FB1  3401               	retlw	1
  1677  0FB2  3402               	retlw	2
  1678  0FB3  3401               	retlw	1
  1679  0FB4  3402               	retlw	2
  1680  0FB5  3400               	retlw	0
  1681  0FB6  3400               	retlw	0
  1682  0FB7  3400               	retlw	0
  1683  0FB8  3400               	retlw	0
  1684  0FB9  3400               	retlw	0
  1685  0FBA  3400               	retlw	0
  1686  0FBB  3400               	retlw	0
  1687  0FBC  3400               	retlw	0
  1688  0FBD  3400               	retlw	0
  1689  0FBE  3400               	retlw	0
  1690  0FBF  3400               	retlw	0
  1691  0FC0  3400               	retlw	0
  1692  0FC1  3400               	retlw	0
  1693  0FC2  3400               	retlw	0
  1694  0FC3  3400               	retlw	0
  1695  0FC4  3400               	retlw	0
  1696  0FC5  3400               	retlw	0
  1697  0FC6  3400               	retlw	0
  1698  0FC7  3400               	retlw	0
  1699  0FC8  3400               	retlw	0
  1700  0FC9  3400               	retlw	0
  1701  0FCA  3400               	retlw	0
  1702  0FCB  3401               	retlw	1
  1703  0FCC  3402               	retlw	2
  1704  0FCD  3400               	retlw	0
  1705  0FCE  3400               	retlw	0
  1706  0FCF  3400               	retlw	0
  1707  0FD0  3400               	retlw	0
  1708  0FD1  3400               	retlw	0
  1709  0FD2  3400               	retlw	0
  1710  0FD3  3401               	retlw	1
  1711  0FD4  3402               	retlw	2
  1712  0FD5  3401               	retlw	1
  1713  0FD6  3402               	retlw	2
  1714  0FD7  3400               	retlw	0
  1715  0FD8  3400               	retlw	0
  1716  0FD9  3400               	retlw	0
  1717  0FDA  3402               	retlw	2
  1718  0FDB  3402               	retlw	2
  1719  0FDC  3400               	retlw	0
  1720  0FDD  3401               	retlw	1
  1721  0FDE  3402               	retlw	2
  1722  0FDF  3400               	retlw	0
  1723  0FE0  3400               	retlw	0
  1724  0FE1  3400               	retlw	0
  1725  0FE2  3401               	retlw	1
  1726  0FE3  3401               	retlw	1
  1727  0FE4  3402               	retlw	2
  1728  0FE5  3402               	retlw	2
  1729  0FE6  3400               	retlw	0
  1730  0FE7  3400               	retlw	0
  1731  0FE8  3400               	retlw	0
  1732  0FE9  3400               	retlw	0
  1733  0FEA  3400               	retlw	0
  1734  0FEB  3400               	retlw	0
  1735  0FEC  3402               	retlw	2
  1736  0FED  3401               	retlw	1
  1737  0FEE  3400               	retlw	0
  1738  0FEF  3400               	retlw	0
  1739  0FF0  3400               	retlw	0
  1740  0FF1  3400               	retlw	0
  1741  0FF2  3400               	retlw	0
  1742  0FF3  3400               	retlw	0
  1743  0FF4  3400               	retlw	0
  1744  0FF5  3400               	retlw	0
  1745  0FF6  3400               	retlw	0
  1746  0FF7  3400               	retlw	0
  1747  0FF8  3400               	retlw	0
  1748  0FF9  3400               	retlw	0
  1749  0FFA  3400               	retlw	0
  1750  0FFB  3400               	retlw	0
  1751  0FFC  3400               	retlw	0
  1752  0FFD  3400               	retlw	0
  1753  0FFE  3400               	retlw	0
  1754  0FFF  3400               	retlw	0
  1755  000B                     _INTCONbits	set	11
  1756  0011                     _PIR1	set	17
  1757  000C                     _PORTA	set	12
  1758  000E                     _PORTC	set	14
  1759  001B                     _PR2	set	27
  1760  001C                     _T2CONbits	set	28
  1761  001A                     _TMR2	set	26
  1762  0068                     _RB0	set	104
  1763  0069                     _RB1	set	105
  1764  006A                     _RB2	set	106
  1765  006B                     _RB3	set	107
  1766  006D                     _RB5	set	109
  1767  0070                     _RC0	set	112
  1768  0071                     _RC1	set	113
  1769  0072                     _RC2	set	114
  1770  0073                     _RC3	set	115
  1771  0074                     _RC4	set	116
  1772  0075                     _RC5	set	117
  1773  0089                     _TMR2IF	set	137
  1774  0095                     _OPTION_REGbits	set	149
  1775  0099                     _OSCCON	set	153
  1776  0091                     _PIE1	set	145
  1777  008C                     _TRISA	set	140
  1778  008D                     _TRISB	set	141
  1779  008D                     _TRISBbits	set	141
  1780  008E                     _TRISC	set	142
  1781  010C                     _LATA	set	268
  1782  010E                     _LATC	set	270
  1783  018C                     _ANSELA	set	396
  1784  018D                     _ANSELB	set	397
  1785  020D                     _WPUBbits	set	525
  1786  020E                     _WPUC	set	526
  1787                           
  1788                           	psect	stringtext
  1789  1800                     __pstringtext:	
  1790  1800                     STR_2:	
  1791  1800  3450               	retlw	80	;'P'
  1792  1801  3472               	retlw	114	;'r'
  1793  1802  3465               	retlw	101	;'e'
  1794  1803  3473               	retlw	115	;'s'
  1795  1804  3473               	retlw	115	;'s'
  1796  1805  3420               	retlw	32	;' '
  1797  1806  3462               	retlw	98	;'b'
  1798  1807  3461               	retlw	97	;'a'
  1799  1808  3463               	retlw	99	;'c'
  1800  1809  346B               	retlw	107	;'k'
  1801  180A  3420               	retlw	32	;' '
  1802  180B  3474               	retlw	116	;'t'
  1803  180C  346F               	retlw	111	;'o'
  1804  180D  3420               	retlw	32	;' '
  1805  180E  3465               	retlw	101	;'e'
  1806  180F  3478               	retlw	120	;'x'
  1807  1810  3469               	retlw	105	;'i'
  1808  1811  3474               	retlw	116	;'t'
  1809  1812  3400               	retlw	0
  1810  1813                     STR_9:	
  1811  1813  3447               	retlw	71	;'G'
  1812  1814  3461               	retlw	97	;'a'
  1813  1815  346D               	retlw	109	;'m'
  1814  1816  3465               	retlw	101	;'e'
  1815  1817  3420               	retlw	32	;' '
  1816  1818  344D               	retlw	77	;'M'
  1817  1819  3461               	retlw	97	;'a'
  1818  181A  3463               	retlw	99	;'c'
  1819  181B  3468               	retlw	104	;'h'
  1820  181C  3469               	retlw	105	;'i'
  1821  181D  346E               	retlw	110	;'n'
  1822  181E  3465               	retlw	101	;'e'
  1823  181F  3400               	retlw	0
  1824  1820                     STR_8:	
  1825  1820  3458               	retlw	88	;'X'
  1826  1821  3469               	retlw	105	;'i'
  1827  1822  3461               	retlw	97	;'a'
  1828  1823  346F               	retlw	111	;'o'
  1829  1824  3462               	retlw	98	;'b'
  1830  1825  3461               	retlw	97	;'a'
  1831  1826  3477               	retlw	119	;'w'
  1832  1827  3461               	retlw	97	;'a'
  1833  1828  346E               	retlw	110	;'n'
  1834  1829  3467               	retlw	103	;'g'
  1835  182A  3400               	retlw	0
  1836  182B                     STR_7:	
  1837  182B  3457               	retlw	87	;'W'
  1838  182C  3465               	retlw	101	;'e'
  1839  182D  346C               	retlw	108	;'l'
  1840  182E  3463               	retlw	99	;'c'
  1841  182F  346F               	retlw	111	;'o'
  1842  1830  346D               	retlw	109	;'m'
  1843  1831  3465               	retlw	101	;'e'
  1844  1832  3420               	retlw	32	;' '
  1845  1833  3474               	retlw	116	;'t'
  1846  1834  346F               	retlw	111	;'o'
  1847  1835  3400               	retlw	0
  1848  1836                     STR_3:	
  1849  1836  3457               	retlw	87	;'W'
  1850  1837  3468               	retlw	104	;'h'
  1851  1838  3469               	retlw	105	;'i'
  1852  1839  3474               	retlw	116	;'t'
  1853  183A  3465               	retlw	101	;'e'
  1854  183B  3420               	retlw	32	;' '
  1855  183C  3457               	retlw	87	;'W'
  1856  183D  3469               	retlw	105	;'i'
  1857  183E  346E               	retlw	110	;'n'
  1858  183F  3400               	retlw	0
  1859  1840                     STR_1:	
  1860  1840  3442               	retlw	66	;'B'
  1861  1841  346C               	retlw	108	;'l'
  1862  1842  3461               	retlw	97	;'a'
  1863  1843  3463               	retlw	99	;'c'
  1864  1844  346B               	retlw	107	;'k'
  1865  1845  3420               	retlw	32	;' '
  1866  1846  3457               	retlw	87	;'W'
  1867  1847  3469               	retlw	105	;'i'
  1868  1848  346E               	retlw	110	;'n'
  1869  1849  3400               	retlw	0
  1870  184A                     STR_10:	
  1871  184A  3468               	retlw	104	;'h'
  1872  184B  3465               	retlw	101	;'e'
  1873  184C  3469               	retlw	105	;'i'
  1874  184D  3462               	retlw	98	;'b'
  1875  184E  3461               	retlw	97	;'a'
  1876  184F  3469               	retlw	105	;'i'
  1877  1850  3471               	retlw	113	;'q'
  1878  1851  3469               	retlw	105	;'i'
  1879  1852  3400               	retlw	0
  1880  1853                     STR_18:	
  1881  1853  346C               	retlw	108	;'l'
  1882  1854  3465               	retlw	101	;'e'
  1883  1855  3476               	retlw	118	;'v'
  1884  1856  3465               	retlw	101	;'e'
  1885  1857  346C               	retlw	108	;'l'
  1886  1858  3420               	retlw	32	;' '
  1887  1859  3431               	retlw	49	;'1'
  1888  185A  3400               	retlw	0
  1889  185B                     STR_12:	
  1890  185B  3420               	retlw	32	;' '
  1891  185C  344D               	retlw	77	;'M'
  1892  185D  3469               	retlw	105	;'i'
  1893  185E  346E               	retlw	110	;'n'
  1894  185F  343A               	retlw	58	;':'
  1895  1860  3430               	retlw	48	;'0'
  1896  1861  3431               	retlw	49	;'1'
  1897  1862  3400               	retlw	0
  1898  1863                     STR_19:	
  1899  1863  346C               	retlw	108	;'l'
  1900  1864  3465               	retlw	101	;'e'
  1901  1865  3476               	retlw	118	;'v'
  1902  1866  3465               	retlw	101	;'e'
  1903  1867  346C               	retlw	108	;'l'
  1904  1868  3420               	retlw	32	;' '
  1905  1869  3432               	retlw	50	;'2'
  1906  186A  3400               	retlw	0
  1907  186B                     STR_13:	
  1908  186B  3420               	retlw	32	;' '
  1909  186C  344D               	retlw	77	;'M'
  1910  186D  3469               	retlw	105	;'i'
  1911  186E  346E               	retlw	110	;'n'
  1912  186F  343A               	retlw	58	;':'
  1913  1870  3430               	retlw	48	;'0'
  1914  1871  3432               	retlw	50	;'2'
  1915  1872  3400               	retlw	0
  1916  1873                     STR_20:	
  1917  1873  346C               	retlw	108	;'l'
  1918  1874  3465               	retlw	101	;'e'
  1919  1875  3476               	retlw	118	;'v'
  1920  1876  3465               	retlw	101	;'e'
  1921  1877  346C               	retlw	108	;'l'
  1922  1878  3420               	retlw	32	;' '
  1923  1879  3433               	retlw	51	;'3'
  1924  187A  3400               	retlw	0
  1925  187B                     STR_14:	
  1926  187B  3420               	retlw	32	;' '
  1927  187C  344D               	retlw	77	;'M'
  1928  187D  3469               	retlw	105	;'i'
  1929  187E  346E               	retlw	110	;'n'
  1930  187F  343A               	retlw	58	;':'
  1931  1880  3430               	retlw	48	;'0'
  1932  1881  3433               	retlw	51	;'3'
  1933  1882  3400               	retlw	0
  1934  1883                     STR_23:	
  1935  1883  346C               	retlw	108	;'l'
  1936  1884  3465               	retlw	101	;'e'
  1937  1885  3476               	retlw	118	;'v'
  1938  1886  3465               	retlw	101	;'e'
  1939  1887  346C               	retlw	108	;'l'
  1940  1888  3420               	retlw	32	;' '
  1941  1889  3434               	retlw	52	;'4'
  1942  188A  3400               	retlw	0
  1943  188B                     STR_17:	
  1944  188B  3420               	retlw	32	;' '
  1945  188C  344D               	retlw	77	;'M'
  1946  188D  3469               	retlw	105	;'i'
  1947  188E  346E               	retlw	110	;'n'
  1948  188F  343A               	retlw	58	;':'
  1949  1890  3430               	retlw	48	;'0'
  1950  1891  3434               	retlw	52	;'4'
  1951  1892  3400               	retlw	0
  1952  1893                     STR_24:	
  1953  1893  346C               	retlw	108	;'l'
  1954  1894  3465               	retlw	101	;'e'
  1955  1895  3476               	retlw	118	;'v'
  1956  1896  3465               	retlw	101	;'e'
  1957  1897  346C               	retlw	108	;'l'
  1958  1898  3420               	retlw	32	;' '
  1959  1899  3435               	retlw	53	;'5'
  1960  189A  3400               	retlw	0
  1961  189B                     STR_15:	
  1962  189B  3420               	retlw	32	;' '
  1963  189C  344D               	retlw	77	;'M'
  1964  189D  3469               	retlw	105	;'i'
  1965  189E  346E               	retlw	110	;'n'
  1966  189F  343A               	retlw	58	;':'
  1967  18A0  3430               	retlw	48	;'0'
  1968  18A1  3435               	retlw	53	;'5'
  1969  18A2  3400               	retlw	0
  1970  18A3                     STR_25:	
  1971  18A3  346C               	retlw	108	;'l'
  1972  18A4  3465               	retlw	101	;'e'
  1973  18A5  3476               	retlw	118	;'v'
  1974  18A6  3465               	retlw	101	;'e'
  1975  18A7  346C               	retlw	108	;'l'
  1976  18A8  3420               	retlw	32	;' '
  1977  18A9  3436               	retlw	54	;'6'
  1978  18AA  3400               	retlw	0
  1979  18AB                     STR_16:	
  1980  18AB  3420               	retlw	32	;' '
  1981  18AC  344D               	retlw	77	;'M'
  1982  18AD  3469               	retlw	105	;'i'
  1983  18AE  346E               	retlw	110	;'n'
  1984  18AF  343A               	retlw	58	;':'
  1985  18B0  3430               	retlw	48	;'0'
  1986  18B1  3437               	retlw	55	;'7'
  1987  18B2  3400               	retlw	0
  1988  18B3                     STR_26:	
  1989  18B3  3453               	retlw	83	;'S'
  1990  18B4  3475               	retlw	117	;'u'
  1991  18B5  3463               	retlw	99	;'c'
  1992  18B6  3463               	retlw	99	;'c'
  1993  18B7  3465               	retlw	101	;'e'
  1994  18B8  3473               	retlw	115	;'s'
  1995  18B9  3473               	retlw	115	;'s'
  1996  18BA  3400               	retlw	0
  1997  18BB                     STR_5:	
  1998  18BB  3470               	retlw	112	;'p'
  1999  18BC  3469               	retlw	105	;'i'
  2000  18BD  346E               	retlw	110	;'n'
  2001  18BE  3467               	retlw	103	;'g'
  2002  18BF  3420               	retlw	32	;' '
  2003  18C0  346A               	retlw	106	;'j'
  2004  18C1  3475               	retlw	117	;'u'
  2005  18C2  3400               	retlw	0
  2006  18C3                     STR_11:	
  2007  18C3  3477               	retlw	119	;'w'
  2008  18C4  3461               	retlw	97	;'a'
  2009  18C5  3479               	retlw	121	;'y'
  2010  18C6  346F               	retlw	111	;'o'
  2011  18C7  3475               	retlw	117	;'u'
  2012  18C8  3474               	retlw	116	;'t'
  2013  18C9  3400               	retlw	0
  2014  18CA                     STR_22:	
  2015  18CA  3420               	retlw	32	;' '
  2016  18CB  342E               	retlw	46	;'.'
  2017  18CC  342E               	retlw	46	;'.'
  2018  18CD  342E               	retlw	46	;'.'
  2019  18CE  3400               	retlw	0
  2020  18CB                     
  2021                           ; #config settings
  2022  0000                     
  2023                           	psect	cinit
  2024  0024                     start_initialization:	
  2025  0024                     __initialization:		;BIGRAM
  2026                           
  2027                           ; Initialize objects allocated to BIGRAM
  2028  0024  3080               	movlw	low __pidataBIGRAM
  2029  0025  0084               	movwf	4
  2030  0026  308E               	movlw	(high __pidataBIGRAM)| (0+128)
  2031  0027  0085               	movwf	5
  2032  0028  3070               	movlw	low (0+8816)
  2033  0029  0086               	movwf	6
  2034  002A  3022               	movlw	high (0+8816)
  2035  002B  0087               	movwf	7
  2036  002C  3001               	movlw	1
  2037  002D  00FF               	movwf	btemp+1
  2038  002E  3080               	movlw	128
  2039  002F  319E  2644  3180   	fcall	init_ram
  2040                           
  2041                           ; Initialize objects allocated to BANK1
  2042  0032  3001               	movlw	low __pidataBANK1
  2043  0033  0084               	movwf	4
  2044  0034  3088               	movlw	(high __pidataBANK1)| (0+128)
  2045  0035  0085               	movwf	5
  2046  0036  30E5               	movlw	low __pdataBANK1
  2047  0037  0086               	movwf	6
  2048  0038  3000               	movlw	high __pdataBANK1
  2049  0039  0087               	movwf	7
  2050  003A  3000               	movlw	0
  2051  003B  00FF               	movwf	btemp+1
  2052  003C  3006               	movlw	6
  2053  003D  319E  2644  3180   	fcall	init_ram
  2054                           
  2055                           ; Initialize objects allocated to BANK2
  2056  0040  3000               	movlw	low __pidataBANK2
  2057  0041  0084               	movwf	4
  2058  0042  3092               	movlw	(high __pidataBANK2)| (0+128)
  2059  0043  0085               	movwf	5
  2060  0044  3020               	movlw	low __pdataBANK2
  2061  0045  0086               	movwf	6
  2062  0046  3001               	movlw	high __pdataBANK2
  2063  0047  0087               	movwf	7
  2064  0048  3000               	movlw	0
  2065  0049  00FF               	movwf	btemp+1
  2066  004A  304C               	movlw	76
  2067  004B  319E  2644  3180   	fcall	init_ram
  2068                           
  2069                           ; Initialize objects allocated to BANK3
  2070  004E  30F2               	movlw	low __pidataBANK3
  2071  004F  0084               	movwf	4
  2072  0050  3090               	movlw	(high __pidataBANK3)| (0+128)
  2073  0051  0085               	movwf	5
  2074  0052  30A0               	movlw	low __pdataBANK3
  2075  0053  0086               	movwf	6
  2076  0054  3001               	movlw	high __pdataBANK3
  2077  0055  0087               	movwf	7
  2078  0056  3000               	movlw	0
  2079  0057  00FF               	movwf	btemp+1
  2080  0058  303A               	movlw	58
  2081  0059  319E  2644  3180   	fcall	init_ram
  2082                           
  2083                           ; Clear objects allocated to BANK0
  2084  005C  01E4               	clrf	__pbssBANK0& (0+127)
  2085  005D  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  2086  005E  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  2087  005F  01E7               	clrf	(__pbssBANK0+3)& (0+127)
  2088  0060  01E8               	clrf	(__pbssBANK0+4)& (0+127)
  2089  0061  01E9               	clrf	(__pbssBANK0+5)& (0+127)
  2090  0062  01EA               	clrf	(__pbssBANK0+6)& (0+127)
  2091  0063  01EB               	clrf	(__pbssBANK0+7)& (0+127)
  2092                           
  2093                           ; Clear objects allocated to BANK1
  2094  0064  30A0               	movlw	low __pbssBANK1
  2095  0065  0084               	movwf	4
  2096  0066  3000               	movlw	high __pbssBANK1
  2097  0067  0085               	movwf	5
  2098  0068  3045               	movlw	69
  2099  0069  00FE               	movwf	btemp
  2100  006A  3000               	movlw	0
  2101  006B  00FF               	movwf	btemp+1
  2102  006C  319E  2638  3180   	fcall	clear_ram0
  2103                           
  2104                           ; Clear objects allocated to BANK3
  2105  006F  0023               	movlb	3	; select bank3
  2106  0070  01DA               	clrf	__pbssBANK3& (0+127)
  2107  0071  01DB               	clrf	(__pbssBANK3+1)& (0+127)
  2108  0072  01DC               	clrf	(__pbssBANK3+2)& (0+127)
  2109  0073  01DD               	clrf	(__pbssBANK3+3)& (0+127)
  2110  0074  01DE               	clrf	(__pbssBANK3+4)& (0+127)
  2111  0075  01DF               	clrf	(__pbssBANK3+5)& (0+127)
  2112  0076  01E0               	clrf	(__pbssBANK3+6)& (0+127)
  2113  0077  01E1               	clrf	(__pbssBANK3+7)& (0+127)
  2114                           
  2115                           ; Clear objects allocated to BANK4
  2116  0078  3020               	movlw	low __pbssBANK4
  2117  0079  0084               	movwf	4
  2118  007A  3002               	movlw	high __pbssBANK4
  2119  007B  0085               	movwf	5
  2120  007C  3040               	movlw	64
  2121  007D  00FE               	movwf	btemp
  2122  007E  3000               	movlw	0
  2123  007F  00FF               	movwf	btemp+1
  2124  0080  319E  2638         	fcall	clear_ram0
  2125  0082                     end_of_initialization:	
  2126                           ;End of C runtime variable initialization code
  2127                           
  2128  0082                     __end_of__initialization:	
  2129  0082  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2130  0083  0020               	movlb	0
  2131  0084  319E  2E7C         	ljmp	_main	;jump to C main() function
  2132                           
  2133                           	psect	bssBANK0
  2134  0064                     __pbssBANK0:	
  2135  0064                     _temp_cursor:	
  2136  0064                     	ds	3
  2137  0067                     _black_num:	
  2138  0067                     	ds	1
  2139  0068                     _key:	
  2140  0068                     	ds	1
  2141  0069                     _level_num:	
  2142  0069                     	ds	1
  2143  006A                     _temp_key:	
  2144  006A                     	ds	1
  2145  006B                     _white_num:	
  2146  006B                     	ds	1
  2147                           
  2148                           	psect	bssBANK1
  2149  00A0                     __pbssBANK1:	
  2150  00A0                     _empty_num:	
  2151  00A0                     	ds	1
  2152  00A1                     _player:	
  2153  00A1                     	ds	1
  2154  00A2                     _result:	
  2155  00A2                     	ds	1
  2156  00A3                     _start:	
  2157  00A3                     	ds	1
  2158  00A4                     _total_step:	
  2159  00A4                     	ds	1
  2160  00A5                     _table:	
  2161  00A5                     	ds	64
  2162                           
  2163                           	psect	dataBANK1
  2164  00E5                     __pdataBANK1:	
  2165  00E5                     Display_Chars@F6414:	
  2166  00E5                     	ds	4
  2167  00E9                     get_Y_Addr@F6419:	
  2168  00E9                     	ds	2
  2169                           
  2170                           	psect	dataBANK2
  2171  0120                     __pdataBANK2:	
  2172  0120                     _screen:	
  2173  0120                     	ds	48
  2174  0150                     _display_black:	
  2175  0150                     	ds	10
  2176  015A                     _display_white:	
  2177  015A                     	ds	10
  2178  0164                     _second_chess:	
  2179  0164                     	ds	8
  2180                           
  2181                           	psect	bssBANK3
  2182  01DA                     __pbssBANK3:	
  2183  01DA                     _empty:	
  2184  01DA                     	ds	8
  2185                           
  2186                           	psect	dataBANK3
  2187  01A0                     __pdataBANK3:	
  2188  01A0                     _towards:	
  2189  01A0                     	ds	16
  2190  01B0                     _display_step:	
  2191  01B0                     	ds	10
  2192  01BA                     _choose_empty:	
  2193  01BA                     	ds	8
  2194  01C2                     _choose_first:	
  2195  01C2                     	ds	8
  2196  01CA                     _choose_second:	
  2197  01CA                     	ds	8
  2198  01D2                     _first_chess:	
  2199  01D2                     	ds	8
  2200                           
  2201                           	psect	bssBANK4
  2202  0220                     __pbssBANK4:	
  2203  0220                     _last_table:	
  2204  0220                     	ds	64
  2205                           
  2206                           	psect	inittext
  2207  1E44                     init_ram:	
  2208  1E44  00FE               	movwf	126
  2209  1E45                     initloop:	
  2210  1E45  0012               	moviw fsr0++
  2211  1E46  001E               	movwi fsr1++
  2212  1E47  3001               	movlw	1
  2213  1E48  02FE               	subwf	126,f
  2214  1E49  3000               	movlw	0
  2215  1E4A  3BFF               	subwfb	127,f
  2216  1E4B  087F               	movf	127,w
  2217  1E4C  047E               	iorwf	126,w
  2218  1E4D  1903               	btfsc	3,2
  2219  1E4E  3400               	retlw	0
  2220  1E4F  2E45               	goto	initloop
  2221                           
  2222                           	psect	clrtext
  2223  1E38                     clear_ram0:	
  2224                           ;	Called with FSR0 containing the base address, and
  2225                           ;	btemp/btemp+1 has the size to clear
  2226                           
  2227  1E38  0064               	clrwdt	;clear the watchdog before getting into this loop
  2228  1E39                     clrloop0:	
  2229  1E39  0180               	clrf	0	;clear RAM location pointed to by FSR
  2230  1E3A  3101               	addfsr 0,1
  2231  1E3B  3001               	movlw	1
  2232  1E3C  02FE               	subwf	126,f
  2233  1E3D  3000               	movlw	0
  2234  1E3E  3BFF               	subwfb	127,f
  2235  1E3F  087F               	movf	127,w
  2236  1E40  047E               	iorwf	126,w
  2237  1E41  1903               	btfsc	3,2
  2238  1E42  3400               	retlw	0	;all done for this memory range, return
  2239  1E43  2E39               	goto	clrloop0	;have we reached the end yet?
  2240                           
  2241                           	psect	cstackBANK1
  2242  00EB                     __pcstackBANK1:	
  2243  00EB                     ?_main:	
  2244  00EB                     main@argc:	
  2245                           ; 2 bytes @ 0x0
  2246                           
  2247                           
  2248                           ; 2 bytes @ 0x0
  2249  00EB                     	ds	2
  2250  00ED                     main@argv:	
  2251                           
  2252                           ; 2 bytes @ 0x2
  2253  00ED                     	ds	2
  2254                           
  2255                           	psect	cstackCOMMON
  2256  0070                     __pcstackCOMMON:	
  2257  0070                     ?_init_environment:	
  2258  0070                     ?_set_menu:	
  2259                           ; 1 bytes @ 0x0
  2260                           
  2261  0070                     ?_little_star:	
  2262                           ; 1 bytes @ 0x0
  2263                           
  2264  0070                     ?_choose_level2:	
  2265                           ; 1 bytes @ 0x0
  2266                           
  2267  0070                     ?_init_wayout:	
  2268                           ; 1 bytes @ 0x0
  2269                           
  2270  0070                     ?_wayout:	
  2271                           ; 1 bytes @ 0x0
  2272                           
  2273  0070                     ?_draw_heibaiqi_right:	
  2274                           ; 1 bytes @ 0x0
  2275                           
  2276  0070                     ?_init_heibaiqi:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279  0070                     ?_judge_result:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282  0070                     ?_heibaiqi:	
  2283                           ; 1 bytes @ 0x0
  2284                           
  2285  0070                     ?_init_cfg:	
  2286                           ; 1 bytes @ 0x0
  2287                           
  2288  0070                     ?_start_video:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291  0070                     ?_read_key:	
  2292                           ; 1 bytes @ 0x0
  2293                           
  2294  0070                     ??_read_key:	
  2295                           ; 1 bytes @ 0x0
  2296                           
  2297  0070                     ?_get_key:	
  2298                           ; 1 bytes @ 0x0
  2299                           
  2300  0070                     ?_run_game:	
  2301                           ; 1 bytes @ 0x0
  2302                           
  2303  0070                     ?_ISR:	
  2304                           ; 1 bytes @ 0x0
  2305                           
  2306  0070                     ?_check_if_complete:	
  2307                           ; 1 bytes @ 0x0
  2308                           
  2309  0070                     ?_wayout_display1:	
  2310                           ; 1 bytes @ 0x0
  2311                           
  2312  0070                     ?_wayout_display2:	
  2313                           ; 1 bytes @ 0x0
  2314                           
  2315  0070                     ?i1___wmul:	
  2316                           ; 1 bytes @ 0x0
  2317                           
  2318  0070                     check_Pos@x:	
  2319                           ; 2 bytes @ 0x0
  2320                           
  2321  0070                     i1___wmul@multiplier:	
  2322                           ; 1 bytes @ 0x0
  2323                           
  2324                           
  2325                           ; 2 bytes @ 0x0
  2326  0070                     	ds	2
  2327  0072                     i1___wmul@multiplicand:	
  2328                           
  2329                           ; 2 bytes @ 0x2
  2330  0072                     	ds	2
  2331  0074                     ??i1___wmul:	
  2332  0074                     i1___wmul@product:	
  2333                           ; 1 bytes @ 0x4
  2334                           
  2335                           
  2336                           ; 2 bytes @ 0x4
  2337  0074                     	ds	2
  2338  0076                     ?i1_delay_100us:	
  2339  0076                     i1delay_100us@cnt:	
  2340                           ; 1 bytes @ 0x6
  2341                           
  2342                           
  2343                           ; 2 bytes @ 0x6
  2344  0076                     	ds	2
  2345  0078                     ??i1_delay_100us:	
  2346                           
  2347                           ; 1 bytes @ 0x8
  2348  0078                     	ds	1
  2349  0079                     i1delay_100us@i:	
  2350                           
  2351                           ; 2 bytes @ 0x9
  2352  0079                     	ds	2
  2353  007B                     i1delay_100us@h:	
  2354                           
  2355                           ; 2 bytes @ 0xB
  2356  007B                     	ds	2
  2357  007D                     ??_get_key:	
  2358                           
  2359                           ; 1 bytes @ 0xD
  2360  007D                     	ds	1
  2361                           
  2362                           	psect	cstackBANK0
  2363  0020                     __pcstackBANK0:	
  2364  0020                     get_key@last_key:	
  2365                           
  2366                           ; 1 bytes @ 0x0
  2367  0020                     	ds	1
  2368  0021                     ??_ISR:	
  2369                           
  2370                           ; 1 bytes @ 0x1
  2371  0021                     	ds	2
  2372  0023                     ?_memset:	
  2373  0023                     ??_judge_result:	
  2374                           ; 1 bytes @ 0x3
  2375                           
  2376  0023                     ?_get_X_Addr:	
  2377                           ; 1 bytes @ 0x3
  2378                           
  2379  0023                     ?_readFromTable:	
  2380                           ; 1 bytes @ 0x3
  2381                           
  2382  0023                     ?_delay_music:	
  2383                           ; 1 bytes @ 0x3
  2384                           
  2385  0023                     ?_if_in_table:	
  2386                           ; 1 bytes @ 0x3
  2387                           
  2388  0023                     ??_check_if_complete:	
  2389                           ; 1 bytes @ 0x3
  2390                           
  2391  0023                     ?___bmul:	
  2392                           ; 1 bytes @ 0x3
  2393                           
  2394  0023                     ?_check_Pos:	
  2395                           ; 1 bytes @ 0x3
  2396                           
  2397  0023                     ?___wmul:	
  2398                           ; 2 bytes @ 0x3
  2399                           
  2400  0023                     ?___awdiv:	
  2401                           ; 2 bytes @ 0x3
  2402                           
  2403  0023                     ?___awmod:	
  2404                           ; 2 bytes @ 0x3
  2405                           
  2406  0023                     get_X_Addr@y:	
  2407                           ; 2 bytes @ 0x3
  2408                           
  2409  0023                     check_Pos@y:	
  2410                           ; 1 bytes @ 0x3
  2411                           
  2412  0023                     readFromTable@y:	
  2413                           ; 1 bytes @ 0x3
  2414                           
  2415  0023                     ___bmul@multiplicand:	
  2416                           ; 1 bytes @ 0x3
  2417                           
  2418  0023                     delay_music@mclass:	
  2419                           ; 1 bytes @ 0x3
  2420                           
  2421  0023                     if_in_table@i:	
  2422                           ; 2 bytes @ 0x3
  2423                           
  2424  0023                     ___wmul@multiplier:	
  2425                           ; 2 bytes @ 0x3
  2426                           
  2427  0023                     ___awdiv@divisor:	
  2428                           ; 2 bytes @ 0x3
  2429                           
  2430  0023                     ___awmod@divisor:	
  2431                           ; 2 bytes @ 0x3
  2432                           
  2433  0023                     memset@c:	
  2434                           ; 2 bytes @ 0x3
  2435                           
  2436                           
  2437                           ; 2 bytes @ 0x3
  2438  0023                     	ds	1
  2439  0024                     ??_get_X_Addr:	
  2440  0024                     ??___bmul:	
  2441                           ; 1 bytes @ 0x4
  2442                           
  2443  0024                     readFromTable@offset:	
  2444                           ; 1 bytes @ 0x4
  2445                           
  2446                           
  2447                           ; 2 bytes @ 0x4
  2448  0024                     	ds	1
  2449  0025                     ??_delay_music:	
  2450  0025                     get_X_Addr@addr:	
  2451                           ; 1 bytes @ 0x5
  2452                           
  2453  0025                     ___bmul@product:	
  2454                           ; 1 bytes @ 0x5
  2455                           
  2456  0025                     if_in_table@j:	
  2457                           ; 1 bytes @ 0x5
  2458                           
  2459  0025                     ___wmul@multiplicand:	
  2460                           ; 2 bytes @ 0x5
  2461                           
  2462  0025                     ___awdiv@dividend:	
  2463                           ; 2 bytes @ 0x5
  2464                           
  2465  0025                     ___awmod@dividend:	
  2466                           ; 2 bytes @ 0x5
  2467                           
  2468  0025                     memset@n:	
  2469                           ; 2 bytes @ 0x5
  2470                           
  2471                           
  2472                           ; 2 bytes @ 0x5
  2473  0025                     	ds	1
  2474  0026                     ??_check_Pos:	
  2475  0026                     ??_readFromTable:	
  2476                           ; 1 bytes @ 0x6
  2477                           
  2478  0026                     get_X_Addr@x:	
  2479                           ; 1 bytes @ 0x6
  2480                           
  2481  0026                     check_if_complete@i:	
  2482                           ; 1 bytes @ 0x6
  2483                           
  2484  0026                     ___bmul@multiplier:	
  2485                           ; 1 bytes @ 0x6
  2486                           
  2487  0026                     check_Pos@result:	
  2488                           ; 1 bytes @ 0x6
  2489                           
  2490  0026                     delay_music@a:	
  2491                           ; 2 bytes @ 0x6
  2492                           
  2493                           
  2494                           ; 2 bytes @ 0x6
  2495  0026                     	ds	1
  2496  0027                     ??_memset:	
  2497  0027                     ??_if_in_table:	
  2498                           ; 1 bytes @ 0x7
  2499                           
  2500  0027                     ??___wmul:	
  2501                           ; 1 bytes @ 0x7
  2502                           
  2503  0027                     ??___awdiv:	
  2504                           ; 1 bytes @ 0x7
  2505                           
  2506  0027                     ??___awmod:	
  2507                           ; 1 bytes @ 0x7
  2508                           
  2509  0027                     check_if_complete@j:	
  2510                           ; 1 bytes @ 0x7
  2511                           
  2512  0027                     ___wmul@product:	
  2513                           ; 1 bytes @ 0x7
  2514                           
  2515                           
  2516                           ; 2 bytes @ 0x7
  2517  0027                     	ds	1
  2518  0028                     ___awdiv@counter:	
  2519  0028                     ___awmod@counter:	
  2520                           ; 1 bytes @ 0x8
  2521                           
  2522  0028                     memset@p:	
  2523                           ; 1 bytes @ 0x8
  2524                           
  2525  0028                     delay_music@i:	
  2526                           ; 1 bytes @ 0x8
  2527                           
  2528                           
  2529                           ; 2 bytes @ 0x8
  2530  0028                     	ds	1
  2531  0029                     ?_delay_100us:	
  2532  0029                     ?_check_point:	
  2533                           ; 1 bytes @ 0x9
  2534                           
  2535  0029                     check_point@col:	
  2536                           ; 1 bytes @ 0x9
  2537                           
  2538  0029                     ___awdiv@sign:	
  2539                           ; 1 bytes @ 0x9
  2540                           
  2541  0029                     ___awmod@sign:	
  2542                           ; 1 bytes @ 0x9
  2543                           
  2544  0029                     memset@p1:	
  2545                           ; 1 bytes @ 0x9
  2546                           
  2547  0029                     delay_100us@cnt:	
  2548                           ; 1 bytes @ 0x9
  2549                           
  2550                           
  2551                           ; 2 bytes @ 0x9
  2552  0029                     	ds	1
  2553  002A                     check_point@ply:	
  2554  002A                     ___awdiv@quotient:	
  2555                           ; 1 bytes @ 0xA
  2556                           
  2557                           
  2558                           ; 2 bytes @ 0xA
  2559  002A                     	ds	1
  2560  002B                     ??_delay_100us:	
  2561  002B                     ??_check_point:	
  2562                           ; 1 bytes @ 0xB
  2563                           
  2564                           
  2565                           ; 1 bytes @ 0xB
  2566  002B                     	ds	1
  2567  002C                     ?_int2string:	
  2568  002C                     ?_get_Y_Addr:	
  2569                           ; 1 bytes @ 0xC
  2570                           
  2571  002C                     int2string@begin:	
  2572                           ; 1 bytes @ 0xC
  2573                           
  2574  002C                     get_Y_Addr@y:	
  2575                           ; 1 bytes @ 0xC
  2576                           
  2577  002C                     delay_100us@i:	
  2578                           ; 1 bytes @ 0xC
  2579                           
  2580                           
  2581                           ; 2 bytes @ 0xC
  2582  002C                     	ds	1
  2583  002D                     ??_get_Y_Addr:	
  2584  002D                     int2string@num:	
  2585                           ; 1 bytes @ 0xD
  2586                           
  2587  002D                     readFromTable@x:	
  2588                           ; 1 bytes @ 0xD
  2589                           
  2590                           
  2591                           ; 1 bytes @ 0xD
  2592  002D                     	ds	1
  2593  002E                     ??_int2string:	
  2594  002E                     delay_100us@h:	
  2595                           ; 1 bytes @ 0xE
  2596                           
  2597                           
  2598                           ; 2 bytes @ 0xE
  2599  002E                     	ds	1
  2600  002F                     get_Y_Addr@addresses:	
  2601                           
  2602                           ; 2 bytes @ 0xF
  2603  002F                     	ds	1
  2604  0030                     ?_Write_Com:	
  2605  0030                     ?_Write_Data:	
  2606                           ; 1 bytes @ 0x10
  2607                           
  2608  0030                     ?_music:	
  2609                           ; 1 bytes @ 0x10
  2610                           
  2611  0030                     ?_music_delay:	
  2612                           ; 1 bytes @ 0x10
  2613                           
  2614  0030                     Write_Data@dat:	
  2615                           ; 1 bytes @ 0x10
  2616                           
  2617  0030                     Write_Com@com:	
  2618                           ; 2 bytes @ 0x10
  2619                           
  2620  0030                     music_delay@mclass:	
  2621                           ; 2 bytes @ 0x10
  2622                           
  2623  0030                     music@mclass:	
  2624                           ; 2 bytes @ 0x10
  2625                           
  2626                           
  2627                           ; 2 bytes @ 0x10
  2628  0030                     	ds	1
  2629  0031                     get_Y_Addr@x:	
  2630                           
  2631                           ; 1 bytes @ 0x11
  2632  0031                     	ds	1
  2633  0032                     ??_Write_Com:	
  2634  0032                     ??_Write_Data:	
  2635                           ; 1 bytes @ 0x12
  2636                           
  2637  0032                     ?_Display_Chars:	
  2638                           ; 1 bytes @ 0x12
  2639                           
  2640  0032                     ?_Clear_Screen:	
  2641                           ; 1 bytes @ 0x12
  2642                           
  2643  0032                     ??_music:	
  2644                           ; 1 bytes @ 0x12
  2645                           
  2646  0032                     ??_init_cfg:	
  2647                           ; 1 bytes @ 0x12
  2648                           
  2649  0032                     ??_music_delay:	
  2650                           ; 1 bytes @ 0x12
  2651                           
  2652  0032                     int2string@i:	
  2653                           ; 1 bytes @ 0x12
  2654                           
  2655  0032                     Clear_Screen@value:	
  2656                           ; 2 bytes @ 0x12
  2657                           
  2658  0032                     Display_Chars@string:	
  2659                           ; 2 bytes @ 0x12
  2660                           
  2661  0032                     _get_Y_Addr$438:	
  2662                           ; 2 bytes @ 0x12
  2663                           
  2664                           
  2665                           ; 2 bytes @ 0x12
  2666  0032                     	ds	1
  2667  0033                     music_delay@i:	
  2668  0033                     music@i:	
  2669                           ; 2 bytes @ 0x13
  2670                           
  2671                           
  2672                           ; 2 bytes @ 0x13
  2673  0033                     	ds	1
  2674  0034                     ??_Clear_Screen:	
  2675  0034                     check_point@result:	
  2676                           ; 1 bytes @ 0x14
  2677                           
  2678  0034                     int2string@a:	
  2679                           ; 1 bytes @ 0x14
  2680                           
  2681  0034                     Display_Chars@y:	
  2682                           ; 1 bytes @ 0x14
  2683                           
  2684  0034                     _get_Y_Addr$439:	
  2685                           ; 1 bytes @ 0x14
  2686                           
  2687                           
  2688                           ; 2 bytes @ 0x14
  2689  0034                     	ds	1
  2690  0035                     ??_Display_Chars:	
  2691  0035                     check_point@oppo:	
  2692                           ; 1 bytes @ 0x15
  2693                           
  2694  0035                     Clear_Screen@j:	
  2695                           ; 1 bytes @ 0x15
  2696                           
  2697  0035                     music_delay@i_482:	
  2698                           ; 1 bytes @ 0x15
  2699                           
  2700  0035                     music@i_489:	
  2701                           ; 2 bytes @ 0x15
  2702                           
  2703                           
  2704                           ; 2 bytes @ 0x15
  2705  0035                     	ds	1
  2706  0036                     check_point@temp:	
  2707  0036                     Clear_Screen@i:	
  2708                           ; 1 bytes @ 0x16
  2709                           
  2710  0036                     get_Y_Addr@init_Addr:	
  2711                           ; 1 bytes @ 0x16
  2712                           
  2713                           
  2714                           ; 1 bytes @ 0x16
  2715  0036                     	ds	1
  2716  0037                     ??_init_environment:	
  2717  0037                     check_point@row:	
  2718                           ; 1 bytes @ 0x17
  2719                           
  2720  0037                     get_Y_Addr@addr:	
  2721                           ; 1 bytes @ 0x17
  2722                           
  2723  0037                     music_delay@i_483:	
  2724                           ; 1 bytes @ 0x17
  2725                           
  2726  0037                     Display_Chars@addresses:	
  2727                           ; 2 bytes @ 0x17
  2728                           
  2729                           
  2730                           ; 4 bytes @ 0x17
  2731  0037                     	ds	1
  2732  0038                     check_point@add_row:	
  2733  0038                     get_Y_Addr@addr_Offset:	
  2734                           ; 1 bytes @ 0x18
  2735                           
  2736                           
  2737                           ; 1 bytes @ 0x18
  2738  0038                     	ds	1
  2739  0039                     ?_set_point:	
  2740  0039                     ??_little_star:	
  2741                           ; 1 bytes @ 0x19
  2742                           
  2743  0039                     check_point@add_col:	
  2744                           ; 1 bytes @ 0x19
  2745                           
  2746  0039                     set_point@point_y:	
  2747                           ; 1 bytes @ 0x19
  2748                           
  2749                           
  2750                           ; 1 bytes @ 0x19
  2751  0039                     	ds	1
  2752  003A                     check_point@j:	
  2753  003A                     set_point@value:	
  2754                           ; 1 bytes @ 0x1A
  2755                           
  2756                           
  2757                           ; 1 bytes @ 0x1A
  2758  003A                     	ds	1
  2759  003B                     ??_set_point:	
  2760  003B                     check_point@flag:	
  2761                           ; 1 bytes @ 0x1B
  2762                           
  2763  003B                     Display_Chars@i:	
  2764                           ; 1 bytes @ 0x1B
  2765                           
  2766                           
  2767                           ; 2 bytes @ 0x1B
  2768  003B                     	ds	1
  2769  003C                     check_point@i:	
  2770                           
  2771                           ; 1 bytes @ 0x1C
  2772  003C                     	ds	1
  2773  003D                     Display_Chars@x:	
  2774                           
  2775                           ; 1 bytes @ 0x1D
  2776  003D                     	ds	1
  2777  003E                     ??_draw_heibaiqi_right:	
  2778  003E                     ??_start_video:	
  2779                           ; 1 bytes @ 0x1E
  2780                           
  2781  003E                     ?_draw_wayout_right:	
  2782                           ; 1 bytes @ 0x1E
  2783                           
  2784  003E                     ??_wayout_display1:	
  2785                           ; 1 bytes @ 0x1E
  2786                           
  2787  003E                     ??_wayout_display2:	
  2788                           ; 1 bytes @ 0x1E
  2789                           
  2790  003E                     set_point@is_Offset_Pos:	
  2791                           ; 1 bytes @ 0x1E
  2792                           
  2793  003E                     draw_wayout_right@level:	
  2794                           ; 2 bytes @ 0x1E
  2795                           
  2796                           
  2797                           ; 2 bytes @ 0x1E
  2798  003E                     	ds	2
  2799  0040                     ??_draw_wayout_right:	
  2800  0040                     draw_heibaiqi_right@j:	
  2801                           ; 1 bytes @ 0x20
  2802                           
  2803  0040                     set_point@init_X_Addr:	
  2804                           ; 1 bytes @ 0x20
  2805                           
  2806                           
  2807                           ; 1 bytes @ 0x20
  2808  0040                     	ds	1
  2809  0041                     draw_heibaiqi_right@i:	
  2810  0041                     set_point@init_Y_Addr:	
  2811                           ; 1 bytes @ 0x21
  2812                           
  2813                           
  2814                           ; 1 bytes @ 0x21
  2815  0041                     	ds	1
  2816  0042                     set_point@point_x:	
  2817  0042                     draw_wayout_right@j:	
  2818                           ; 1 bytes @ 0x22
  2819                           
  2820                           
  2821                           ; 1 bytes @ 0x22
  2822  0042                     	ds	1
  2823  0043                     draw_wayout_right@i:	
  2824  0043                     set_point@i:	
  2825                           ; 1 bytes @ 0x23
  2826                           
  2827                           
  2828                           ; 2 bytes @ 0x23
  2829  0043                     	ds	2
  2830  0045                     ??_set_menu:	
  2831  0045                     ??_init_wayout:	
  2832                           ; 1 bytes @ 0x25
  2833                           
  2834  0045                     ??_init_heibaiqi:	
  2835                           ; 1 bytes @ 0x25
  2836                           
  2837  0045                     ?_choose_point:	
  2838                           ; 1 bytes @ 0x25
  2839                           
  2840  0045                     ?_change_near:	
  2841                           ; 1 bytes @ 0x25
  2842                           
  2843  0045                     choose_point@col:	
  2844                           ; 1 bytes @ 0x25
  2845                           
  2846  0045                     change_near@k:	
  2847                           ; 1 bytes @ 0x25
  2848                           
  2849                           
  2850                           ; 2 bytes @ 0x25
  2851  0045                     	ds	1
  2852  0046                     ??_choose_level2:	
  2853  0046                     choose_point@ply:	
  2854                           ; 1 bytes @ 0x26
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0x26
  2858  0046                     	ds	1
  2859  0047                     ??_choose_point:	
  2860  0047                     change_near@l:	
  2861                           ; 1 bytes @ 0x27
  2862                           
  2863                           
  2864                           ; 2 bytes @ 0x27
  2865  0047                     	ds	2
  2866  0049                     ??_change_near:	
  2867                           
  2868                           ; 1 bytes @ 0x29
  2869  0049                     	ds	4
  2870  004D                     choose_level2@step:	
  2871                           
  2872                           ; 1 bytes @ 0x2D
  2873  004D                     	ds	1
  2874  004E                     choose_level2@max_level3:	
  2875                           
  2876                           ; 1 bytes @ 0x2E
  2877  004E                     	ds	2
  2878  0050                     ?_choose:	
  2879  0050                     choose@i:	
  2880                           ; 1 bytes @ 0x30
  2881                           
  2882                           
  2883                           ; 2 bytes @ 0x30
  2884  0050                     	ds	1
  2885  0051                     choose_point@result:	
  2886                           
  2887                           ; 1 bytes @ 0x31
  2888  0051                     	ds	1
  2889  0052                     choose_point@temp:	
  2890  0052                     choose@j:	
  2891                           ; 1 bytes @ 0x32
  2892                           
  2893                           
  2894                           ; 2 bytes @ 0x32
  2895  0052                     	ds	1
  2896  0053                     choose_point@right:	
  2897                           
  2898                           ; 1 bytes @ 0x33
  2899  0053                     	ds	1
  2900  0054                     ??_choose:	
  2901  0054                     choose_point@up:	
  2902                           ; 1 bytes @ 0x34
  2903                           
  2904                           
  2905                           ; 1 bytes @ 0x34
  2906  0054                     	ds	1
  2907  0055                     choose_point@i:	
  2908  0055                     init_wayout@level_num:	
  2909                           ; 1 bytes @ 0x35
  2910                           
  2911                           
  2912                           ; 1 bytes @ 0x35
  2913  0055                     	ds	1
  2914  0056                     choose_point@row:	
  2915  0056                     init_wayout@i:	
  2916                           ; 1 bytes @ 0x36
  2917                           
  2918                           
  2919                           ; 2 bytes @ 0x36
  2920  0056                     	ds	1
  2921  0057                     choose_point@j:	
  2922                           
  2923                           ; 1 bytes @ 0x37
  2924  0057                     	ds	1
  2925  0058                     ??_heibaiqi:	
  2926  0058                     init_wayout@j:	
  2927                           ; 1 bytes @ 0x38
  2928                           
  2929                           
  2930                           ; 2 bytes @ 0x38
  2931  0058                     	ds	3
  2932  005B                     ??_wayout:	
  2933                           
  2934                           ; 1 bytes @ 0x3B
  2935  005B                     	ds	7
  2936  0062                     ??_run_game:	
  2937                           
  2938                           ; 1 bytes @ 0x42
  2939  0062                     	ds	2
  2940  0064                     ??_main:	
  2941                           
  2942                           	psect	maintext
  2943  1E7C                     __pmaintext:	
  2944                           ; 1 bytes @ 0x44
  2945 ;;
  2946 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2947 ;;
  2948 ;; *************** function _main *****************
  2949 ;; Defined at:
  2950 ;;		line 33 in file "main.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  argc            2    0[BANK1 ] int 
  2953 ;;  argv            2    2[BANK1 ] PTR PTR unsigned char 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;		None
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  2    0[BANK1 ] int 
  2958 ;; Registers used:
  2959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2960 ;; Tracked objects:
  2961 ;;		On entry : B1F/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2965 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2968 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2969 ;;Total ram usage:        4 bytes
  2970 ;; Hardware stack levels required when called:   12
  2971 ;; This function calls:
  2972 ;;		_init_cfg
  2973 ;;		_init_environment
  2974 ;;		_run_game
  2975 ;;		_set_menu
  2976 ;;		_start_video
  2977 ;; This function is called by:
  2978 ;;		Startup code after reset
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           
  2983                           ;psect for function _main
  2984  1E7C                     _main:	
  2985                           
  2986                           ;main.c: 34: init_cfg();
  2987                           
  2988                           ;incstack = 0
  2989                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2990  1E7C  3193  23F8  319E   	fcall	_init_cfg
  2991                           
  2992                           ;main.c: 39: init_environment();
  2993  1E7F  319E  269E  319E   	fcall	_init_environment
  2994                           
  2995                           ;main.c: 40: start_video();
  2996  1E82  3190  2001  319E   	fcall	_start_video
  2997                           
  2998                           ;main.c: 41: set_menu();
  2999  1E85  319F  276B  319E   	fcall	_set_menu
  3000  1E88                     l4088:	
  3001                           ;main.c: 42: while(1)
  3002                           
  3003                           
  3004                           ;main.c: 43: {
  3005                           ;main.c: 44: run_game();
  3006  1E88  3195  2561  319E   	fcall	_run_game
  3007  1E8B  2E88               	goto	l4088
  3008  1E8C                     __end_of_main:	
  3009                           ;main.c: 49: }
  3010                           ;main.c: 50: return (0);
  3011                           ;	Return value of _main is never used
  3012                           
  3013                           
  3014                           	psect	text1
  3015  1001                     __ptext1:	
  3016 ;; *************** function _start_video *****************
  3017 ;; Defined at:
  3018 ;;		line 286 in file "func.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3036 ;;Total ram usage:        0 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    8
  3039 ;; This function calls:
  3040 ;;		_Clear_Screen
  3041 ;;		_Display_Chars
  3042 ;;		_little_star
  3043 ;; This function is called by:
  3044 ;;		_main
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           
  3049                           ;psect for function _start_video
  3050  1001                     _start_video:	
  3051                           
  3052                           ;func.c: 288: Display_Chars(1, "Welcome to",1);
  3053                           
  3054                           ;incstack = 0
  3055                           ; Regs used in _start_video: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3056  1001  302B               	movlw	low (STR_7| (0+32768))
  3057  1002  0020               	movlb	0	; select bank0
  3058  1003  00B2               	movwf	Display_Chars@string
  3059  1004  3098               	movlw	high (STR_7| (0+32768))
  3060  1005  00B3               	movwf	Display_Chars@string+1
  3061  1006  01B4               	clrf	Display_Chars@y
  3062  1007  0AB4               	incf	Display_Chars@y,f
  3063  1008  3001               	movlw	1
  3064  1009  3192  22ED  3190   	fcall	_Display_Chars
  3065                           
  3066                           ;func.c: 289: Display_Chars(2, "Xiaobawang",1);
  3067  100C  3020               	movlw	low (STR_8| (0+32768))
  3068  100D  0020               	movlb	0	; select bank0
  3069  100E  00B2               	movwf	Display_Chars@string
  3070  100F  3098               	movlw	high (STR_8| (0+32768))
  3071  1010  00B3               	movwf	Display_Chars@string+1
  3072  1011  01B4               	clrf	Display_Chars@y
  3073  1012  0AB4               	incf	Display_Chars@y,f
  3074  1013  3002               	movlw	2
  3075  1014  3192  22ED  3190   	fcall	_Display_Chars
  3076                           
  3077                           ;func.c: 290: Display_Chars(3, "Game Machine",1);
  3078  1017  3013               	movlw	low (STR_9| (0+32768))
  3079  1018  0020               	movlb	0	; select bank0
  3080  1019  00B2               	movwf	Display_Chars@string
  3081  101A  3098               	movlw	high (STR_9| (0+32768))
  3082  101B  00B3               	movwf	Display_Chars@string+1
  3083  101C  01B4               	clrf	Display_Chars@y
  3084  101D  0AB4               	incf	Display_Chars@y,f
  3085  101E  3003               	movlw	3
  3086  101F  3192  22ED  3190   	fcall	_Display_Chars
  3087                           
  3088                           ;func.c: 291: little_star();
  3089  1022  3188  20CA  3190   	fcall	_little_star
  3090                           
  3091                           ;func.c: 293: Clear_Screen(0x00);
  3092  1025  3000               	movlw	0
  3093  1026  0020               	movlb	0	; select bank0
  3094  1027  00B2               	movwf	Clear_Screen@value
  3095  1028  00B3               	movwf	Clear_Screen@value+1
  3096  1029  3193  239B         	fcall	_Clear_Screen
  3097  102B  0008               	return
  3098  102C                     __end_of_start_video:	
  3099                           
  3100                           	psect	text2
  3101  08CA                     __ptext2:	
  3102 ;; *************** function _little_star *****************
  3103 ;; Defined at:
  3104 ;;		line 318 in file "func.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;		None
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		wreg, status,2, status,0, pclath, cstack
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3122 ;;Total ram usage:        0 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:    7
  3125 ;; This function calls:
  3126 ;;		_delay_100us
  3127 ;;		_music
  3128 ;;		_music_delay
  3129 ;; This function is called by:
  3130 ;;		_start_video
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           
  3135                           ;psect for function _little_star
  3136  08CA                     _little_star:	
  3137                           
  3138                           ;func.c: 320: music(58); music(58);music(37);music(37);music(32);music(32);music_delay(3
      +                          7); delay_100us(750);
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in _little_star: [wreg+status,2+status,0+pclath+cstack]
  3142  08CA  303A               	movlw	58
  3143  08CB  0020               	movlb	0	; select bank0
  3144  08CC  00B0               	movwf	music@mclass
  3145  08CD  3000               	movlw	0
  3146  08CE  00B1               	movwf	music@mclass+1
  3147  08CF  3192  224C  3188   	fcall	_music
  3148  08D2  303A               	movlw	58
  3149  08D3  0020               	movlb	0	; select bank0
  3150  08D4  00B0               	movwf	music@mclass
  3151  08D5  3000               	movlw	0
  3152  08D6  00B1               	movwf	music@mclass+1
  3153  08D7  3192  224C  3188   	fcall	_music
  3154  08DA  3025               	movlw	37
  3155  08DB  0020               	movlb	0	; select bank0
  3156  08DC  00B0               	movwf	music@mclass
  3157  08DD  3000               	movlw	0
  3158  08DE  00B1               	movwf	music@mclass+1
  3159  08DF  3192  224C  3188   	fcall	_music
  3160  08E2  3025               	movlw	37
  3161  08E3  0020               	movlb	0	; select bank0
  3162  08E4  00B0               	movwf	music@mclass
  3163  08E5  3000               	movlw	0
  3164  08E6  00B1               	movwf	music@mclass+1
  3165  08E7  3192  224C  3188   	fcall	_music
  3166  08EA  3020               	movlw	32
  3167  08EB  0020               	movlb	0	; select bank0
  3168  08EC  00B0               	movwf	music@mclass
  3169  08ED  3000               	movlw	0
  3170  08EE  00B1               	movwf	music@mclass+1
  3171  08EF  3192  224C  3188   	fcall	_music
  3172  08F2  3020               	movlw	32
  3173  08F3  0020               	movlb	0	; select bank0
  3174  08F4  00B0               	movwf	music@mclass
  3175  08F5  3000               	movlw	0
  3176  08F6  00B1               	movwf	music@mclass+1
  3177  08F7  3192  224C  3188   	fcall	_music
  3178  08FA  3025               	movlw	37
  3179  08FB  0020               	movlb	0	; select bank0
  3180  08FC  00B0               	movwf	music_delay@mclass
  3181  08FD  3000               	movlw	0
  3182  08FE  00B1               	movwf	music_delay@mclass+1
  3183  08FF  3194  24DF  3188   	fcall	_music_delay
  3184  0902  30EE               	movlw	238
  3185  0903  0020               	movlb	0	; select bank0
  3186  0904  00A9               	movwf	delay_100us@cnt
  3187  0905  3002               	movlw	2
  3188  0906  00AA               	movwf	delay_100us@cnt+1
  3189  0907  319F  27B4  3188   	fcall	_delay_100us
  3190                           
  3191                           ;func.c: 321: music(43);music(43);music(45);music(45);music(51);music(51);music_delay(58
      +                          ); delay_100us(750);
  3192  090A  302B               	movlw	43
  3193  090B  0020               	movlb	0	; select bank0
  3194  090C  00B0               	movwf	music@mclass
  3195  090D  3000               	movlw	0
  3196  090E  00B1               	movwf	music@mclass+1
  3197  090F  3192  224C  3188   	fcall	_music
  3198  0912  302B               	movlw	43
  3199  0913  0020               	movlb	0	; select bank0
  3200  0914  00B0               	movwf	music@mclass
  3201  0915  3000               	movlw	0
  3202  0916  00B1               	movwf	music@mclass+1
  3203  0917  3192  224C  3188   	fcall	_music
  3204  091A  302D               	movlw	45
  3205  091B  0020               	movlb	0	; select bank0
  3206  091C  00B0               	movwf	music@mclass
  3207  091D  3000               	movlw	0
  3208  091E  00B1               	movwf	music@mclass+1
  3209  091F  3192  224C  3188   	fcall	_music
  3210  0922  302D               	movlw	45
  3211  0923  0020               	movlb	0	; select bank0
  3212  0924  00B0               	movwf	music@mclass
  3213  0925  3000               	movlw	0
  3214  0926  00B1               	movwf	music@mclass+1
  3215  0927  3192  224C  3188   	fcall	_music
  3216  092A  3033               	movlw	51
  3217  092B  0020               	movlb	0	; select bank0
  3218  092C  00B0               	movwf	music@mclass
  3219  092D  3000               	movlw	0
  3220  092E  00B1               	movwf	music@mclass+1
  3221  092F  3192  224C  3188   	fcall	_music
  3222  0932  3033               	movlw	51
  3223  0933  0020               	movlb	0	; select bank0
  3224  0934  00B0               	movwf	music@mclass
  3225  0935  3000               	movlw	0
  3226  0936  00B1               	movwf	music@mclass+1
  3227  0937  3192  224C  3188   	fcall	_music
  3228  093A  303A               	movlw	58
  3229  093B  0020               	movlb	0	; select bank0
  3230  093C  00B0               	movwf	music_delay@mclass
  3231  093D  3000               	movlw	0
  3232  093E  00B1               	movwf	music_delay@mclass+1
  3233  093F  3194  24DF  3188   	fcall	_music_delay
  3234  0942  30EE               	movlw	238
  3235  0943  0020               	movlb	0	; select bank0
  3236  0944  00A9               	movwf	delay_100us@cnt
  3237  0945  3002               	movlw	2
  3238  0946  00AA               	movwf	delay_100us@cnt+1
  3239  0947  319F  27B4  3188   	fcall	_delay_100us
  3240                           
  3241                           ;func.c: 322: music(37);music(37);music(43);music(43);music(45);music(45);music_delay(51
      +                          ); delay_100us(750);
  3242  094A  3025               	movlw	37
  3243  094B  0020               	movlb	0	; select bank0
  3244  094C  00B0               	movwf	music@mclass
  3245  094D  3000               	movlw	0
  3246  094E  00B1               	movwf	music@mclass+1
  3247  094F  3192  224C  3188   	fcall	_music
  3248  0952  3025               	movlw	37
  3249  0953  0020               	movlb	0	; select bank0
  3250  0954  00B0               	movwf	music@mclass
  3251  0955  3000               	movlw	0
  3252  0956  00B1               	movwf	music@mclass+1
  3253  0957  3192  224C  3188   	fcall	_music
  3254  095A  302B               	movlw	43
  3255  095B  0020               	movlb	0	; select bank0
  3256  095C  00B0               	movwf	music@mclass
  3257  095D  3000               	movlw	0
  3258  095E  00B1               	movwf	music@mclass+1
  3259  095F  3192  224C  3188   	fcall	_music
  3260  0962  302B               	movlw	43
  3261  0963  0020               	movlb	0	; select bank0
  3262  0964  00B0               	movwf	music@mclass
  3263  0965  3000               	movlw	0
  3264  0966  00B1               	movwf	music@mclass+1
  3265  0967  3192  224C  3188   	fcall	_music
  3266  096A  302D               	movlw	45
  3267  096B  0020               	movlb	0	; select bank0
  3268  096C  00B0               	movwf	music@mclass
  3269  096D  3000               	movlw	0
  3270  096E  00B1               	movwf	music@mclass+1
  3271  096F  3192  224C  3188   	fcall	_music
  3272  0972  302D               	movlw	45
  3273  0973  0020               	movlb	0	; select bank0
  3274  0974  00B0               	movwf	music@mclass
  3275  0975  3000               	movlw	0
  3276  0976  00B1               	movwf	music@mclass+1
  3277  0977  3192  224C  3188   	fcall	_music
  3278  097A  3033               	movlw	51
  3279  097B  0020               	movlb	0	; select bank0
  3280  097C  00B0               	movwf	music_delay@mclass
  3281  097D  3000               	movlw	0
  3282  097E  00B1               	movwf	music_delay@mclass+1
  3283  097F  3194  24DF  3188   	fcall	_music_delay
  3284  0982  30EE               	movlw	238
  3285  0983  0020               	movlb	0	; select bank0
  3286  0984  00A9               	movwf	delay_100us@cnt
  3287  0985  3002               	movlw	2
  3288  0986  00AA               	movwf	delay_100us@cnt+1
  3289  0987  319F  27B4  3188   	fcall	_delay_100us
  3290                           
  3291                           ;func.c: 323: music(37);music(37);music(43);music(43);music(45);music(45);music_delay(51
      +                          ); delay_100us(750);
  3292  098A  3025               	movlw	37
  3293  098B  0020               	movlb	0	; select bank0
  3294  098C  00B0               	movwf	music@mclass
  3295  098D  3000               	movlw	0
  3296  098E  00B1               	movwf	music@mclass+1
  3297  098F  3192  224C  3188   	fcall	_music
  3298  0992  3025               	movlw	37
  3299  0993  0020               	movlb	0	; select bank0
  3300  0994  00B0               	movwf	music@mclass
  3301  0995  3000               	movlw	0
  3302  0996  00B1               	movwf	music@mclass+1
  3303  0997  3192  224C  3188   	fcall	_music
  3304  099A  302B               	movlw	43
  3305  099B  0020               	movlb	0	; select bank0
  3306  099C  00B0               	movwf	music@mclass
  3307  099D  3000               	movlw	0
  3308  099E  00B1               	movwf	music@mclass+1
  3309  099F  3192  224C  3188   	fcall	_music
  3310  09A2  302B               	movlw	43
  3311  09A3  0020               	movlb	0	; select bank0
  3312  09A4  00B0               	movwf	music@mclass
  3313  09A5  3000               	movlw	0
  3314  09A6  00B1               	movwf	music@mclass+1
  3315  09A7  3192  224C  3188   	fcall	_music
  3316  09AA  302D               	movlw	45
  3317  09AB  0020               	movlb	0	; select bank0
  3318  09AC  00B0               	movwf	music@mclass
  3319  09AD  3000               	movlw	0
  3320  09AE  00B1               	movwf	music@mclass+1
  3321  09AF  3192  224C  3188   	fcall	_music
  3322  09B2  302D               	movlw	45
  3323  09B3  0020               	movlb	0	; select bank0
  3324  09B4  00B0               	movwf	music@mclass
  3325  09B5  3000               	movlw	0
  3326  09B6  00B1               	movwf	music@mclass+1
  3327  09B7  3192  224C  3188   	fcall	_music
  3328  09BA  3033               	movlw	51
  3329  09BB  0020               	movlb	0	; select bank0
  3330  09BC  00B0               	movwf	music_delay@mclass
  3331  09BD  3000               	movlw	0
  3332  09BE  00B1               	movwf	music_delay@mclass+1
  3333  09BF  3194  24DF  3188   	fcall	_music_delay
  3334  09C2  30EE               	movlw	238
  3335  09C3  0020               	movlb	0	; select bank0
  3336  09C4  00A9               	movwf	delay_100us@cnt
  3337  09C5  3002               	movlw	2
  3338  09C6  00AA               	movwf	delay_100us@cnt+1
  3339  09C7  319F  27B4         	fcall	_delay_100us
  3340  09C9  0008               	return
  3341  09CA                     __end_of_little_star:	
  3342                           
  3343                           	psect	text3
  3344  14DF                     __ptext3:	
  3345 ;; *************** function _music_delay *****************
  3346 ;; Defined at:
  3347 ;;		line 295 in file "func.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  mclass          2   16[BANK0 ] int 
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;  i               2   23[BANK0 ] int 
  3352 ;;  i               2   21[BANK0 ] int 
  3353 ;;  i               2   19[BANK0 ] int 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0, pclath, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3363 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3364 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3366 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3367 ;;Total ram usage:        9 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    6
  3370 ;; This function calls:
  3371 ;;		___awdiv
  3372 ;;		_delay_100us
  3373 ;;		_delay_music
  3374 ;; This function is called by:
  3375 ;;		_little_star
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           
  3380                           ;psect for function _music_delay
  3381  14DF                     _music_delay:	
  3382                           
  3383                           ;func.c: 297: for (int i=0;i<5000*6/mclass;i++)
  3384                           
  3385                           ;incstack = 0
  3386                           ; Regs used in _music_delay: [wreg+status,2+status,0+pclath+cstack]
  3387  14DF  0020               	movlb	0	; select bank0
  3388  14E0  01B3               	clrf	music_delay@i
  3389  14E1  01B4               	clrf	music_delay@i+1
  3390  14E2                     l3336:	
  3391  14E2  0831               	movf	music_delay@mclass+1,w
  3392  14E3  00A4               	movwf	___awdiv@divisor+1
  3393  14E4  0830               	movf	music_delay@mclass,w
  3394  14E5  00A3               	movwf	___awdiv@divisor
  3395  14E6  3030               	movlw	48
  3396  14E7  00A5               	movwf	___awdiv@dividend
  3397  14E8  3075               	movlw	117
  3398  14E9  00A6               	movwf	___awdiv@dividend+1
  3399  14EA  3192  229B  3194   	fcall	___awdiv
  3400  14ED  0020               	movlb	0	; select bank0
  3401  14EE  0834               	movf	music_delay@i+1,w
  3402  14EF  3A80               	xorlw	128
  3403  14F0  00B2               	movwf	??_music_delay
  3404  14F1  0824               	movf	?___awdiv+1,w
  3405  14F2  3A80               	xorlw	128
  3406  14F3  0232               	subwf	??_music_delay,w
  3407  14F4  1D03               	skipz
  3408  14F5  2CF8               	goto	u4285
  3409  14F6  0823               	movf	?___awdiv,w
  3410  14F7  0233               	subwf	music_delay@i,w
  3411  14F8                     u4285:	
  3412  14F8  1803               	btfsc	3,0
  3413  14F9  2D12               	goto	l3338
  3414                           
  3415                           ;func.c: 298: {
  3416                           ;func.c: 299: delay_music(mclass);
  3417  14FA  0020               	movlb	0	; select bank0
  3418  14FB  0831               	movf	music_delay@mclass+1,w
  3419  14FC  00A4               	movwf	delay_music@mclass+1
  3420  14FD  0830               	movf	music_delay@mclass,w
  3421  14FE  00A3               	movwf	delay_music@mclass
  3422  14FF  319F  2708  3194   	fcall	_delay_music
  3423                           
  3424                           ;func.c: 300: RC4 = 0;
  3425  1502  0020               	movlb	0	; select bank0
  3426  1503  120E               	bcf	14,4	;volatile
  3427                           
  3428                           ;func.c: 301: delay_music(mclass);
  3429  1504  0831               	movf	music_delay@mclass+1,w
  3430  1505  00A4               	movwf	delay_music@mclass+1
  3431  1506  0830               	movf	music_delay@mclass,w
  3432  1507  00A3               	movwf	delay_music@mclass
  3433  1508  319F  2708  3194   	fcall	_delay_music
  3434                           
  3435                           ;func.c: 302: RC4 = 1;
  3436  150B  0020               	movlb	0	; select bank0
  3437  150C  160E               	bsf	14,4	;volatile
  3438  150D  3001               	movlw	1
  3439  150E  07B3               	addwf	music_delay@i,f
  3440  150F  3000               	movlw	0
  3441  1510  3DB4               	addwfc	music_delay@i+1,f
  3442  1511  2CE2               	goto	l3336
  3443  1512                     l3338:	
  3444                           
  3445                           ;func.c: 304: }
  3446                           ;func.c: 305: for (int i=0;i<5000*3/mclass;i++)
  3447  1512  0020               	movlb	0	; select bank0
  3448  1513  01B5               	clrf	music_delay@i_482
  3449  1514  01B6               	clrf	music_delay@i_482+1
  3450  1515                     l3348:	
  3451  1515  0831               	movf	music_delay@mclass+1,w
  3452  1516  00A4               	movwf	___awdiv@divisor+1
  3453  1517  0830               	movf	music_delay@mclass,w
  3454  1518  00A3               	movwf	___awdiv@divisor
  3455  1519  3098               	movlw	152
  3456  151A  00A5               	movwf	___awdiv@dividend
  3457  151B  303A               	movlw	58
  3458  151C  00A6               	movwf	___awdiv@dividend+1
  3459  151D  3192  229B  3194   	fcall	___awdiv
  3460  1520  0020               	movlb	0	; select bank0
  3461  1521  0836               	movf	music_delay@i_482+1,w
  3462  1522  3A80               	xorlw	128
  3463  1523  00B2               	movwf	??_music_delay
  3464  1524  0824               	movf	?___awdiv+1,w
  3465  1525  3A80               	xorlw	128
  3466  1526  0232               	subwf	??_music_delay,w
  3467  1527  1D03               	skipz
  3468  1528  2D2B               	goto	u4295
  3469  1529  0823               	movf	?___awdiv,w
  3470  152A  0235               	subwf	music_delay@i_482,w
  3471  152B                     u4295:	
  3472  152B  1803               	btfsc	3,0
  3473  152C  2D45               	goto	l3350
  3474                           
  3475                           ;func.c: 306: {
  3476                           ;func.c: 307: delay_music(mclass);
  3477  152D  0020               	movlb	0	; select bank0
  3478  152E  0831               	movf	music_delay@mclass+1,w
  3479  152F  00A4               	movwf	delay_music@mclass+1
  3480  1530  0830               	movf	music_delay@mclass,w
  3481  1531  00A3               	movwf	delay_music@mclass
  3482  1532  319F  2708  3194   	fcall	_delay_music
  3483                           
  3484                           ;func.c: 308: RC4 = 0;
  3485  1535  0020               	movlb	0	; select bank0
  3486  1536  120E               	bcf	14,4	;volatile
  3487                           
  3488                           ;func.c: 309: delay_music(mclass);
  3489  1537  0831               	movf	music_delay@mclass+1,w
  3490  1538  00A4               	movwf	delay_music@mclass+1
  3491  1539  0830               	movf	music_delay@mclass,w
  3492  153A  00A3               	movwf	delay_music@mclass
  3493  153B  319F  2708  3194   	fcall	_delay_music
  3494                           
  3495                           ;func.c: 310: RC4 = 1;
  3496  153E  0020               	movlb	0	; select bank0
  3497  153F  160E               	bsf	14,4	;volatile
  3498  1540  3001               	movlw	1
  3499  1541  07B5               	addwf	music_delay@i_482,f
  3500  1542  3000               	movlw	0
  3501  1543  3DB6               	addwfc	music_delay@i_482+1,f
  3502  1544  2D15               	goto	l3348
  3503  1545                     l3350:	
  3504                           
  3505                           ;func.c: 312: }
  3506                           ;func.c: 313: for (int i=0;i<500;i++)
  3507  1545  0020               	movlb	0	; select bank0
  3508  1546  01B7               	clrf	music_delay@i_483
  3509  1547  01B8               	clrf	music_delay@i_483+1
  3510  1548                     L1:	
  3511  1548  0838               	movf	music_delay@i_483+1,w
  3512  1549  3A80               	xorlw	128
  3513  154A  00B2               	movwf	??_music_delay
  3514  154B  3081               	movlw	129
  3515  154C  0232               	subwf	??_music_delay,w
  3516  154D  1D03               	skipz
  3517  154E  2D51               	goto	u4305
  3518  154F  30F4               	movlw	244
  3519  1550  0237               	subwf	music_delay@i_483,w
  3520  1551                     u4305:	
  3521  1551  1803               	btfsc	3,0
  3522  1552  0008               	return
  3523                           
  3524                           ;func.c: 314: {
  3525                           ;func.c: 315: delay_100us(1);
  3526  1553  3001               	movlw	1
  3527  1554  0020               	movlb	0	; select bank0
  3528  1555  00A9               	movwf	delay_100us@cnt
  3529  1556  3000               	movlw	0
  3530  1557  00AA               	movwf	delay_100us@cnt+1
  3531  1558  319F  27B4  3194   	fcall	_delay_100us
  3532  155B  3001               	movlw	1
  3533  155C  0020               	movlb	0	; select bank0
  3534  155D  07B7               	addwf	music_delay@i_483,f
  3535  155E  3000               	movlw	0
  3536  155F  3DB8               	addwfc	music_delay@i_483+1,f
  3537  1560  2D48               	goto	L1
  3538  1561                     __end_of_music_delay:	
  3539                           
  3540                           	psect	text4
  3541  124C                     __ptext4:	
  3542 ;; *************** function _music *****************
  3543 ;; Defined at:
  3544 ;;		line 325 in file "func.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  mclass          2   16[BANK0 ] int 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  i               2   21[BANK0 ] int 
  3549 ;;  i               2   19[BANK0 ] int 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      void 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0, pclath, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3559 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3560 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3562 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3563 ;;Total ram usage:        7 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    6
  3566 ;; This function calls:
  3567 ;;		___awdiv
  3568 ;;		_delay_100us
  3569 ;;		_delay_music
  3570 ;; This function is called by:
  3571 ;;		_little_star
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           
  3576                           ;psect for function _music
  3577  124C                     _music:	
  3578                           
  3579                           ;func.c: 327: for (int i=0;i<5000*6/mclass;i++)
  3580                           
  3581                           ;incstack = 0
  3582                           ; Regs used in _music: [wreg+status,2+status,0+pclath+cstack]
  3583  124C  0020               	movlb	0	; select bank0
  3584  124D  01B3               	clrf	music@i
  3585  124E  01B4               	clrf	music@i+1
  3586  124F                     l3372:	
  3587  124F  0831               	movf	music@mclass+1,w
  3588  1250  00A4               	movwf	___awdiv@divisor+1
  3589  1251  0830               	movf	music@mclass,w
  3590  1252  00A3               	movwf	___awdiv@divisor
  3591  1253  3030               	movlw	48
  3592  1254  00A5               	movwf	___awdiv@dividend
  3593  1255  3075               	movlw	117
  3594  1256  00A6               	movwf	___awdiv@dividend+1
  3595  1257  3192  229B  3192   	fcall	___awdiv
  3596  125A  0020               	movlb	0	; select bank0
  3597  125B  0834               	movf	music@i+1,w
  3598  125C  3A80               	xorlw	128
  3599  125D  00B2               	movwf	??_music
  3600  125E  0824               	movf	?___awdiv+1,w
  3601  125F  3A80               	xorlw	128
  3602  1260  0232               	subwf	??_music,w
  3603  1261  1D03               	skipz
  3604  1262  2A65               	goto	u4325
  3605  1263  0823               	movf	?___awdiv,w
  3606  1264  0233               	subwf	music@i,w
  3607  1265                     u4325:	
  3608  1265  1803               	btfsc	3,0
  3609  1266  2A7F               	goto	l3374
  3610                           
  3611                           ;func.c: 328: {
  3612                           ;func.c: 329: delay_music(mclass);
  3613  1267  0020               	movlb	0	; select bank0
  3614  1268  0831               	movf	music@mclass+1,w
  3615  1269  00A4               	movwf	delay_music@mclass+1
  3616  126A  0830               	movf	music@mclass,w
  3617  126B  00A3               	movwf	delay_music@mclass
  3618  126C  319F  2708  3192   	fcall	_delay_music
  3619                           
  3620                           ;func.c: 330: RC4 = 0;
  3621  126F  0020               	movlb	0	; select bank0
  3622  1270  120E               	bcf	14,4	;volatile
  3623                           
  3624                           ;func.c: 331: delay_music(mclass);
  3625  1271  0831               	movf	music@mclass+1,w
  3626  1272  00A4               	movwf	delay_music@mclass+1
  3627  1273  0830               	movf	music@mclass,w
  3628  1274  00A3               	movwf	delay_music@mclass
  3629  1275  319F  2708  3192   	fcall	_delay_music
  3630                           
  3631                           ;func.c: 332: RC4 = 1;
  3632  1278  0020               	movlb	0	; select bank0
  3633  1279  160E               	bsf	14,4	;volatile
  3634  127A  3001               	movlw	1
  3635  127B  07B3               	addwf	music@i,f
  3636  127C  3000               	movlw	0
  3637  127D  3DB4               	addwfc	music@i+1,f
  3638  127E  2A4F               	goto	l3372
  3639  127F                     l3374:	
  3640                           
  3641                           ;func.c: 334: }
  3642                           ;func.c: 335: for (int i=0;i<500;i++)
  3643  127F  0020               	movlb	0	; select bank0
  3644  1280  01B5               	clrf	music@i_489
  3645  1281  01B6               	clrf	music@i_489+1
  3646  1282                     L2:	
  3647  1282  0836               	movf	music@i_489+1,w
  3648  1283  3A80               	xorlw	128
  3649  1284  00B2               	movwf	??_music
  3650  1285  3081               	movlw	129
  3651  1286  0232               	subwf	??_music,w
  3652  1287  1D03               	skipz
  3653  1288  2A8B               	goto	u4335
  3654  1289  30F4               	movlw	244
  3655  128A  0235               	subwf	music@i_489,w
  3656  128B                     u4335:	
  3657  128B  1803               	btfsc	3,0
  3658  128C  0008               	return
  3659                           
  3660                           ;func.c: 336: {
  3661                           ;func.c: 337: delay_100us(1);
  3662  128D  3001               	movlw	1
  3663  128E  0020               	movlb	0	; select bank0
  3664  128F  00A9               	movwf	delay_100us@cnt
  3665  1290  3000               	movlw	0
  3666  1291  00AA               	movwf	delay_100us@cnt+1
  3667  1292  319F  27B4  3192   	fcall	_delay_100us
  3668  1295  3001               	movlw	1
  3669  1296  0020               	movlb	0	; select bank0
  3670  1297  07B5               	addwf	music@i_489,f
  3671  1298  3000               	movlw	0
  3672  1299  3DB6               	addwfc	music@i_489+1,f
  3673  129A  2A82               	goto	L2
  3674  129B                     __end_of_music:	
  3675                           
  3676                           	psect	text5
  3677  1F08                     __ptext5:	
  3678 ;; *************** function _delay_music *****************
  3679 ;; Defined at:
  3680 ;;		line 277 in file "func.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  mclass          2    3[BANK0 ] int 
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;  i               2    8[BANK0 ] int 
  3685 ;;  a               2    6[BANK0 ] int 
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3695 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3699 ;;Total ram usage:        7 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    4
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_music_delay
  3706 ;;		_music
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _delay_music
  3712  1F08                     _delay_music:	
  3713                           
  3714                           ;func.c: 279: int a=1;
  3715                           
  3716                           ;incstack = 0
  3717                           ; Regs used in _delay_music: [wreg+status,2]
  3718  1F08  3001               	movlw	1
  3719  1F09  0020               	movlb	0	; select bank0
  3720  1F0A  00A6               	movwf	delay_music@a
  3721  1F0B  3000               	movlw	0
  3722  1F0C  00A7               	movwf	delay_music@a+1
  3723                           
  3724                           ;func.c: 280: for (int i=0;i<mclass;i++)
  3725  1F0D  01A8               	clrf	delay_music@i
  3726  1F0E  01A9               	clrf	delay_music@i+1
  3727  1F0F                     l409:	
  3728  1F0F  0829               	movf	delay_music@i+1,w
  3729  1F10  3A80               	xorlw	128
  3730  1F11  00A5               	movwf	??_delay_music
  3731  1F12  0824               	movf	delay_music@mclass+1,w
  3732  1F13  3A80               	xorlw	128
  3733  1F14  0225               	subwf	??_delay_music,w
  3734  1F15  1D03               	skipz
  3735  1F16  2F19               	goto	u3645
  3736  1F17  0823               	movf	delay_music@mclass,w
  3737  1F18  0228               	subwf	delay_music@i,w
  3738  1F19                     u3645:	
  3739  1F19  1803               	btfsc	3,0
  3740  1F1A  0008               	return
  3741                           
  3742                           ;func.c: 281: {
  3743                           ;func.c: 282: a++;
  3744  1F1B  3001               	movlw	1
  3745  1F1C  0020               	movlb	0	; select bank0
  3746  1F1D  07A6               	addwf	delay_music@a,f
  3747  1F1E  3000               	movlw	0
  3748  1F1F  3DA7               	addwfc	delay_music@a+1,f
  3749  1F20  3001               	movlw	1
  3750  1F21  07A8               	addwf	delay_music@i,f
  3751  1F22  3000               	movlw	0
  3752  1F23  3DA9               	addwfc	delay_music@i+1,f
  3753  1F24  2F0F               	goto	l409
  3754  1F25                     __end_of_delay_music:	
  3755                           
  3756                           	psect	text6
  3757  1561                     __ptext6:	
  3758 ;; *************** function _run_game *****************
  3759 ;; Defined at:
  3760 ;;		line 413 in file "func.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;		None
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;		None
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3776 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3778 ;;Total ram usage:        2 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:   11
  3781 ;; This function calls:
  3782 ;;		_choose_level2
  3783 ;;		_heibaiqi
  3784 ;;		_init_heibaiqi
  3785 ;;		_init_wayout
  3786 ;;		_set_point
  3787 ;;		_wayout
  3788 ;; This function is called by:
  3789 ;;		_main
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           
  3794                           ;psect for function _run_game
  3795  1561                     _run_game:	
  3796                           
  3797                           ;func.c: 415: if(!start)
  3798                           
  3799                           ;incstack = 0
  3800                           ; Regs used in _run_game: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3801  1561  0021               	movlb	1	; select bank1
  3802  1562  0823               	movf	_start^(0+128),w
  3803  1563  1D03               	btfss	3,2
  3804  1564  2DDF               	goto	l3984
  3805                           
  3806                           ;func.c: 416: {
  3807                           ;func.c: 418: if(key==1)
  3808  1565  0020               	movlb	0	; select bank0
  3809  1566  0368               	decf	_key,w
  3810  1567  1D03               	btfss	3,2
  3811  1568  2D8A               	goto	l3950
  3812                           
  3813                           ;func.c: 419: {
  3814                           ;func.c: 420: key=0;
  3815  1569  01E8               	clrf	_key
  3816                           
  3817                           ;func.c: 421: set_point(temp_cursor.row*2,temp_cursor.col,screen[0]);
  3818  156A  0865               	movf	_temp_cursor+1,w
  3819  156B  00E2               	movwf	??_run_game
  3820  156C  0862               	movf	??_run_game,w
  3821  156D  00B9               	movwf	set_point@point_y
  3822  156E  3020               	movlw	(low (_screen| (0+256)))& (0+255)
  3823  156F  00E3               	movwf	??_run_game+1
  3824  1570  0863               	movf	??_run_game+1,w
  3825  1571  00BA               	movwf	set_point@value
  3826  1572  3564               	lslf	_temp_cursor,w
  3827  1573  3196  267C  3195   	fcall	_set_point
  3828                           
  3829                           ;func.c: 422: temp_cursor.row=(temp_cursor.row+2-1)%2;
  3830  1576  0020               	movlb	0	; select bank0
  3831  1577  0864               	movf	_temp_cursor,w
  3832  1578  3E01               	addlw	1
  3833  1579  3901               	andlw	1
  3834  157A  00E2               	movwf	??_run_game
  3835  157B  0862               	movf	??_run_game,w
  3836  157C  00E4               	movwf	_temp_cursor
  3837                           
  3838                           ;func.c: 423: set_point(temp_cursor.row*2,temp_cursor.col,screen[3]);
  3839  157D  0865               	movf	_temp_cursor+1,w
  3840  157E  00E2               	movwf	??_run_game
  3841  157F  0862               	movf	??_run_game,w
  3842  1580  00B9               	movwf	set_point@point_y
  3843  1581  3038               	movlw	(low ((_screen| (0+256)+24)))& (0+255)
  3844  1582  00E3               	movwf	??_run_game+1
  3845  1583  0863               	movf	??_run_game+1,w
  3846  1584  00BA               	movwf	set_point@value
  3847  1585  3564               	lslf	_temp_cursor,w
  3848  1586  3196  267C  3195   	fcall	_set_point
  3849                           
  3850                           ;func.c: 424: }
  3851  1589  2DDC               	goto	l468
  3852  158A                     l3950:	
  3853                           
  3854                           ;func.c: 426: else if(key==2)
  3855  158A  3002               	movlw	2
  3856  158B  0020               	movlb	0	; select bank0
  3857  158C  0668               	xorwf	_key,w
  3858  158D  1D03               	btfss	3,2
  3859  158E  2DB0               	goto	l3960
  3860                           
  3861                           ;func.c: 427: {
  3862                           ;func.c: 428: key=0;
  3863  158F  01E8               	clrf	_key
  3864                           
  3865                           ;func.c: 429: set_point(temp_cursor.row*2,temp_cursor.col,screen[0]);
  3866  1590  0865               	movf	_temp_cursor+1,w
  3867  1591  00E2               	movwf	??_run_game
  3868  1592  0862               	movf	??_run_game,w
  3869  1593  00B9               	movwf	set_point@point_y
  3870  1594  3020               	movlw	(low (_screen| (0+256)))& (0+255)
  3871  1595  00E3               	movwf	??_run_game+1
  3872  1596  0863               	movf	??_run_game+1,w
  3873  1597  00BA               	movwf	set_point@value
  3874  1598  3564               	lslf	_temp_cursor,w
  3875  1599  3196  267C  3195   	fcall	_set_point
  3876                           
  3877                           ;func.c: 430: temp_cursor.row=(temp_cursor.row+1)%2;
  3878  159C  0020               	movlb	0	; select bank0
  3879  159D  0864               	movf	_temp_cursor,w
  3880  159E  3E01               	addlw	1
  3881  159F  3901               	andlw	1
  3882  15A0  00E2               	movwf	??_run_game
  3883  15A1  0862               	movf	??_run_game,w
  3884  15A2  00E4               	movwf	_temp_cursor
  3885                           
  3886                           ;func.c: 431: set_point(temp_cursor.row*2,temp_cursor.col,screen[3]);
  3887  15A3  0865               	movf	_temp_cursor+1,w
  3888  15A4  00E2               	movwf	??_run_game
  3889  15A5  0862               	movf	??_run_game,w
  3890  15A6  00B9               	movwf	set_point@point_y
  3891  15A7  3038               	movlw	(low ((_screen| (0+256)+24)))& (0+255)
  3892  15A8  00E3               	movwf	??_run_game+1
  3893  15A9  0863               	movf	??_run_game+1,w
  3894  15AA  00BA               	movwf	set_point@value
  3895  15AB  3564               	lslf	_temp_cursor,w
  3896  15AC  3196  267C  3195   	fcall	_set_point
  3897                           
  3898                           ;func.c: 432: }
  3899  15AF  2DDC               	goto	l468
  3900  15B0                     l3960:	
  3901                           
  3902                           ;func.c: 434: else if(key==5)
  3903  15B0  3005               	movlw	5
  3904  15B1  0020               	movlb	0	; select bank0
  3905  15B2  0668               	xorwf	_key,w
  3906  15B3  1D03               	btfss	3,2
  3907  15B4  2DDC               	goto	l468
  3908                           
  3909                           ;func.c: 435: {
  3910                           ;func.c: 436: key=0;
  3911  15B5  01E8               	clrf	_key
  3912                           
  3913                           ;func.c: 437: start=temp_cursor.row+1;
  3914  15B6  0864               	movf	_temp_cursor,w
  3915  15B7  3E01               	addlw	1
  3916  15B8  00E2               	movwf	??_run_game
  3917  15B9  0862               	movf	??_run_game,w
  3918  15BA  0021               	movlb	1	; select bank1
  3919  15BB  00A3               	movwf	_start^(0+128)
  3920                           
  3921                           ;func.c: 438: temp_cursor.row=0;
  3922  15BC  0020               	movlb	0	; select bank0
  3923  15BD  01E4               	clrf	_temp_cursor
  3924                           
  3925                           ;func.c: 439: temp_cursor.col=0;
  3926  15BE  01E5               	clrf	_temp_cursor+1
  3927                           
  3928                           ;func.c: 440: if(start==1)
  3929  15BF  0021               	movlb	1	; select bank1
  3930  15C0  0323               	decf	_start^(0+128),w
  3931  15C1  1D03               	btfss	3,2
  3932  15C2  2DC6               	goto	l3974
  3933                           
  3934                           ;func.c: 441: init_heibaiqi();
  3935  15C3  3194  2467  3195   	fcall	_init_heibaiqi
  3936  15C6                     l3974:	
  3937                           
  3938                           ;func.c: 442: if(start==2)
  3939  15C6  3002               	movlw	2
  3940  15C7  0021               	movlb	1	; select bank1
  3941  15C8  0623               	xorwf	_start^(0+128),w
  3942  15C9  1D03               	btfss	3,2
  3943  15CA  2DDC               	goto	l468
  3944                           
  3945                           ;func.c: 443: {
  3946                           ;func.c: 444: level_num = choose_level2();
  3947  15CB  318B  23E6  3195   	fcall	_choose_level2
  3948  15CE  0020               	movlb	0	; select bank0
  3949  15CF  00E2               	movwf	??_run_game
  3950  15D0  0862               	movf	??_run_game,w
  3951  15D1  00E9               	movwf	_level_num
  3952                           
  3953                           ;func.c: 445: if (level_num !=0)
  3954  15D2  0869               	movf	_level_num,w
  3955  15D3  1903               	btfsc	3,2
  3956  15D4  2DDA               	goto	l3982
  3957                           
  3958                           ;func.c: 446: {
  3959                           ;func.c: 447: init_wayout(level_num);
  3960  15D5  0869               	movf	_level_num,w
  3961  15D6  3197  271C  3195   	fcall	_init_wayout
  3962                           
  3963                           ;func.c: 448: }
  3964  15D9  2DDC               	goto	l468
  3965  15DA                     l3982:	
  3966                           
  3967                           ;func.c: 449: else
  3968                           ;func.c: 450: {
  3969                           ;func.c: 451: start =0;
  3970  15DA  0021               	movlb	1	; select bank1
  3971  15DB  01A3               	clrf	_start^(0+128)
  3972  15DC                     l468:	
  3973                           
  3974                           ;func.c: 452: }
  3975                           ;func.c: 453: }
  3976                           ;func.c: 454: }
  3977                           ;func.c: 455: key=0;
  3978  15DC  0020               	movlb	0	; select bank0
  3979  15DD  01E8               	clrf	_key
  3980                           
  3981                           ;func.c: 457: }
  3982  15DE  0008               	return
  3983  15DF                     l3984:	
  3984                           
  3985                           ;func.c: 458: else if(start==1)
  3986  15DF  0021               	movlb	1	; select bank1
  3987  15E0  0323               	decf	_start^(0+128),w
  3988  15E1  1D03               	btfss	3,2
  3989  15E2  2DE6               	goto	l3988
  3990                           
  3991                           ;func.c: 459: {
  3992                           ;func.c: 460: heibaiqi();
  3993  15E3  3183  2384         	fcall	_heibaiqi
  3994                           
  3995                           ;func.c: 461: }
  3996  15E5  0008               	return
  3997  15E6                     l3988:	
  3998                           
  3999                           ;func.c: 462: else if(start==2)
  4000  15E6  3002               	movlw	2
  4001  15E7  0021               	movlb	1	; select bank1
  4002  15E8  0623               	xorwf	_start^(0+128),w
  4003  15E9  1D03               	btfss	3,2
  4004  15EA  0008               	return
  4005                           
  4006                           ;func.c: 463: {
  4007                           ;func.c: 464: wayout();
  4008  15EB  3180  2086         	fcall	_wayout
  4009  15ED  0008               	return
  4010  15EE                     __end_of_run_game:	
  4011                           
  4012                           	psect	text7
  4013  0086                     __ptext7:	
  4014 ;; *************** function _wayout *****************
  4015 ;; Defined at:
  4016 ;;		line 245 in file "wayout.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;		None
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;		None
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      void 
  4023 ;; Registers used:
  4024 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4032 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4033 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;Total ram usage:        7 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:   10
  4037 ;; This function calls:
  4038 ;;		_Clear_Screen
  4039 ;;		_Display_Chars
  4040 ;;		_check_if_complete
  4041 ;;		_choose
  4042 ;;		_choose_level2
  4043 ;;		_init_wayout
  4044 ;;		_int2string
  4045 ;;		_set_point
  4046 ;; This function is called by:
  4047 ;;		_run_game
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           
  4052                           ;psect for function _wayout
  4053  0086                     _wayout:	
  4054                           
  4055                           ;wayout.c: 247: switch(key)
  4056                           
  4057                           ;incstack = 0
  4058                           ; Regs used in _wayout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4059  0086  2B6E               	goto	l3858
  4060  0087                     l3764:	
  4061                           ;wayout.c: 248: {
  4062                           ;wayout.c: 249: case 1:
  4063                           
  4064                           
  4065                           ;wayout.c: 250: key=0;
  4066  0087  0020               	movlb	0	; select bank0
  4067  0088  01E8               	clrf	_key
  4068                           
  4069                           ;wayout.c: 251: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] & 0x03;
  4070  0089  0864               	movf	_temp_cursor,w
  4071  008A  00DB               	movwf	??_wayout
  4072  008B  3003               	movlw	3
  4073  008C                     u5185:	
  4074  008C  35DB               	lslf	??_wayout,f
  4075  008D  0B89               	decfsz	9,f
  4076  008E  288C               	goto	u5185
  4077  008F  30A5               	movlw	(low (_table| 0))& (0+255)
  4078  0090  075B               	addwf	??_wayout,w
  4079  0091  00DC               	movwf	??_wayout+1
  4080  0092  0865               	movf	_temp_cursor+1,w
  4081  0093  075C               	addwf	??_wayout+1,w
  4082  0094  00DD               	movwf	??_wayout+2
  4083  0095  085D               	movf	??_wayout+2,w
  4084  0096  0086               	movwf	6
  4085  0097  0187               	clrf	7
  4086  0098  0801               	movf	1,w
  4087  0099  3903               	andlw	3
  4088  009A  00DE               	movwf	??_wayout+3
  4089  009B  0864               	movf	_temp_cursor,w
  4090  009C  00DF               	movwf	??_wayout+4
  4091  009D  3003               	movlw	3
  4092  009E                     u5195:	
  4093  009E  35DF               	lslf	??_wayout+4,f
  4094  009F  0B89               	decfsz	9,f
  4095  00A0  289E               	goto	u5195
  4096  00A1  30A5               	movlw	(low (_table| 0))& (0+255)
  4097  00A2  075F               	addwf	??_wayout+4,w
  4098  00A3  00E0               	movwf	??_wayout+5
  4099  00A4  0865               	movf	_temp_cursor+1,w
  4100  00A5  0760               	addwf	??_wayout+5,w
  4101  00A6  00E1               	movwf	??_wayout+6
  4102  00A7  0861               	movf	??_wayout+6,w
  4103  00A8  0086               	movwf	6
  4104  00A9  0187               	clrf	7
  4105  00AA  085E               	movf	??_wayout+3,w
  4106  00AB  0081               	movwf	1
  4107                           
  4108                           ;wayout.c: 252: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]]);
  4109  00AC  0865               	movf	_temp_cursor+1,w
  4110  00AD  00DB               	movwf	??_wayout
  4111  00AE  085B               	movf	??_wayout,w
  4112  00AF  00B9               	movwf	set_point@point_y
  4113  00B0  0864               	movf	_temp_cursor,w
  4114  00B1  00DC               	movwf	??_wayout+1
  4115  00B2  3003               	movlw	3
  4116  00B3                     u5205:	
  4117  00B3  35DC               	lslf	??_wayout+1,f
  4118  00B4  0B89               	decfsz	9,f
  4119  00B5  28B3               	goto	u5205
  4120  00B6  30A5               	movlw	(low (_table| 0))& (0+255)
  4121  00B7  075C               	addwf	??_wayout+1,w
  4122  00B8  00DD               	movwf	??_wayout+2
  4123  00B9  0865               	movf	_temp_cursor+1,w
  4124  00BA  075D               	addwf	??_wayout+2,w
  4125  00BB  00DE               	movwf	??_wayout+3
  4126  00BC  085E               	movf	??_wayout+3,w
  4127  00BD  0086               	movwf	6
  4128  00BE  0187               	clrf	7
  4129  00BF  0801               	movf	1,w
  4130  00C0  00DF               	movwf	??_wayout+4
  4131  00C1  3002               	movlw	2
  4132  00C2                     u5215:	
  4133  00C2  35DF               	lslf	??_wayout+4,f
  4134  00C3  3EFF               	addlw	-1
  4135  00C4  1D03               	skipz
  4136  00C5  28C2               	goto	u5215
  4137  00C6  355F               	lslf	??_wayout+4,w
  4138  00C7  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  4139  00C8  00E0               	movwf	??_wayout+5
  4140  00C9  0860               	movf	??_wayout+5,w
  4141  00CA  00BA               	movwf	set_point@value
  4142  00CB  0864               	movf	_temp_cursor,w
  4143  00CC  3196  267C  3180   	fcall	_set_point
  4144                           
  4145                           ;wayout.c: 253: temp_cursor.row=(temp_cursor.row+8-1)%8;
  4146  00CF  0020               	movlb	0	; select bank0
  4147  00D0  0864               	movf	_temp_cursor,w
  4148  00D1  3E07               	addlw	7
  4149  00D2  3907               	andlw	7
  4150  00D3  00DB               	movwf	??_wayout
  4151  00D4  085B               	movf	??_wayout,w
  4152  00D5  00E4               	movwf	_temp_cursor
  4153                           
  4154                           ;wayout.c: 254: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] | 0x08;
  4155  00D6  0864               	movf	_temp_cursor,w
  4156  00D7  00DB               	movwf	??_wayout
  4157  00D8  3003               	movlw	3
  4158  00D9                     u5225:	
  4159  00D9  35DB               	lslf	??_wayout,f
  4160  00DA  0B89               	decfsz	9,f
  4161  00DB  28D9               	goto	u5225
  4162  00DC  30A5               	movlw	(low (_table| 0))& (0+255)
  4163  00DD  075B               	addwf	??_wayout,w
  4164  00DE  00DC               	movwf	??_wayout+1
  4165  00DF  0865               	movf	_temp_cursor+1,w
  4166  00E0  075C               	addwf	??_wayout+1,w
  4167  00E1  00DD               	movwf	??_wayout+2
  4168  00E2  085D               	movf	??_wayout+2,w
  4169  00E3  0086               	movwf	6
  4170  00E4  0187               	clrf	7
  4171  00E5  0801               	movf	1,w
  4172  00E6  3808               	iorlw	8
  4173  00E7  00DE               	movwf	??_wayout+3
  4174  00E8  0864               	movf	_temp_cursor,w
  4175  00E9  00DF               	movwf	??_wayout+4
  4176  00EA  3003               	movlw	3
  4177  00EB                     u5235:	
  4178  00EB  35DF               	lslf	??_wayout+4,f
  4179  00EC  0B89               	decfsz	9,f
  4180  00ED  28EB               	goto	u5235
  4181  00EE  30A5               	movlw	(low (_table| 0))& (0+255)
  4182  00EF  075F               	addwf	??_wayout+4,w
  4183  00F0  00E0               	movwf	??_wayout+5
  4184  00F1  0865               	movf	_temp_cursor+1,w
  4185  00F2  0760               	addwf	??_wayout+5,w
  4186  00F3  00E1               	movwf	??_wayout+6
  4187  00F4  0861               	movf	??_wayout+6,w
  4188  00F5  0086               	movwf	6
  4189  00F6  0187               	clrf	7
  4190  00F7  085E               	movf	??_wayout+3,w
  4191  00F8  0081               	movwf	1
  4192                           
  4193                           ;wayout.c: 255: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]-5]);
  4194  00F9  0865               	movf	_temp_cursor+1,w
  4195  00FA  00DB               	movwf	??_wayout
  4196  00FB  085B               	movf	??_wayout,w
  4197  00FC  00B9               	movwf	set_point@point_y
  4198  00FD  0864               	movf	_temp_cursor,w
  4199  00FE  00DC               	movwf	??_wayout+1
  4200  00FF  3003               	movlw	3
  4201  0100                     u5245:	
  4202  0100  35DC               	lslf	??_wayout+1,f
  4203  0101  0B89               	decfsz	9,f
  4204  0102  2900               	goto	u5245
  4205  0103  30A5               	movlw	(low (_table| 0))& (0+255)
  4206  0104  075C               	addwf	??_wayout+1,w
  4207  0105  00DD               	movwf	??_wayout+2
  4208  0106  0865               	movf	_temp_cursor+1,w
  4209  0107  075D               	addwf	??_wayout+2,w
  4210  0108  00DE               	movwf	??_wayout+3
  4211  0109  085E               	movf	??_wayout+3,w
  4212  010A  0086               	movwf	6
  4213  010B  0187               	clrf	7
  4214  010C  0801               	movf	1,w
  4215  010D  00DF               	movwf	??_wayout+4
  4216  010E  3002               	movlw	2
  4217  010F                     u5255:	
  4218  010F  35DF               	lslf	??_wayout+4,f
  4219  0110  3EFF               	addlw	-1
  4220  0111  1D03               	skipz
  4221  0112  290F               	goto	u5255
  4222  0113  355F               	lslf	??_wayout+4,w
  4223  0114  3ED8               	addlw	216
  4224  0115  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  4225  0116  00E0               	movwf	??_wayout+5
  4226  0117  0860               	movf	??_wayout+5,w
  4227  0118  00BA               	movwf	set_point@value
  4228  0119  0864               	movf	_temp_cursor,w
  4229  011A  3196  267C         	fcall	_set_point
  4230                           
  4231                           ;wayout.c: 256: break;
  4232  011C  0008               	return
  4233  011D                     l3776:	
  4234                           ;wayout.c: 257: case 2:
  4235                           
  4236                           
  4237                           ;wayout.c: 258: key=0;
  4238  011D  0020               	movlb	0	; select bank0
  4239  011E  01E8               	clrf	_key
  4240                           
  4241                           ;wayout.c: 259: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] & 0x03;
  4242  011F  0864               	movf	_temp_cursor,w
  4243  0120  00DB               	movwf	??_wayout
  4244  0121  3003               	movlw	3
  4245  0122                     u5265:	
  4246  0122  35DB               	lslf	??_wayout,f
  4247  0123  0B89               	decfsz	9,f
  4248  0124  2922               	goto	u5265
  4249  0125  30A5               	movlw	(low (_table| 0))& (0+255)
  4250  0126  075B               	addwf	??_wayout,w
  4251  0127  00DC               	movwf	??_wayout+1
  4252  0128  0865               	movf	_temp_cursor+1,w
  4253  0129  075C               	addwf	??_wayout+1,w
  4254  012A  00DD               	movwf	??_wayout+2
  4255  012B  085D               	movf	??_wayout+2,w
  4256  012C  0086               	movwf	6
  4257  012D  0187               	clrf	7
  4258  012E  0801               	movf	1,w
  4259  012F  3903               	andlw	3
  4260  0130  00DE               	movwf	??_wayout+3
  4261  0131  0864               	movf	_temp_cursor,w
  4262  0132  00DF               	movwf	??_wayout+4
  4263  0133  3003               	movlw	3
  4264  0134                     u5275:	
  4265  0134  35DF               	lslf	??_wayout+4,f
  4266  0135  0B89               	decfsz	9,f
  4267  0136  2934               	goto	u5275
  4268  0137  30A5               	movlw	(low (_table| 0))& (0+255)
  4269  0138  075F               	addwf	??_wayout+4,w
  4270  0139  00E0               	movwf	??_wayout+5
  4271  013A  0865               	movf	_temp_cursor+1,w
  4272  013B  0760               	addwf	??_wayout+5,w
  4273  013C  00E1               	movwf	??_wayout+6
  4274  013D  0861               	movf	??_wayout+6,w
  4275  013E  0086               	movwf	6
  4276  013F  0187               	clrf	7
  4277  0140  085E               	movf	??_wayout+3,w
  4278  0141  0081               	movwf	1
  4279                           
  4280                           ;wayout.c: 260: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]]);
  4281  0142  0865               	movf	_temp_cursor+1,w
  4282  0143  00DB               	movwf	??_wayout
  4283  0144  085B               	movf	??_wayout,w
  4284  0145  00B9               	movwf	set_point@point_y
  4285  0146  0864               	movf	_temp_cursor,w
  4286  0147  00DC               	movwf	??_wayout+1
  4287  0148  3003               	movlw	3
  4288  0149                     u5285:	
  4289  0149  35DC               	lslf	??_wayout+1,f
  4290  014A  0B89               	decfsz	9,f
  4291  014B  2949               	goto	u5285
  4292  014C  30A5               	movlw	(low (_table| 0))& (0+255)
  4293  014D  075C               	addwf	??_wayout+1,w
  4294  014E  00DD               	movwf	??_wayout+2
  4295  014F  0865               	movf	_temp_cursor+1,w
  4296  0150  075D               	addwf	??_wayout+2,w
  4297  0151  00DE               	movwf	??_wayout+3
  4298  0152  085E               	movf	??_wayout+3,w
  4299  0153  0086               	movwf	6
  4300  0154  0187               	clrf	7
  4301  0155  0801               	movf	1,w
  4302  0156  00DF               	movwf	??_wayout+4
  4303  0157  3002               	movlw	2
  4304  0158                     u5295:	
  4305  0158  35DF               	lslf	??_wayout+4,f
  4306  0159  3EFF               	addlw	-1
  4307  015A  1D03               	skipz
  4308  015B  2958               	goto	u5295
  4309  015C  355F               	lslf	??_wayout+4,w
  4310  015D  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  4311  015E  00E0               	movwf	??_wayout+5
  4312  015F  0860               	movf	??_wayout+5,w
  4313  0160  00BA               	movwf	set_point@value
  4314  0161  0864               	movf	_temp_cursor,w
  4315  0162  3196  267C  3180   	fcall	_set_point
  4316                           
  4317                           ;wayout.c: 261: temp_cursor.row=(temp_cursor.row+1)%8;
  4318  0165  0020               	movlb	0	; select bank0
  4319  0166  0864               	movf	_temp_cursor,w
  4320  0167  3E01               	addlw	1
  4321  0168  3907               	andlw	7
  4322  0169  00DB               	movwf	??_wayout
  4323  016A  085B               	movf	??_wayout,w
  4324  016B  00E4               	movwf	_temp_cursor
  4325                           
  4326                           ;wayout.c: 262: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] | 0x08;
  4327  016C  0864               	movf	_temp_cursor,w
  4328  016D  00DB               	movwf	??_wayout
  4329  016E  3003               	movlw	3
  4330  016F                     u5305:	
  4331  016F  35DB               	lslf	??_wayout,f
  4332  0170  0B89               	decfsz	9,f
  4333  0171  296F               	goto	u5305
  4334  0172  30A5               	movlw	(low (_table| 0))& (0+255)
  4335  0173  075B               	addwf	??_wayout,w
  4336  0174  00DC               	movwf	??_wayout+1
  4337  0175  0865               	movf	_temp_cursor+1,w
  4338  0176  075C               	addwf	??_wayout+1,w
  4339  0177  00DD               	movwf	??_wayout+2
  4340  0178  085D               	movf	??_wayout+2,w
  4341  0179  0086               	movwf	6
  4342  017A  0187               	clrf	7
  4343  017B  0801               	movf	1,w
  4344  017C  3808               	iorlw	8
  4345  017D  00DE               	movwf	??_wayout+3
  4346  017E  0864               	movf	_temp_cursor,w
  4347  017F  00DF               	movwf	??_wayout+4
  4348  0180  3003               	movlw	3
  4349  0181                     u5315:	
  4350  0181  35DF               	lslf	??_wayout+4,f
  4351  0182  0B89               	decfsz	9,f
  4352  0183  2981               	goto	u5315
  4353  0184  30A5               	movlw	(low (_table| 0))& (0+255)
  4354  0185  075F               	addwf	??_wayout+4,w
  4355  0186  00E0               	movwf	??_wayout+5
  4356  0187  0865               	movf	_temp_cursor+1,w
  4357  0188  0760               	addwf	??_wayout+5,w
  4358  0189  00E1               	movwf	??_wayout+6
  4359  018A  0861               	movf	??_wayout+6,w
  4360  018B  0086               	movwf	6
  4361  018C  0187               	clrf	7
  4362  018D  085E               	movf	??_wayout+3,w
  4363  018E  0081               	movwf	1
  4364                           
  4365                           ;wayout.c: 263: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]-5]);
  4366  018F  0865               	movf	_temp_cursor+1,w
  4367  0190  00DB               	movwf	??_wayout
  4368  0191  085B               	movf	??_wayout,w
  4369  0192  00B9               	movwf	set_point@point_y
  4370  0193  0864               	movf	_temp_cursor,w
  4371  0194  00DC               	movwf	??_wayout+1
  4372  0195  3003               	movlw	3
  4373  0196                     u5325:	
  4374  0196  35DC               	lslf	??_wayout+1,f
  4375  0197  0B89               	decfsz	9,f
  4376  0198  2996               	goto	u5325
  4377  0199  30A5               	movlw	(low (_table| 0))& (0+255)
  4378  019A  075C               	addwf	??_wayout+1,w
  4379  019B  00DD               	movwf	??_wayout+2
  4380  019C  0865               	movf	_temp_cursor+1,w
  4381  019D  075D               	addwf	??_wayout+2,w
  4382  019E  00DE               	movwf	??_wayout+3
  4383  019F  085E               	movf	??_wayout+3,w
  4384  01A0  0086               	movwf	6
  4385  01A1  0187               	clrf	7
  4386  01A2  0801               	movf	1,w
  4387  01A3  00DF               	movwf	??_wayout+4
  4388  01A4  3002               	movlw	2
  4389  01A5                     u5335:	
  4390  01A5  35DF               	lslf	??_wayout+4,f
  4391  01A6  3EFF               	addlw	-1
  4392  01A7  1D03               	skipz
  4393  01A8  29A5               	goto	u5335
  4394  01A9  355F               	lslf	??_wayout+4,w
  4395  01AA  3ED8               	addlw	216
  4396  01AB  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  4397  01AC  00E0               	movwf	??_wayout+5
  4398  01AD  0860               	movf	??_wayout+5,w
  4399  01AE  00BA               	movwf	set_point@value
  4400  01AF  0864               	movf	_temp_cursor,w
  4401  01B0  3196  267C         	fcall	_set_point
  4402                           
  4403                           ;wayout.c: 264: break;
  4404  01B2  0008               	return
  4405  01B3                     l3788:	
  4406                           ;wayout.c: 265: case 3:
  4407                           
  4408                           
  4409                           ;wayout.c: 266: key=0;
  4410  01B3  0020               	movlb	0	; select bank0
  4411  01B4  01E8               	clrf	_key
  4412                           
  4413                           ;wayout.c: 267: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] & 0x03;
  4414  01B5  0864               	movf	_temp_cursor,w
  4415  01B6  00DB               	movwf	??_wayout
  4416  01B7  3003               	movlw	3
  4417  01B8                     u5345:	
  4418  01B8  35DB               	lslf	??_wayout,f
  4419  01B9  0B89               	decfsz	9,f
  4420  01BA  29B8               	goto	u5345
  4421  01BB  30A5               	movlw	(low (_table| 0))& (0+255)
  4422  01BC  075B               	addwf	??_wayout,w
  4423  01BD  00DC               	movwf	??_wayout+1
  4424  01BE  0865               	movf	_temp_cursor+1,w
  4425  01BF  075C               	addwf	??_wayout+1,w
  4426  01C0  00DD               	movwf	??_wayout+2
  4427  01C1  085D               	movf	??_wayout+2,w
  4428  01C2  0086               	movwf	6
  4429  01C3  0187               	clrf	7
  4430  01C4  0801               	movf	1,w
  4431  01C5  3903               	andlw	3
  4432  01C6  00DE               	movwf	??_wayout+3
  4433  01C7  0864               	movf	_temp_cursor,w
  4434  01C8  00DF               	movwf	??_wayout+4
  4435  01C9  3003               	movlw	3
  4436  01CA                     u5355:	
  4437  01CA  35DF               	lslf	??_wayout+4,f
  4438  01CB  0B89               	decfsz	9,f
  4439  01CC  29CA               	goto	u5355
  4440  01CD  30A5               	movlw	(low (_table| 0))& (0+255)
  4441  01CE  075F               	addwf	??_wayout+4,w
  4442  01CF  00E0               	movwf	??_wayout+5
  4443  01D0  0865               	movf	_temp_cursor+1,w
  4444  01D1  0760               	addwf	??_wayout+5,w
  4445  01D2  00E1               	movwf	??_wayout+6
  4446  01D3  0861               	movf	??_wayout+6,w
  4447  01D4  0086               	movwf	6
  4448  01D5  0187               	clrf	7
  4449  01D6  085E               	movf	??_wayout+3,w
  4450  01D7  0081               	movwf	1
  4451                           
  4452                           ;wayout.c: 268: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]]);
  4453  01D8  0865               	movf	_temp_cursor+1,w
  4454  01D9  00DB               	movwf	??_wayout
  4455  01DA  085B               	movf	??_wayout,w
  4456  01DB  00B9               	movwf	set_point@point_y
  4457  01DC  0864               	movf	_temp_cursor,w
  4458  01DD  00DC               	movwf	??_wayout+1
  4459  01DE  3003               	movlw	3
  4460  01DF                     u5365:	
  4461  01DF  35DC               	lslf	??_wayout+1,f
  4462  01E0  0B89               	decfsz	9,f
  4463  01E1  29DF               	goto	u5365
  4464  01E2  30A5               	movlw	(low (_table| 0))& (0+255)
  4465  01E3  075C               	addwf	??_wayout+1,w
  4466  01E4  00DD               	movwf	??_wayout+2
  4467  01E5  0865               	movf	_temp_cursor+1,w
  4468  01E6  075D               	addwf	??_wayout+2,w
  4469  01E7  00DE               	movwf	??_wayout+3
  4470  01E8  085E               	movf	??_wayout+3,w
  4471  01E9  0086               	movwf	6
  4472  01EA  0187               	clrf	7
  4473  01EB  0801               	movf	1,w
  4474  01EC  00DF               	movwf	??_wayout+4
  4475  01ED  3002               	movlw	2
  4476  01EE                     u5375:	
  4477  01EE  35DF               	lslf	??_wayout+4,f
  4478  01EF  3EFF               	addlw	-1
  4479  01F0  1D03               	skipz
  4480  01F1  29EE               	goto	u5375
  4481  01F2  355F               	lslf	??_wayout+4,w
  4482  01F3  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  4483  01F4  00E0               	movwf	??_wayout+5
  4484  01F5  0860               	movf	??_wayout+5,w
  4485  01F6  00BA               	movwf	set_point@value
  4486  01F7  0864               	movf	_temp_cursor,w
  4487  01F8  3196  267C  3180   	fcall	_set_point
  4488                           
  4489                           ;wayout.c: 269: temp_cursor.col=(temp_cursor.col+8-1)%8;
  4490  01FB  0020               	movlb	0	; select bank0
  4491  01FC  0865               	movf	_temp_cursor+1,w
  4492  01FD  3E07               	addlw	7
  4493  01FE  3907               	andlw	7
  4494  01FF  00DB               	movwf	??_wayout
  4495  0200  085B               	movf	??_wayout,w
  4496  0201  00E5               	movwf	_temp_cursor+1
  4497                           
  4498                           ;wayout.c: 270: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] | 0x08;
  4499  0202  0864               	movf	_temp_cursor,w
  4500  0203  00DB               	movwf	??_wayout
  4501  0204  3003               	movlw	3
  4502  0205                     u5385:	
  4503  0205  35DB               	lslf	??_wayout,f
  4504  0206  0B89               	decfsz	9,f
  4505  0207  2A05               	goto	u5385
  4506  0208  30A5               	movlw	(low (_table| 0))& (0+255)
  4507  0209  075B               	addwf	??_wayout,w
  4508  020A  00DC               	movwf	??_wayout+1
  4509  020B  0865               	movf	_temp_cursor+1,w
  4510  020C  075C               	addwf	??_wayout+1,w
  4511  020D  00DD               	movwf	??_wayout+2
  4512  020E  085D               	movf	??_wayout+2,w
  4513  020F  0086               	movwf	6
  4514  0210  0187               	clrf	7
  4515  0211  0801               	movf	1,w
  4516  0212  3808               	iorlw	8
  4517  0213  00DE               	movwf	??_wayout+3
  4518  0214  0864               	movf	_temp_cursor,w
  4519  0215  00DF               	movwf	??_wayout+4
  4520  0216  3003               	movlw	3
  4521  0217                     u5395:	
  4522  0217  35DF               	lslf	??_wayout+4,f
  4523  0218  0B89               	decfsz	9,f
  4524  0219  2A17               	goto	u5395
  4525  021A  30A5               	movlw	(low (_table| 0))& (0+255)
  4526  021B  075F               	addwf	??_wayout+4,w
  4527  021C  00E0               	movwf	??_wayout+5
  4528  021D  0865               	movf	_temp_cursor+1,w
  4529  021E  0760               	addwf	??_wayout+5,w
  4530  021F  00E1               	movwf	??_wayout+6
  4531  0220  0861               	movf	??_wayout+6,w
  4532  0221  0086               	movwf	6
  4533  0222  0187               	clrf	7
  4534  0223  085E               	movf	??_wayout+3,w
  4535  0224  0081               	movwf	1
  4536                           
  4537                           ;wayout.c: 271: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]-5]);
  4538  0225  0865               	movf	_temp_cursor+1,w
  4539  0226  00DB               	movwf	??_wayout
  4540  0227  085B               	movf	??_wayout,w
  4541  0228  00B9               	movwf	set_point@point_y
  4542  0229  0864               	movf	_temp_cursor,w
  4543  022A  00DC               	movwf	??_wayout+1
  4544  022B  3003               	movlw	3
  4545  022C                     u5405:	
  4546  022C  35DC               	lslf	??_wayout+1,f
  4547  022D  0B89               	decfsz	9,f
  4548  022E  2A2C               	goto	u5405
  4549  022F  30A5               	movlw	(low (_table| 0))& (0+255)
  4550  0230  075C               	addwf	??_wayout+1,w
  4551  0231  00DD               	movwf	??_wayout+2
  4552  0232  0865               	movf	_temp_cursor+1,w
  4553  0233  075D               	addwf	??_wayout+2,w
  4554  0234  00DE               	movwf	??_wayout+3
  4555  0235  085E               	movf	??_wayout+3,w
  4556  0236  0086               	movwf	6
  4557  0237  0187               	clrf	7
  4558  0238  0801               	movf	1,w
  4559  0239  00DF               	movwf	??_wayout+4
  4560  023A  3002               	movlw	2
  4561  023B                     u5415:	
  4562  023B  35DF               	lslf	??_wayout+4,f
  4563  023C  3EFF               	addlw	-1
  4564  023D  1D03               	skipz
  4565  023E  2A3B               	goto	u5415
  4566  023F  355F               	lslf	??_wayout+4,w
  4567  0240  3ED8               	addlw	216
  4568  0241  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  4569  0242  00E0               	movwf	??_wayout+5
  4570  0243  0860               	movf	??_wayout+5,w
  4571  0244  00BA               	movwf	set_point@value
  4572  0245  0864               	movf	_temp_cursor,w
  4573  0246  3196  267C         	fcall	_set_point
  4574                           
  4575                           ;wayout.c: 272: break;
  4576  0248  0008               	return
  4577  0249                     l3800:	
  4578                           ;wayout.c: 273: case 4:
  4579                           
  4580                           
  4581                           ;wayout.c: 274: key=0;
  4582  0249  0020               	movlb	0	; select bank0
  4583  024A  01E8               	clrf	_key
  4584                           
  4585                           ;wayout.c: 275: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] & 0x03;
  4586  024B  0864               	movf	_temp_cursor,w
  4587  024C  00DB               	movwf	??_wayout
  4588  024D  3003               	movlw	3
  4589  024E                     u5425:	
  4590  024E  35DB               	lslf	??_wayout,f
  4591  024F  0B89               	decfsz	9,f
  4592  0250  2A4E               	goto	u5425
  4593  0251  30A5               	movlw	(low (_table| 0))& (0+255)
  4594  0252  075B               	addwf	??_wayout,w
  4595  0253  00DC               	movwf	??_wayout+1
  4596  0254  0865               	movf	_temp_cursor+1,w
  4597  0255  075C               	addwf	??_wayout+1,w
  4598  0256  00DD               	movwf	??_wayout+2
  4599  0257  085D               	movf	??_wayout+2,w
  4600  0258  0086               	movwf	6
  4601  0259  0187               	clrf	7
  4602  025A  0801               	movf	1,w
  4603  025B  3903               	andlw	3
  4604  025C  00DE               	movwf	??_wayout+3
  4605  025D  0864               	movf	_temp_cursor,w
  4606  025E  00DF               	movwf	??_wayout+4
  4607  025F  3003               	movlw	3
  4608  0260                     u5435:	
  4609  0260  35DF               	lslf	??_wayout+4,f
  4610  0261  0B89               	decfsz	9,f
  4611  0262  2A60               	goto	u5435
  4612  0263  30A5               	movlw	(low (_table| 0))& (0+255)
  4613  0264  075F               	addwf	??_wayout+4,w
  4614  0265  00E0               	movwf	??_wayout+5
  4615  0266  0865               	movf	_temp_cursor+1,w
  4616  0267  0760               	addwf	??_wayout+5,w
  4617  0268  00E1               	movwf	??_wayout+6
  4618  0269  0861               	movf	??_wayout+6,w
  4619  026A  0086               	movwf	6
  4620  026B  0187               	clrf	7
  4621  026C  085E               	movf	??_wayout+3,w
  4622  026D  0081               	movwf	1
  4623                           
  4624                           ;wayout.c: 276: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]]);
  4625  026E  0865               	movf	_temp_cursor+1,w
  4626  026F  00DB               	movwf	??_wayout
  4627  0270  085B               	movf	??_wayout,w
  4628  0271  00B9               	movwf	set_point@point_y
  4629  0272  0864               	movf	_temp_cursor,w
  4630  0273  00DC               	movwf	??_wayout+1
  4631  0274  3003               	movlw	3
  4632  0275                     u5445:	
  4633  0275  35DC               	lslf	??_wayout+1,f
  4634  0276  0B89               	decfsz	9,f
  4635  0277  2A75               	goto	u5445
  4636  0278  30A5               	movlw	(low (_table| 0))& (0+255)
  4637  0279  075C               	addwf	??_wayout+1,w
  4638  027A  00DD               	movwf	??_wayout+2
  4639  027B  0865               	movf	_temp_cursor+1,w
  4640  027C  075D               	addwf	??_wayout+2,w
  4641  027D  00DE               	movwf	??_wayout+3
  4642  027E  085E               	movf	??_wayout+3,w
  4643  027F  0086               	movwf	6
  4644  0280  0187               	clrf	7
  4645  0281  0801               	movf	1,w
  4646  0282  00DF               	movwf	??_wayout+4
  4647  0283  3002               	movlw	2
  4648  0284                     u5455:	
  4649  0284  35DF               	lslf	??_wayout+4,f
  4650  0285  3EFF               	addlw	-1
  4651  0286  1D03               	skipz
  4652  0287  2A84               	goto	u5455
  4653  0288  355F               	lslf	??_wayout+4,w
  4654  0289  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  4655  028A  00E0               	movwf	??_wayout+5
  4656  028B  0860               	movf	??_wayout+5,w
  4657  028C  00BA               	movwf	set_point@value
  4658  028D  0864               	movf	_temp_cursor,w
  4659  028E  3196  267C  3180   	fcall	_set_point
  4660                           
  4661                           ;wayout.c: 277: temp_cursor.col=(temp_cursor.col+1)%8;
  4662  0291  0020               	movlb	0	; select bank0
  4663  0292  0865               	movf	_temp_cursor+1,w
  4664  0293  3E01               	addlw	1
  4665  0294  3907               	andlw	7
  4666  0295  00DB               	movwf	??_wayout
  4667  0296  085B               	movf	??_wayout,w
  4668  0297  00E5               	movwf	_temp_cursor+1
  4669                           
  4670                           ;wayout.c: 278: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] | 0x08;
  4671  0298  0864               	movf	_temp_cursor,w
  4672  0299  00DB               	movwf	??_wayout
  4673  029A  3003               	movlw	3
  4674  029B                     u5465:	
  4675  029B  35DB               	lslf	??_wayout,f
  4676  029C  0B89               	decfsz	9,f
  4677  029D  2A9B               	goto	u5465
  4678  029E  30A5               	movlw	(low (_table| 0))& (0+255)
  4679  029F  075B               	addwf	??_wayout,w
  4680  02A0  00DC               	movwf	??_wayout+1
  4681  02A1  0865               	movf	_temp_cursor+1,w
  4682  02A2  075C               	addwf	??_wayout+1,w
  4683  02A3  00DD               	movwf	??_wayout+2
  4684  02A4  085D               	movf	??_wayout+2,w
  4685  02A5  0086               	movwf	6
  4686  02A6  0187               	clrf	7
  4687  02A7  0801               	movf	1,w
  4688  02A8  3808               	iorlw	8
  4689  02A9  00DE               	movwf	??_wayout+3
  4690  02AA  0864               	movf	_temp_cursor,w
  4691  02AB  00DF               	movwf	??_wayout+4
  4692  02AC  3003               	movlw	3
  4693  02AD                     u5475:	
  4694  02AD  35DF               	lslf	??_wayout+4,f
  4695  02AE  0B89               	decfsz	9,f
  4696  02AF  2AAD               	goto	u5475
  4697  02B0  30A5               	movlw	(low (_table| 0))& (0+255)
  4698  02B1  075F               	addwf	??_wayout+4,w
  4699  02B2  00E0               	movwf	??_wayout+5
  4700  02B3  0865               	movf	_temp_cursor+1,w
  4701  02B4  0760               	addwf	??_wayout+5,w
  4702  02B5  00E1               	movwf	??_wayout+6
  4703  02B6  0861               	movf	??_wayout+6,w
  4704  02B7  0086               	movwf	6
  4705  02B8  0187               	clrf	7
  4706  02B9  085E               	movf	??_wayout+3,w
  4707  02BA  0081               	movwf	1
  4708                           
  4709                           ;wayout.c: 279: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]-5]);
  4710  02BB  0865               	movf	_temp_cursor+1,w
  4711  02BC  00DB               	movwf	??_wayout
  4712  02BD  085B               	movf	??_wayout,w
  4713  02BE  00B9               	movwf	set_point@point_y
  4714  02BF  0864               	movf	_temp_cursor,w
  4715  02C0  00DC               	movwf	??_wayout+1
  4716  02C1  3003               	movlw	3
  4717  02C2                     u5485:	
  4718  02C2  35DC               	lslf	??_wayout+1,f
  4719  02C3  0B89               	decfsz	9,f
  4720  02C4  2AC2               	goto	u5485
  4721  02C5  30A5               	movlw	(low (_table| 0))& (0+255)
  4722  02C6  075C               	addwf	??_wayout+1,w
  4723  02C7  00DD               	movwf	??_wayout+2
  4724  02C8  0865               	movf	_temp_cursor+1,w
  4725  02C9  075D               	addwf	??_wayout+2,w
  4726  02CA  00DE               	movwf	??_wayout+3
  4727  02CB  085E               	movf	??_wayout+3,w
  4728  02CC  0086               	movwf	6
  4729  02CD  0187               	clrf	7
  4730  02CE  0801               	movf	1,w
  4731  02CF  00DF               	movwf	??_wayout+4
  4732  02D0  3002               	movlw	2
  4733  02D1                     u5495:	
  4734  02D1  35DF               	lslf	??_wayout+4,f
  4735  02D2  3EFF               	addlw	-1
  4736  02D3  1D03               	skipz
  4737  02D4  2AD1               	goto	u5495
  4738  02D5  355F               	lslf	??_wayout+4,w
  4739  02D6  3ED8               	addlw	216
  4740  02D7  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  4741  02D8  00E0               	movwf	??_wayout+5
  4742  02D9  0860               	movf	??_wayout+5,w
  4743  02DA  00BA               	movwf	set_point@value
  4744  02DB  0864               	movf	_temp_cursor,w
  4745  02DC  3196  267C         	fcall	_set_point
  4746                           
  4747                           ;wayout.c: 280: break;
  4748  02DE  0008               	return
  4749  02DF                     l3812:	
  4750                           ;wayout.c: 281: case 5:
  4751                           
  4752                           
  4753                           ;wayout.c: 282: key=0;
  4754  02DF  0020               	movlb	0	; select bank0
  4755  02E0  01E8               	clrf	_key
  4756                           
  4757                           ;wayout.c: 283: if(choose(temp_cursor.row,temp_cursor.col))
  4758  02E1  0864               	movf	_temp_cursor,w
  4759  02E2  00DB               	movwf	??_wayout
  4760  02E3  01DC               	clrf	??_wayout+1
  4761  02E4  085B               	movf	??_wayout,w
  4762  02E5  00D0               	movwf	choose@i
  4763  02E6  085C               	movf	??_wayout+1,w
  4764  02E7  00D1               	movwf	choose@i+1
  4765  02E8  0865               	movf	_temp_cursor+1,w
  4766  02E9  00DD               	movwf	??_wayout+2
  4767  02EA  01DE               	clrf	??_wayout+3
  4768  02EB  085D               	movf	??_wayout+2,w
  4769  02EC  00D2               	movwf	choose@j
  4770  02ED  085E               	movf	??_wayout+3,w
  4771  02EE  00D3               	movwf	choose@j+1
  4772  02EF  3188  2007  3180   	fcall	_choose
  4773  02F2  3A00               	xorlw	0
  4774  02F3  1903               	skipnz
  4775  02F4  0008               	return
  4776                           
  4777                           ;wayout.c: 284: {
  4778                           ;wayout.c: 285: total_step++;
  4779  02F5  3001               	movlw	1
  4780  02F6  0020               	movlb	0	; select bank0
  4781  02F7  00DB               	movwf	??_wayout
  4782  02F8  085B               	movf	??_wayout,w
  4783  02F9  0021               	movlb	1	; select bank1
  4784  02FA  07A4               	addwf	_total_step^(0+128),f
  4785                           
  4786                           ;wayout.c: 286: int2string(display_step,5,total_step);
  4787  02FB  3005               	movlw	5
  4788  02FC  0020               	movlb	0	; select bank0
  4789  02FD  00DB               	movwf	??_wayout
  4790  02FE  085B               	movf	??_wayout,w
  4791  02FF  00AC               	movwf	int2string@begin
  4792  0300  0021               	movlb	1	; select bank1
  4793  0301  0824               	movf	_total_step^(0+128),w
  4794  0302  0020               	movlb	0	; select bank0
  4795  0303  00DC               	movwf	??_wayout+1
  4796  0304  085C               	movf	??_wayout+1,w
  4797  0305  00AD               	movwf	int2string@num
  4798  0306  30B0               	movlw	(low (_display_step| (0+256)))& (0+255)
  4799  0307  3191  21B7  3180   	fcall	_int2string
  4800                           
  4801                           ;wayout.c: 287: Display_Chars(2,display_step,5);
  4802  030A  30B0               	movlw	low _display_step
  4803  030B  0020               	movlb	0	; select bank0
  4804  030C  00B2               	movwf	Display_Chars@string
  4805  030D  3001               	movlw	high _display_step
  4806  030E  00B3               	movwf	Display_Chars@string+1
  4807  030F  3005               	movlw	5
  4808  0310  00DB               	movwf	??_wayout
  4809  0311  085B               	movf	??_wayout,w
  4810  0312  00B4               	movwf	Display_Chars@y
  4811  0313  3002               	movlw	2
  4812  0314  3192  22ED  3180   	fcall	_Display_Chars
  4813                           
  4814                           ;wayout.c: 292: if(check_if_complete())
  4815                           
  4816                           ;wayout.c: 289: else
  4817                           ;wayout.c: 290: break;
  4818                           
  4819                           ;wayout.c: 288: }
  4820  0317  3190  2058  3180   	fcall	_check_if_complete
  4821  031A  3A00               	xorlw	0
  4822  031B  1903               	skipnz
  4823  031C  0008               	return
  4824                           
  4825                           ;wayout.c: 293: {
  4826                           ;wayout.c: 296: Clear_Screen(0x00);
  4827  031D  3000               	movlw	0
  4828  031E  0020               	movlb	0	; select bank0
  4829  031F  00B2               	movwf	Clear_Screen@value
  4830  0320  00B3               	movwf	Clear_Screen@value+1
  4831  0321  3193  239B  3180   	fcall	_Clear_Screen
  4832                           
  4833                           ;wayout.c: 297: Display_Chars(1, "Success",1);
  4834  0324  30B3               	movlw	low (STR_26| (0+32768))
  4835  0325  0020               	movlb	0	; select bank0
  4836  0326  00B2               	movwf	Display_Chars@string
  4837  0327  3098               	movlw	high (STR_26| (0+32768))
  4838  0328  00B3               	movwf	Display_Chars@string+1
  4839  0329  01B4               	clrf	Display_Chars@y
  4840  032A  0AB4               	incf	Display_Chars@y,f
  4841  032B  3001               	movlw	1
  4842  032C  3192  22ED  3180   	fcall	_Display_Chars
  4843                           
  4844                           ;wayout.c: 298: Display_Chars(2, "Press back to exit",1);
  4845  032F  3000               	movlw	low (STR_2| (0+32768))
  4846  0330  0020               	movlb	0	; select bank0
  4847  0331  00B2               	movwf	Display_Chars@string
  4848  0332  3098               	movlw	high (STR_2| (0+32768))
  4849  0333  00B3               	movwf	Display_Chars@string+1
  4850  0334  01B4               	clrf	Display_Chars@y
  4851  0335  0AB4               	incf	Display_Chars@y,f
  4852  0336  3002               	movlw	2
  4853  0337  3192  22ED  3180   	fcall	_Display_Chars
  4854  033A                     l3830:	
  4855                           ;wayout.c: 300: ;
  4856                           
  4857                           ;wayout.c: 299: while(key!=6)
  4858                           
  4859  033A  3006               	movlw	6
  4860  033B  0020               	movlb	0	; select bank0
  4861  033C  0668               	xorwf	_key,w
  4862  033D  1D03               	btfss	3,2
  4863  033E  2B3A               	goto	l3830
  4864                           
  4865                           ;wayout.c: 301: key = 0;
  4866  033F  01E8               	clrf	_key
  4867                           
  4868                           ;wayout.c: 302: start = 2;
  4869  0340  3002               	movlw	2
  4870  0341  00DB               	movwf	??_wayout
  4871  0342  085B               	movf	??_wayout,w
  4872  0343  0021               	movlb	1	; select bank1
  4873  0344  00A3               	movwf	_start^(0+128)
  4874                           
  4875                           ;wayout.c: 303: level_num = choose_level2();
  4876  0345  318B  23E6  3180   	fcall	_choose_level2
  4877  0348  0020               	movlb	0	; select bank0
  4878  0349  00DB               	movwf	??_wayout
  4879  034A  085B               	movf	??_wayout,w
  4880  034B  00E9               	movwf	_level_num
  4881                           
  4882                           ;wayout.c: 304: if (level_num !=0)
  4883  034C  0869               	movf	_level_num,w
  4884  034D  1903               	btfsc	3,2
  4885  034E  2B54               	goto	l3842
  4886                           
  4887                           ;wayout.c: 305: {
  4888                           ;wayout.c: 306: init_wayout(level_num);
  4889  034F  0869               	movf	_level_num,w
  4890  0350  3197  271C  3180   	fcall	_init_wayout
  4891                           
  4892                           ;wayout.c: 307: }
  4893  0353  2B56               	goto	l3844
  4894  0354                     l3842:	
  4895                           
  4896                           ;wayout.c: 308: else
  4897                           ;wayout.c: 309: {
  4898                           ;wayout.c: 310: start =0;
  4899  0354  0021               	movlb	1	; select bank1
  4900  0355  01A3               	clrf	_start^(0+128)
  4901  0356                     l3844:	
  4902                           ;wayout.c: 315: case 6:
  4903                           
  4904                           ;wayout.c: 313: else
  4905                           ;wayout.c: 314: break;
  4906                           
  4907                           ;wayout.c: 311: }
  4908                           ;wayout.c: 312: }
  4909                           
  4910                           
  4911                           ;wayout.c: 316: key = 0;
  4912  0356  0020               	movlb	0	; select bank0
  4913  0357  01E8               	clrf	_key
  4914                           
  4915                           ;wayout.c: 317: start = 2;
  4916  0358  3002               	movlw	2
  4917  0359  00DB               	movwf	??_wayout
  4918  035A  085B               	movf	??_wayout,w
  4919  035B  0021               	movlb	1	; select bank1
  4920  035C  00A3               	movwf	_start^(0+128)
  4921                           
  4922                           ;wayout.c: 318: level_num = choose_level2();
  4923  035D  318B  23E6  3180   	fcall	_choose_level2
  4924  0360  0020               	movlb	0	; select bank0
  4925  0361  00DB               	movwf	??_wayout
  4926  0362  085B               	movf	??_wayout,w
  4927  0363  00E9               	movwf	_level_num
  4928                           
  4929                           ;wayout.c: 319: if (level_num !=0)
  4930  0364  0869               	movf	_level_num,w
  4931  0365  1903               	btfsc	3,2
  4932  0366  2B6B               	goto	l3854
  4933                           
  4934                           ;wayout.c: 320: {
  4935                           ;wayout.c: 321: init_wayout(level_num);
  4936  0367  0869               	movf	_level_num,w
  4937  0368  3197  271C         	fcall	_init_wayout
  4938                           
  4939                           ;wayout.c: 322: }
  4940  036A  0008               	return
  4941  036B                     l3854:	
  4942                           
  4943                           ;wayout.c: 323: else
  4944                           ;wayout.c: 324: {
  4945                           ;wayout.c: 325: start =0;
  4946  036B  0021               	movlb	1	; select bank1
  4947  036C  01A3               	clrf	_start^(0+128)
  4948                           
  4949                           ;wayout.c: 328: }
  4950                           
  4951                           ;wayout.c: 326: }
  4952                           ;wayout.c: 327: break;
  4953  036D  0008               	return
  4954  036E                     l3858:	
  4955  036E  0020               	movlb	0	; select bank0
  4956  036F  0868               	movf	_key,w
  4957                           
  4958                           ; Switch size 1, requested type "space"
  4959                           ; Number of cases is 6, Range of values is 1 to 6
  4960                           ; switch strategies available:
  4961                           ; Name         Instructions Cycles
  4962                           ; simple_byte           19    10 (average)
  4963                           ; direct_byte           21     9 (fixed)
  4964                           ; jumptable            263     9 (fixed)
  4965                           ;	Chosen strategy is simple_byte
  4966  0370  3A01               	xorlw	1	; case 1
  4967  0371  1903               	skipnz
  4968  0372  2887               	goto	l3764
  4969  0373  3A03               	xorlw	3	; case 2
  4970  0374  1903               	skipnz
  4971  0375  291D               	goto	l3776
  4972  0376  3A01               	xorlw	1	; case 3
  4973  0377  1903               	skipnz
  4974  0378  29B3               	goto	l3788
  4975  0379  3A07               	xorlw	7	; case 4
  4976  037A  1903               	skipnz
  4977  037B  2A49               	goto	l3800
  4978  037C  3A01               	xorlw	1	; case 5
  4979  037D  1903               	skipnz
  4980  037E  2ADF               	goto	l3812
  4981  037F  3A03               	xorlw	3	; case 6
  4982  0380  1903               	skipnz
  4983  0381  2B56               	goto	l3844
  4984  0382  2B83               	goto	l746
  4985  0383                     l746:	
  4986  0383  0008               	return
  4987  0384                     __end_of_wayout:	
  4988                           
  4989                           	psect	text8
  4990  171C                     __ptext8:	
  4991 ;; *************** function _init_wayout *****************
  4992 ;; Defined at:
  4993 ;;		line 226 in file "wayout.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;  level_num       1    wreg     unsigned char 
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;  level_num       1   53[BANK0 ] unsigned char 
  4998 ;;  j               2   56[BANK0 ] int 
  4999 ;;  i               2   54[BANK0 ] int 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;Total ram usage:       21 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    9
  5016 ;; This function calls:
  5017 ;;		_Clear_Screen
  5018 ;;		_draw_wayout_right
  5019 ;;		_set_point
  5020 ;; This function is called by:
  5021 ;;		_run_game
  5022 ;;		_wayout
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function _init_wayout
  5028  171C                     _init_wayout:	
  5029                           
  5030                           ;incstack = 0
  5031                           ; Regs used in _init_wayout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5032                           ;init_wayout@level_num stored from wreg
  5033  171C  0020               	movlb	0	; select bank0
  5034  171D  00D5               	movwf	init_wayout@level_num
  5035                           
  5036                           ;wayout.c: 228: Clear_Screen(0x00);
  5037  171E  3000               	movlw	0
  5038  171F  00B2               	movwf	Clear_Screen@value
  5039  1720  00B3               	movwf	Clear_Screen@value+1
  5040  1721  3193  239B  3197   	fcall	_Clear_Screen
  5041                           
  5042                           ;wayout.c: 230: for(int i=0;i<8;i++)
  5043  1724  0020               	movlb	0	; select bank0
  5044  1725  01D6               	clrf	init_wayout@i
  5045  1726  01D7               	clrf	init_wayout@i+1
  5046  1727  0857               	movf	init_wayout@i+1,w
  5047  1728  3A80               	xorlw	128
  5048  1729  00C5               	movwf	??_init_wayout
  5049  172A  3080               	movlw	128
  5050  172B  0245               	subwf	??_init_wayout,w
  5051  172C  3008               	movlw	8
  5052  172D  1903               	btfsc	3,2
  5053  172E  0256               	subwf	init_wayout@i,w
  5054  172F  1803               	btfsc	3,0
  5055  1730  2FD3               	goto	l3502
  5056  1731                     l3486:	
  5057                           
  5058                           ;wayout.c: 231: for(int j=0;j<8;j++)
  5059  1731  0020               	movlb	0	; select bank0
  5060  1732  01D8               	clrf	init_wayout@j
  5061  1733  01D9               	clrf	init_wayout@j+1
  5062  1734  0859               	movf	init_wayout@j+1,w
  5063  1735  3A80               	xorlw	128
  5064  1736  00C5               	movwf	??_init_wayout
  5065  1737  3080               	movlw	128
  5066  1738  0245               	subwf	??_init_wayout,w
  5067  1739  3008               	movlw	8
  5068  173A  1903               	btfsc	3,2
  5069  173B  0258               	subwf	init_wayout@j,w
  5070  173C  1803               	btfsc	3,0
  5071  173D  2FC4               	goto	l3500
  5072  173E                     l3492:	
  5073                           
  5074                           ;wayout.c: 232: {
  5075                           ;wayout.c: 233: table[i][j]=level[level_num-1][i][j];
  5076  173E  0020               	movlb	0	; select bank0
  5077  173F  0857               	movf	init_wayout@i+1,w
  5078  1740  00C6               	movwf	??_init_wayout+1
  5079  1741  0856               	movf	init_wayout@i,w
  5080  1742  00C5               	movwf	??_init_wayout
  5081  1743  35C5               	lslf	??_init_wayout,f
  5082  1744  0DC6               	rlf	??_init_wayout+1,f
  5083  1745  35C5               	lslf	??_init_wayout,f
  5084  1746  0DC6               	rlf	??_init_wayout+1,f
  5085  1747  35C5               	lslf	??_init_wayout,f
  5086  1748  0DC6               	rlf	??_init_wayout+1,f
  5087  1749  0855               	movf	init_wayout@level_num,w
  5088  174A  00C7               	movwf	??_init_wayout+2
  5089  174B  01C8               	clrf	??_init_wayout+3
  5090  174C  3006               	movlw	6
  5091  174D                     u4465:	
  5092  174D  35C7               	lslf	??_init_wayout+2,f
  5093  174E  0DC8               	rlf	??_init_wayout+3,f
  5094  174F  0B89               	decfsz	9,f
  5095  1750  2F4D               	goto	u4465
  5096  1751  0847               	movf	??_init_wayout+2,w
  5097  1752  3EC0               	addlw	192
  5098  1753  00C9               	movwf	??_init_wayout+4
  5099  1754  30FF               	movlw	255
  5100  1755  3D48               	addwfc	??_init_wayout+3,w
  5101  1756  00CA               	movwf	??_init_wayout+5
  5102  1757  3070               	movlw	112
  5103  1758  00CB               	movwf	??_init_wayout+6
  5104  1759  3022               	movlw	34
  5105  175A  00CC               	movwf	??_init_wayout+7
  5106  175B  0849               	movf	??_init_wayout+4,w
  5107  175C  074B               	addwf	??_init_wayout+6,w
  5108  175D  00CD               	movwf	??_init_wayout+8
  5109  175E  084A               	movf	??_init_wayout+5,w
  5110  175F  3D4C               	addwfc	??_init_wayout+7,w
  5111  1760  00CE               	movwf	??_init_wayout+9
  5112  1761  0845               	movf	??_init_wayout,w
  5113  1762  074D               	addwf	??_init_wayout+8,w
  5114  1763  00CF               	movwf	??_init_wayout+10
  5115  1764  0846               	movf	??_init_wayout+1,w
  5116  1765  3D4E               	addwfc	??_init_wayout+9,w
  5117  1766  00D0               	movwf	??_init_wayout+11
  5118  1767  0858               	movf	init_wayout@j,w
  5119  1768  074F               	addwf	??_init_wayout+10,w
  5120  1769  0086               	movwf	6
  5121  176A  0859               	movf	init_wayout@j+1,w
  5122  176B  3D50               	addwfc	??_init_wayout+11,w
  5123  176C  0087               	movwf	7
  5124  176D  0801               	movf	1,w
  5125  176E  00D1               	movwf	??_init_wayout+12
  5126  176F  0856               	movf	init_wayout@i,w
  5127  1770  00D2               	movwf	??_init_wayout+13
  5128  1771  3003               	movlw	3
  5129  1772                     u4475:	
  5130  1772  35D2               	lslf	??_init_wayout+13,f
  5131  1773  0B89               	decfsz	9,f
  5132  1774  2F72               	goto	u4475
  5133  1775  30A5               	movlw	(low (_table| 0))& (0+255)
  5134  1776  0752               	addwf	??_init_wayout+13,w
  5135  1777  00D3               	movwf	??_init_wayout+14
  5136  1778  0858               	movf	init_wayout@j,w
  5137  1779  0753               	addwf	??_init_wayout+14,w
  5138  177A  00D4               	movwf	??_init_wayout+15
  5139  177B  0854               	movf	??_init_wayout+15,w
  5140  177C  0086               	movwf	6
  5141  177D  0187               	clrf	7
  5142  177E  0851               	movf	??_init_wayout+12,w
  5143  177F  0081               	movwf	1
  5144                           
  5145                           ;wayout.c: 234: if(table[i][j]>0)
  5146  1780  0856               	movf	init_wayout@i,w
  5147  1781  00C5               	movwf	??_init_wayout
  5148  1782  3003               	movlw	3
  5149  1783                     u4485:	
  5150  1783  35C5               	lslf	??_init_wayout,f
  5151  1784  0B89               	decfsz	9,f
  5152  1785  2F83               	goto	u4485
  5153  1786  30A5               	movlw	(low (_table| 0))& (0+255)
  5154  1787  0745               	addwf	??_init_wayout,w
  5155  1788  00C6               	movwf	??_init_wayout+1
  5156  1789  0858               	movf	init_wayout@j,w
  5157  178A  0746               	addwf	??_init_wayout+1,w
  5158  178B  00C7               	movwf	??_init_wayout+2
  5159  178C  0847               	movf	??_init_wayout+2,w
  5160  178D  0086               	movwf	6
  5161  178E  0187               	clrf	7
  5162  178F  0801               	movf	1,w
  5163  1790  1903               	btfsc	3,2
  5164  1791  2FB5               	goto	l3496
  5165                           
  5166                           ;wayout.c: 235: set_point(i,j,screen[table[i][j]]);
  5167  1792  0858               	movf	init_wayout@j,w
  5168  1793  00C5               	movwf	??_init_wayout
  5169  1794  0845               	movf	??_init_wayout,w
  5170  1795  00B9               	movwf	set_point@point_y
  5171  1796  0856               	movf	init_wayout@i,w
  5172  1797  00C6               	movwf	??_init_wayout+1
  5173  1798  3003               	movlw	3
  5174  1799                     u4505:	
  5175  1799  35C6               	lslf	??_init_wayout+1,f
  5176  179A  0B89               	decfsz	9,f
  5177  179B  2F99               	goto	u4505
  5178  179C  30A5               	movlw	(low (_table| 0))& (0+255)
  5179  179D  0746               	addwf	??_init_wayout+1,w
  5180  179E  00C7               	movwf	??_init_wayout+2
  5181  179F  0858               	movf	init_wayout@j,w
  5182  17A0  0747               	addwf	??_init_wayout+2,w
  5183  17A1  00C8               	movwf	??_init_wayout+3
  5184  17A2  0848               	movf	??_init_wayout+3,w
  5185  17A3  0086               	movwf	6
  5186  17A4  0187               	clrf	7
  5187  17A5  0801               	movf	1,w
  5188  17A6  00C9               	movwf	??_init_wayout+4
  5189  17A7  3002               	movlw	2
  5190  17A8                     u4515:	
  5191  17A8  35C9               	lslf	??_init_wayout+4,f
  5192  17A9  3EFF               	addlw	-1
  5193  17AA  1D03               	skipz
  5194  17AB  2FA8               	goto	u4515
  5195  17AC  3549               	lslf	??_init_wayout+4,w
  5196  17AD  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  5197  17AE  00CA               	movwf	??_init_wayout+5
  5198  17AF  084A               	movf	??_init_wayout+5,w
  5199  17B0  00BA               	movwf	set_point@value
  5200  17B1  0856               	movf	init_wayout@i,w
  5201  17B2  3196  267C  3197   	fcall	_set_point
  5202  17B5                     l3496:	
  5203  17B5  3001               	movlw	1
  5204  17B6  0020               	movlb	0	; select bank0
  5205  17B7  07D8               	addwf	init_wayout@j,f
  5206  17B8  3000               	movlw	0
  5207  17B9  3DD9               	addwfc	init_wayout@j+1,f
  5208  17BA  0859               	movf	init_wayout@j+1,w
  5209  17BB  3A80               	xorlw	128
  5210  17BC  00C5               	movwf	??_init_wayout
  5211  17BD  3080               	movlw	128
  5212  17BE  0245               	subwf	??_init_wayout,w
  5213  17BF  3008               	movlw	8
  5214  17C0  1903               	btfsc	3,2
  5215  17C1  0258               	subwf	init_wayout@j,w
  5216  17C2  1C03               	skipc
  5217  17C3  2F3E               	goto	l3492
  5218  17C4                     l3500:	
  5219  17C4  3001               	movlw	1
  5220  17C5  0020               	movlb	0	; select bank0
  5221  17C6  07D6               	addwf	init_wayout@i,f
  5222  17C7  3000               	movlw	0
  5223  17C8  3DD7               	addwfc	init_wayout@i+1,f
  5224  17C9  0857               	movf	init_wayout@i+1,w
  5225  17CA  3A80               	xorlw	128
  5226  17CB  00C5               	movwf	??_init_wayout
  5227  17CC  3080               	movlw	128
  5228  17CD  0245               	subwf	??_init_wayout,w
  5229  17CE  3008               	movlw	8
  5230  17CF  1903               	btfsc	3,2
  5231  17D0  0256               	subwf	init_wayout@i,w
  5232  17D1  1C03               	skipc
  5233  17D2  2F31               	goto	l3486
  5234  17D3                     l3502:	
  5235                           
  5236                           ;wayout.c: 236: }
  5237                           ;wayout.c: 237: temp_cursor.col=0;
  5238  17D3  0020               	movlb	0	; select bank0
  5239  17D4  01E5               	clrf	_temp_cursor+1
  5240                           
  5241                           ;wayout.c: 238: temp_cursor.row=0;
  5242  17D5  01E4               	clrf	_temp_cursor
  5243                           
  5244                           ;wayout.c: 239: table[0][0] = table[0][0] | 0x08;
  5245  17D6  0021               	movlb	1	; select bank1
  5246  17D7  0825               	movf	_table^(0+128),w
  5247  17D8  3808               	iorlw	8
  5248  17D9  0020               	movlb	0	; select bank0
  5249  17DA  00C5               	movwf	??_init_wayout
  5250  17DB  0845               	movf	??_init_wayout,w
  5251  17DC  0021               	movlb	1	; select bank1
  5252  17DD  00A5               	movwf	_table^(0+128)
  5253                           
  5254                           ;wayout.c: 240: set_point(0,0,screen[table[0][0]-5]);
  5255  17DE  0020               	movlb	0	; select bank0
  5256  17DF  01B9               	clrf	set_point@point_y
  5257  17E0  0021               	movlb	1	; select bank1
  5258  17E1  0825               	movf	_table^(0+128),w
  5259  17E2  0020               	movlb	0	; select bank0
  5260  17E3  00C5               	movwf	??_init_wayout
  5261  17E4  3002               	movlw	2
  5262  17E5                     u4545:	
  5263  17E5  35C5               	lslf	??_init_wayout,f
  5264  17E6  3EFF               	addlw	-1
  5265  17E7  1D03               	skipz
  5266  17E8  2FE5               	goto	u4545
  5267  17E9  3545               	lslf	??_init_wayout,w
  5268  17EA  3ED8               	addlw	216
  5269  17EB  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  5270  17EC  00C6               	movwf	??_init_wayout+1
  5271  17ED  0846               	movf	??_init_wayout+1,w
  5272  17EE  00BA               	movwf	set_point@value
  5273  17EF  3000               	movlw	0
  5274  17F0  3196  267C  3197   	fcall	_set_point
  5275                           
  5276                           ;wayout.c: 241: total_step=0;
  5277  17F3  0021               	movlb	1	; select bank1
  5278  17F4  01A4               	clrf	_total_step^(0+128)
  5279                           
  5280                           ;wayout.c: 242: draw_wayout_right(level_num);
  5281  17F5  0020               	movlb	0	; select bank0
  5282  17F6  0855               	movf	init_wayout@level_num,w
  5283  17F7  00C5               	movwf	??_init_wayout
  5284  17F8  01C6               	clrf	??_init_wayout+1
  5285  17F9  0845               	movf	??_init_wayout,w
  5286  17FA  00BE               	movwf	draw_wayout_right@level
  5287  17FB  0846               	movf	??_init_wayout+1,w
  5288  17FC  00BF               	movwf	draw_wayout_right@level+1
  5289  17FD  318D  2518         	fcall	_draw_wayout_right
  5290  17FF  0008               	return
  5291  1800                     __end_of_init_wayout:	
  5292                           
  5293                           	psect	text9
  5294  0D18                     __ptext9:	
  5295 ;; *************** function _draw_wayout_right *****************
  5296 ;; Defined at:
  5297 ;;		line 3 in file "wayout.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;  level           2   30[BANK0 ] int 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;  i               1   35[BANK0 ] unsigned char 
  5302 ;;  j               1   34[BANK0 ] unsigned char 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      void 
  5305 ;; Registers used:
  5306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5312 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;Total ram usage:        6 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    8
  5319 ;; This function calls:
  5320 ;;		_Display_Chars
  5321 ;;		_Write_Com
  5322 ;;		_Write_Data
  5323 ;;		_delay_100us
  5324 ;;		_int2string
  5325 ;; This function is called by:
  5326 ;;		_init_wayout
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           
  5331                           ;psect for function _draw_wayout_right
  5332  0D18                     _draw_wayout_right:	
  5333                           
  5334                           ;wayout.c: 4: unsigned char i,j;
  5335                           ;wayout.c: 5: Write_Com(0x01);
  5336                           
  5337                           ;incstack = 0
  5338                           ; Regs used in _draw_wayout_right: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5339  0D18  3001               	movlw	1
  5340  0D19  0020               	movlb	0	; select bank0
  5341  0D1A  00B0               	movwf	Write_Com@com
  5342  0D1B  3000               	movlw	0
  5343  0D1C  00B1               	movwf	Write_Com@com+1
  5344  0D1D  319E  265E  318D   	fcall	_Write_Com
  5345                           
  5346                           ;wayout.c: 6: delay_100us(100);
  5347  0D20  3064               	movlw	100
  5348  0D21  0020               	movlb	0	; select bank0
  5349  0D22  00A9               	movwf	delay_100us@cnt
  5350  0D23  3000               	movlw	0
  5351  0D24  00AA               	movwf	delay_100us@cnt+1
  5352  0D25  319F  27B4  318D   	fcall	_delay_100us
  5353                           
  5354                           ;wayout.c: 7: Write_Com(0x34);
  5355  0D28  3034               	movlw	52
  5356  0D29  0020               	movlb	0	; select bank0
  5357  0D2A  00B0               	movwf	Write_Com@com
  5358  0D2B  3000               	movlw	0
  5359  0D2C  00B1               	movwf	Write_Com@com+1
  5360  0D2D  319E  265E  318D   	fcall	_Write_Com
  5361                           
  5362                           ;wayout.c: 8: for(i=0; i<64; i++) {
  5363  0D30  0020               	movlb	0	; select bank0
  5364  0D31  01C3               	clrf	draw_wayout_right@i
  5365  0D32  3040               	movlw	64
  5366  0D33  0243               	subwf	draw_wayout_right@i,w
  5367  0D34  1803               	btfsc	3,0
  5368  0D35  2DEA               	goto	l3104
  5369  0D36                     l3058:	
  5370                           
  5371                           ;wayout.c: 9: if(i < 16) {
  5372  0D36  3010               	movlw	16
  5373  0D37  0243               	subwf	draw_wayout_right@i,w
  5374  0D38  1803               	skipnc
  5375  0D39  2D68               	goto	l3074
  5376                           
  5377                           ;wayout.c: 10: Write_Com(0x80+i);
  5378  0D3A  0843               	movf	draw_wayout_right@i,w
  5379  0D3B  3E80               	addlw	128
  5380  0D3C  00B0               	movwf	Write_Com@com
  5381  0D3D  3000               	movlw	0
  5382  0D3E  1803               	skipnc
  5383  0D3F  3001               	movlw	1
  5384  0D40  00B1               	movwf	Write_Com@com+1
  5385  0D41  319E  265E  318D   	fcall	_Write_Com
  5386                           
  5387                           ;wayout.c: 11: Write_Com(0x84);
  5388  0D44  3084               	movlw	132
  5389  0D45  0020               	movlb	0	; select bank0
  5390  0D46  00B0               	movwf	Write_Com@com
  5391  0D47  3000               	movlw	0
  5392  0D48  00B1               	movwf	Write_Com@com+1
  5393  0D49  319E  265E  318D   	fcall	_Write_Com
  5394                           
  5395                           ;wayout.c: 12: Write_Data(0x7f);
  5396  0D4C  307F               	movlw	127
  5397  0D4D  0020               	movlb	0	; select bank0
  5398  0D4E  00B0               	movwf	Write_Data@dat
  5399  0D4F  3000               	movlw	0
  5400  0D50  00B1               	movwf	Write_Data@dat+1
  5401  0D51  319E  266D  318D   	fcall	_Write_Data
  5402                           
  5403                           ;wayout.c: 13: for(j=1; j<8; j++) {
  5404  0D54  0020               	movlb	0	; select bank0
  5405  0D55  01C2               	clrf	draw_wayout_right@j
  5406  0D56  0AC2               	incf	draw_wayout_right@j,f
  5407  0D57                     L3:	
  5408  0D57  3008               	movlw	8
  5409  0D58  0242               	subwf	draw_wayout_right@j,w
  5410  0D59  1803               	btfsc	3,0
  5411  0D5A  2DE1               	goto	l3100
  5412                           
  5413                           ;wayout.c: 14: Write_Data(0xff);
  5414  0D5B  30FF               	movlw	255
  5415  0D5C  00B0               	movwf	Write_Data@dat
  5416  0D5D  3000               	movlw	0
  5417  0D5E  00B1               	movwf	Write_Data@dat+1
  5418  0D5F  319E  266D  318D   	fcall	_Write_Data
  5419  0D62  3001               	movlw	1
  5420  0D63  0020               	movlb	0	; select bank0
  5421  0D64  00C0               	movwf	??_draw_wayout_right
  5422  0D65  0840               	movf	??_draw_wayout_right,w
  5423  0D66  07C2               	addwf	draw_wayout_right@j,f
  5424  0D67  2D57               	goto	L3
  5425  0D68                     l3074:	
  5426                           ;wayout.c: 15: }
  5427                           ;wayout.c: 16: }
  5428                           
  5429                           
  5430                           ;wayout.c: 17: else if(i < 32 && i >= 16) {
  5431  0D68  3020               	movlw	32
  5432  0D69  0243               	subwf	draw_wayout_right@i,w
  5433  0D6A  1803               	skipnc
  5434  0D6B  2D8B               	goto	l3080
  5435  0D6C  3010               	movlw	16
  5436  0D6D  0243               	subwf	draw_wayout_right@i,w
  5437  0D6E  1C03               	skipc
  5438  0D6F  2D8B               	goto	l3080
  5439                           
  5440                           ;wayout.c: 18: Write_Com(0x80+i);
  5441  0D70  0843               	movf	draw_wayout_right@i,w
  5442  0D71  3E80               	addlw	128
  5443  0D72  00B0               	movwf	Write_Com@com
  5444  0D73  3000               	movlw	0
  5445  0D74  1803               	skipnc
  5446  0D75  3001               	movlw	1
  5447  0D76  00B1               	movwf	Write_Com@com+1
  5448  0D77  319E  265E  318D   	fcall	_Write_Com
  5449                           
  5450                           ;wayout.c: 19: Write_Com(0x84);
  5451  0D7A  3084               	movlw	132
  5452  0D7B  0020               	movlb	0	; select bank0
  5453  0D7C  00B0               	movwf	Write_Com@com
  5454  0D7D  3000               	movlw	0
  5455  0D7E  00B1               	movwf	Write_Com@com+1
  5456  0D7F  319E  265E  318D   	fcall	_Write_Com
  5457                           
  5458                           ;wayout.c: 20: Write_Data(0b01111000);
  5459  0D82  3078               	movlw	120
  5460  0D83  0020               	movlb	0	; select bank0
  5461  0D84  00B0               	movwf	Write_Data@dat
  5462  0D85  3000               	movlw	0
  5463  0D86  00B1               	movwf	Write_Data@dat+1
  5464  0D87  319E  266D  318D   	fcall	_Write_Data
  5465                           
  5466                           ;wayout.c: 21: }
  5467  0D8A  2DE1               	goto	l3100
  5468  0D8B                     l3080:	
  5469                           
  5470                           ;wayout.c: 22: else if(i < 48 && i >= 32) {
  5471  0D8B  3030               	movlw	48
  5472  0D8C  0020               	movlb	0	; select bank0
  5473  0D8D  0243               	subwf	draw_wayout_right@i,w
  5474  0D8E  1803               	skipnc
  5475  0D8F  2DAF               	goto	l3086
  5476  0D90  3020               	movlw	32
  5477  0D91  0243               	subwf	draw_wayout_right@i,w
  5478  0D92  1C03               	skipc
  5479  0D93  2DAF               	goto	l3086
  5480                           
  5481                           ;wayout.c: 23: Write_Com(0x80+(i-32));
  5482  0D94  0843               	movf	draw_wayout_right@i,w
  5483  0D95  3E60               	addlw	96
  5484  0D96  00B0               	movwf	Write_Com@com
  5485  0D97  3000               	movlw	0
  5486  0D98  1803               	skipnc
  5487  0D99  3001               	movlw	1
  5488  0D9A  00B1               	movwf	Write_Com@com+1
  5489  0D9B  319E  265E  318D   	fcall	_Write_Com
  5490                           
  5491                           ;wayout.c: 24: Write_Com(0x8C);
  5492  0D9E  308C               	movlw	140
  5493  0D9F  0020               	movlb	0	; select bank0
  5494  0DA0  00B0               	movwf	Write_Com@com
  5495  0DA1  3000               	movlw	0
  5496  0DA2  00B1               	movwf	Write_Com@com+1
  5497  0DA3  319E  265E  318D   	fcall	_Write_Com
  5498                           
  5499                           ;wayout.c: 25: Write_Data(0b01111000);
  5500  0DA6  3078               	movlw	120
  5501  0DA7  0020               	movlb	0	; select bank0
  5502  0DA8  00B0               	movwf	Write_Data@dat
  5503  0DA9  3000               	movlw	0
  5504  0DAA  00B1               	movwf	Write_Data@dat+1
  5505  0DAB  319E  266D  318D   	fcall	_Write_Data
  5506                           
  5507                           ;wayout.c: 26: }
  5508  0DAE  2DE1               	goto	l3100
  5509  0DAF                     l3086:	
  5510                           
  5511                           ;wayout.c: 27: else {
  5512                           ;wayout.c: 28: Write_Com(0x80+(i-32));
  5513  0DAF  0020               	movlb	0	; select bank0
  5514  0DB0  0843               	movf	draw_wayout_right@i,w
  5515  0DB1  3E60               	addlw	96
  5516  0DB2  00B0               	movwf	Write_Com@com
  5517  0DB3  3000               	movlw	0
  5518  0DB4  1803               	skipnc
  5519  0DB5  3001               	movlw	1
  5520  0DB6  00B1               	movwf	Write_Com@com+1
  5521  0DB7  319E  265E  318D   	fcall	_Write_Com
  5522                           
  5523                           ;wayout.c: 29: Write_Com(0x8C);
  5524  0DBA  308C               	movlw	140
  5525  0DBB  0020               	movlb	0	; select bank0
  5526  0DBC  00B0               	movwf	Write_Com@com
  5527  0DBD  3000               	movlw	0
  5528  0DBE  00B1               	movwf	Write_Com@com+1
  5529  0DBF  319E  265E  318D   	fcall	_Write_Com
  5530                           
  5531                           ;wayout.c: 30: Write_Data(0x7f);
  5532  0DC2  307F               	movlw	127
  5533  0DC3  0020               	movlb	0	; select bank0
  5534  0DC4  00B0               	movwf	Write_Data@dat
  5535  0DC5  3000               	movlw	0
  5536  0DC6  00B1               	movwf	Write_Data@dat+1
  5537  0DC7  319E  266D  318D   	fcall	_Write_Data
  5538                           
  5539                           ;wayout.c: 31: for(j=1; j<8; j++) {
  5540  0DCA  0020               	movlb	0	; select bank0
  5541  0DCB  01C2               	clrf	draw_wayout_right@j
  5542  0DCC  0AC2               	incf	draw_wayout_right@j,f
  5543  0DCD  3008               	movlw	8
  5544  0DCE  0242               	subwf	draw_wayout_right@j,w
  5545  0DCF  1803               	btfsc	3,0
  5546  0DD0  2DE1               	goto	l3100
  5547  0DD1                     l3094:	
  5548                           
  5549                           ;wayout.c: 32: Write_Data(0xff);
  5550  0DD1  30FF               	movlw	255
  5551  0DD2  00B0               	movwf	Write_Data@dat
  5552  0DD3  3000               	movlw	0
  5553  0DD4  00B1               	movwf	Write_Data@dat+1
  5554  0DD5  319E  266D  318D   	fcall	_Write_Data
  5555  0DD8  3001               	movlw	1
  5556  0DD9  0020               	movlb	0	; select bank0
  5557  0DDA  00C0               	movwf	??_draw_wayout_right
  5558  0DDB  0840               	movf	??_draw_wayout_right,w
  5559  0DDC  07C2               	addwf	draw_wayout_right@j,f
  5560  0DDD  3008               	movlw	8
  5561  0DDE  0242               	subwf	draw_wayout_right@j,w
  5562  0DDF  1C03               	skipc
  5563  0DE0  2DD1               	goto	l3094
  5564  0DE1                     l3100:	
  5565  0DE1  3001               	movlw	1
  5566  0DE2  0020               	movlb	0	; select bank0
  5567  0DE3  00C0               	movwf	??_draw_wayout_right
  5568  0DE4  0840               	movf	??_draw_wayout_right,w
  5569  0DE5  07C3               	addwf	draw_wayout_right@i,f
  5570  0DE6  3040               	movlw	64
  5571  0DE7  0243               	subwf	draw_wayout_right@i,w
  5572  0DE8  1C03               	skipc
  5573  0DE9  2D36               	goto	l3058
  5574  0DEA                     l3104:	
  5575                           
  5576                           ;wayout.c: 33: }
  5577                           ;wayout.c: 34: }
  5578                           ;wayout.c: 35: }
  5579                           ;wayout.c: 36: Write_Com(0x36);
  5580  0DEA  3036               	movlw	54
  5581  0DEB  00B0               	movwf	Write_Com@com
  5582  0DEC  3000               	movlw	0
  5583  0DED  00B1               	movwf	Write_Com@com+1
  5584  0DEE  319E  265E  318D   	fcall	_Write_Com
  5585                           
  5586                           ;wayout.c: 37: Write_Com(0x30);
  5587  0DF1  3030               	movlw	48
  5588  0DF2  0020               	movlb	0	; select bank0
  5589  0DF3  00B0               	movwf	Write_Com@com
  5590  0DF4  3000               	movlw	0
  5591  0DF5  00B1               	movwf	Write_Com@com+1
  5592  0DF6  319E  265E  318D   	fcall	_Write_Com
  5593                           
  5594                           ;wayout.c: 38: int2string(display_step,5,total_step);
  5595  0DF9  3005               	movlw	5
  5596  0DFA  0020               	movlb	0	; select bank0
  5597  0DFB  00C0               	movwf	??_draw_wayout_right
  5598  0DFC  0840               	movf	??_draw_wayout_right,w
  5599  0DFD  00AC               	movwf	int2string@begin
  5600  0DFE  0021               	movlb	1	; select bank1
  5601  0DFF  0824               	movf	_total_step^(0+128),w
  5602  0E00  0020               	movlb	0	; select bank0
  5603  0E01  00C1               	movwf	??_draw_wayout_right+1
  5604  0E02  0841               	movf	??_draw_wayout_right+1,w
  5605  0E03  00AD               	movwf	int2string@num
  5606  0E04  30B0               	movlw	(low (_display_step| (0+256)))& (0+255)
  5607  0E05  3191  21B7  318D   	fcall	_int2string
  5608                           
  5609                           ;wayout.c: 39: Display_Chars(2,display_step,5);
  5610  0E08  30B0               	movlw	low _display_step
  5611  0E09  0020               	movlb	0	; select bank0
  5612  0E0A  00B2               	movwf	Display_Chars@string
  5613  0E0B  3001               	movlw	high _display_step
  5614  0E0C  00B3               	movwf	Display_Chars@string+1
  5615  0E0D  3005               	movlw	5
  5616  0E0E  00C0               	movwf	??_draw_wayout_right
  5617  0E0F  0840               	movf	??_draw_wayout_right,w
  5618  0E10  00B4               	movwf	Display_Chars@y
  5619  0E11  3002               	movlw	2
  5620  0E12  3192  22ED  318D   	fcall	_Display_Chars
  5621                           
  5622                           ;wayout.c: 40: if(level == 1)
  5623  0E15  0020               	movlb	0	; select bank0
  5624  0E16  033E               	decf	draw_wayout_right@level,w
  5625  0E17  043F               	iorwf	draw_wayout_right@level+1,w
  5626  0E18  1D03               	btfss	3,2
  5627  0E19  2E26               	goto	l3114
  5628                           
  5629                           ;wayout.c: 41: Display_Chars(3," Min:01",5);
  5630  0E1A  305B               	movlw	low (STR_12| (0+32768))
  5631  0E1B  00B2               	movwf	Display_Chars@string
  5632  0E1C  3098               	movlw	high (STR_12| (0+32768))
  5633  0E1D  00B3               	movwf	Display_Chars@string+1
  5634  0E1E  3005               	movlw	5
  5635  0E1F  00C0               	movwf	??_draw_wayout_right
  5636  0E20  0840               	movf	??_draw_wayout_right,w
  5637  0E21  00B4               	movwf	Display_Chars@y
  5638  0E22  3003               	movlw	3
  5639  0E23  3192  22ED  318D   	fcall	_Display_Chars
  5640  0E26                     l3114:	
  5641                           
  5642                           ;wayout.c: 42: if(level == 2)
  5643  0E26  3002               	movlw	2
  5644  0E27  0020               	movlb	0	; select bank0
  5645  0E28  063E               	xorwf	draw_wayout_right@level,w
  5646  0E29  043F               	iorwf	draw_wayout_right@level+1,w
  5647  0E2A  1D03               	btfss	3,2
  5648  0E2B  2E38               	goto	l3118
  5649                           
  5650                           ;wayout.c: 43: Display_Chars(3," Min:02",5);
  5651  0E2C  306B               	movlw	low (STR_13| (0+32768))
  5652  0E2D  00B2               	movwf	Display_Chars@string
  5653  0E2E  3098               	movlw	high (STR_13| (0+32768))
  5654  0E2F  00B3               	movwf	Display_Chars@string+1
  5655  0E30  3005               	movlw	5
  5656  0E31  00C0               	movwf	??_draw_wayout_right
  5657  0E32  0840               	movf	??_draw_wayout_right,w
  5658  0E33  00B4               	movwf	Display_Chars@y
  5659  0E34  3003               	movlw	3
  5660  0E35  3192  22ED  318D   	fcall	_Display_Chars
  5661  0E38                     l3118:	
  5662                           
  5663                           ;wayout.c: 44: if(level == 3)
  5664  0E38  3003               	movlw	3
  5665  0E39  0020               	movlb	0	; select bank0
  5666  0E3A  063E               	xorwf	draw_wayout_right@level,w
  5667  0E3B  043F               	iorwf	draw_wayout_right@level+1,w
  5668  0E3C  1D03               	btfss	3,2
  5669  0E3D  2E4A               	goto	l3122
  5670                           
  5671                           ;wayout.c: 45: Display_Chars(3," Min:03",5);
  5672  0E3E  307B               	movlw	low (STR_14| (0+32768))
  5673  0E3F  00B2               	movwf	Display_Chars@string
  5674  0E40  3098               	movlw	high (STR_14| (0+32768))
  5675  0E41  00B3               	movwf	Display_Chars@string+1
  5676  0E42  3005               	movlw	5
  5677  0E43  00C0               	movwf	??_draw_wayout_right
  5678  0E44  0840               	movf	??_draw_wayout_right,w
  5679  0E45  00B4               	movwf	Display_Chars@y
  5680  0E46  3003               	movlw	3
  5681  0E47  3192  22ED  318D   	fcall	_Display_Chars
  5682  0E4A                     l3122:	
  5683                           
  5684                           ;wayout.c: 46: if(level == 4)
  5685  0E4A  3004               	movlw	4
  5686  0E4B  0020               	movlb	0	; select bank0
  5687  0E4C  063E               	xorwf	draw_wayout_right@level,w
  5688  0E4D  043F               	iorwf	draw_wayout_right@level+1,w
  5689  0E4E  1D03               	btfss	3,2
  5690  0E4F  2E5C               	goto	l3126
  5691                           
  5692                           ;wayout.c: 47: Display_Chars(3," Min:05",5);
  5693  0E50  309B               	movlw	low (STR_15| (0+32768))
  5694  0E51  00B2               	movwf	Display_Chars@string
  5695  0E52  3098               	movlw	high (STR_15| (0+32768))
  5696  0E53  00B3               	movwf	Display_Chars@string+1
  5697  0E54  3005               	movlw	5
  5698  0E55  00C0               	movwf	??_draw_wayout_right
  5699  0E56  0840               	movf	??_draw_wayout_right,w
  5700  0E57  00B4               	movwf	Display_Chars@y
  5701  0E58  3003               	movlw	3
  5702  0E59  3192  22ED  318D   	fcall	_Display_Chars
  5703  0E5C                     l3126:	
  5704                           
  5705                           ;wayout.c: 48: if(level == 5)
  5706  0E5C  3005               	movlw	5
  5707  0E5D  0020               	movlb	0	; select bank0
  5708  0E5E  063E               	xorwf	draw_wayout_right@level,w
  5709  0E5F  043F               	iorwf	draw_wayout_right@level+1,w
  5710  0E60  1D03               	btfss	3,2
  5711  0E61  2E6E               	goto	l3130
  5712                           
  5713                           ;wayout.c: 49: Display_Chars(3," Min:07",5);
  5714  0E62  30AB               	movlw	low (STR_16| (0+32768))
  5715  0E63  00B2               	movwf	Display_Chars@string
  5716  0E64  3098               	movlw	high (STR_16| (0+32768))
  5717  0E65  00B3               	movwf	Display_Chars@string+1
  5718  0E66  3005               	movlw	5
  5719  0E67  00C0               	movwf	??_draw_wayout_right
  5720  0E68  0840               	movf	??_draw_wayout_right,w
  5721  0E69  00B4               	movwf	Display_Chars@y
  5722  0E6A  3003               	movlw	3
  5723  0E6B  3192  22ED  318D   	fcall	_Display_Chars
  5724  0E6E                     l3130:	
  5725                           
  5726                           ;wayout.c: 50: if(level == 7)
  5727  0E6E  3007               	movlw	7
  5728  0E6F  0020               	movlb	0	; select bank0
  5729  0E70  063E               	xorwf	draw_wayout_right@level,w
  5730  0E71  043F               	iorwf	draw_wayout_right@level+1,w
  5731  0E72  1D03               	btfss	3,2
  5732  0E73  0008               	return
  5733                           
  5734                           ;wayout.c: 51: Display_Chars(3," Min:04",5);
  5735  0E74  308B               	movlw	low (STR_17| (0+32768))
  5736  0E75  00B2               	movwf	Display_Chars@string
  5737  0E76  3098               	movlw	high (STR_17| (0+32768))
  5738  0E77  00B3               	movwf	Display_Chars@string+1
  5739  0E78  3005               	movlw	5
  5740  0E79  00C0               	movwf	??_draw_wayout_right
  5741  0E7A  0840               	movf	??_draw_wayout_right,w
  5742  0E7B  00B4               	movwf	Display_Chars@y
  5743  0E7C  3003               	movlw	3
  5744  0E7D  3192  22ED         	fcall	_Display_Chars
  5745  0E7F  0008               	return
  5746  0E80                     __end_of_draw_wayout_right:	
  5747                           
  5748                           	psect	text10
  5749  0BE6                     __ptext10:	
  5750 ;; *************** function _choose_level2 *****************
  5751 ;; Defined at:
  5752 ;;		line 149 in file "wayout.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;		None
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  max_level3      1   46[BANK0 ] unsigned char 
  5757 ;;  step            1   45[BANK0 ] unsigned char 
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  1    wreg      unsigned char 
  5760 ;; Registers used:
  5761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;Total ram usage:        9 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    9
  5774 ;; This function calls:
  5775 ;;		_Clear_Screen
  5776 ;;		___awdiv
  5777 ;;		___awmod
  5778 ;;		_init_environment
  5779 ;;		_set_menu
  5780 ;;		_set_point
  5781 ;;		_wayout_display1
  5782 ;;		_wayout_display2
  5783 ;; This function is called by:
  5784 ;;		_run_game
  5785 ;;		_wayout
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           
  5790                           ;psect for function _choose_level2
  5791  0BE6                     _choose_level2:	
  5792                           
  5793                           ;wayout.c: 151: Clear_Screen(0x00);
  5794                           
  5795                           ;incstack = 0
  5796                           ; Regs used in _choose_level2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5797  0BE6  3000               	movlw	0
  5798  0BE7  0020               	movlb	0	; select bank0
  5799  0BE8  00B2               	movwf	Clear_Screen@value
  5800  0BE9  00B3               	movwf	Clear_Screen@value+1
  5801  0BEA  3193  239B  318B   	fcall	_Clear_Screen
  5802                           
  5803                           ;wayout.c: 152: temp_cursor.row=0;
  5804  0BED  0020               	movlb	0	; select bank0
  5805  0BEE  01E4               	clrf	_temp_cursor
  5806                           
  5807                           ;wayout.c: 153: temp_cursor.col=0;
  5808  0BEF  01E5               	clrf	_temp_cursor+1
  5809                           
  5810                           ;wayout.c: 154: char max_level3=8;
  5811  0BF0  3008               	movlw	8
  5812  0BF1  00C6               	movwf	??_choose_level2
  5813  0BF2  0846               	movf	??_choose_level2,w
  5814  0BF3  00CE               	movwf	choose_level2@max_level3
  5815                           
  5816                           ;wayout.c: 155: char step =2;
  5817  0BF4  3002               	movlw	2
  5818  0BF5  00C6               	movwf	??_choose_level2
  5819  0BF6  0846               	movf	??_choose_level2,w
  5820  0BF7  00CD               	movwf	choose_level2@step
  5821                           
  5822                           ;wayout.c: 156: set_point(temp_cursor.row,temp_cursor.col,screen[3]);
  5823  0BF8  0865               	movf	_temp_cursor+1,w
  5824  0BF9  00C6               	movwf	??_choose_level2
  5825  0BFA  0846               	movf	??_choose_level2,w
  5826  0BFB  00B9               	movwf	set_point@point_y
  5827  0BFC  3038               	movlw	(low ((_screen| (0+256)+24)))& (0+255)
  5828  0BFD  00C7               	movwf	??_choose_level2+1
  5829  0BFE  0847               	movf	??_choose_level2+1,w
  5830  0BFF  00BA               	movwf	set_point@value
  5831  0C00  0864               	movf	_temp_cursor,w
  5832  0C01  3196  267C  318B   	fcall	_set_point
  5833                           
  5834                           ;wayout.c: 157: wayout_display1();
  5835  0C04  3190  208A  318B   	fcall	_wayout_display1
  5836  0C07                     l3400:	
  5837                           ;wayout.c: 158: while(1)
  5838                           
  5839                           
  5840                           ;wayout.c: 159: {
  5841                           ;wayout.c: 160: if(key == 1)
  5842  0C07  0020               	movlb	0	; select bank0
  5843  0C08  0368               	decf	_key,w
  5844  0C09  1D03               	btfss	3,2
  5845  0C0A  2C79               	goto	l3424
  5846                           
  5847                           ;wayout.c: 161: {
  5848                           ;wayout.c: 162: key=0;
  5849  0C0B  01E8               	clrf	_key
  5850                           
  5851                           ;wayout.c: 163: set_point(temp_cursor.row,temp_cursor.col,screen[0]);
  5852  0C0C  0865               	movf	_temp_cursor+1,w
  5853  0C0D  00C6               	movwf	??_choose_level2
  5854  0C0E  0846               	movf	??_choose_level2,w
  5855  0C0F  00B9               	movwf	set_point@point_y
  5856  0C10  3020               	movlw	(low (_screen| (0+256)))& (0+255)
  5857  0C11  00C7               	movwf	??_choose_level2+1
  5858  0C12  0847               	movf	??_choose_level2+1,w
  5859  0C13  00BA               	movwf	set_point@value
  5860  0C14  0864               	movf	_temp_cursor,w
  5861  0C15  3196  267C  318B   	fcall	_set_point
  5862                           
  5863                           ;wayout.c: 164: if (temp_cursor.row == 0)
  5864  0C18  0020               	movlb	0	; select bank0
  5865  0C19  0864               	movf	_temp_cursor,w
  5866  0C1A  1D03               	btfss	3,2
  5867  0C1B  2C29               	goto	l3410
  5868                           
  5869                           ;wayout.c: 165: {
  5870                           ;wayout.c: 166: set_point(temp_cursor.row,temp_cursor.col,screen[3]);
  5871  0C1C  0865               	movf	_temp_cursor+1,w
  5872  0C1D  00C6               	movwf	??_choose_level2
  5873  0C1E  0846               	movf	??_choose_level2,w
  5874  0C1F  00B9               	movwf	set_point@point_y
  5875  0C20  3038               	movlw	(low ((_screen| (0+256)+24)))& (0+255)
  5876  0C21  00C7               	movwf	??_choose_level2+1
  5877  0C22  0847               	movf	??_choose_level2+1,w
  5878  0C23  00BA               	movwf	set_point@value
  5879  0C24  0864               	movf	_temp_cursor,w
  5880  0C25  3196  267C  318B   	fcall	_set_point
  5881                           
  5882                           ;wayout.c: 167: }
  5883  0C28  2D15               	goto	l3476
  5884  0C29                     l3410:	
  5885                           
  5886                           ;wayout.c: 168: else if(temp_cursor.row == 3)
  5887  0C29  3003               	movlw	3
  5888  0C2A  0020               	movlb	0	; select bank0
  5889  0C2B  0664               	xorwf	_temp_cursor,w
  5890  0C2C  1D03               	btfss	3,2
  5891  0C2D  2C49               	goto	l3420
  5892                           
  5893                           ;wayout.c: 169: {
  5894                           ;wayout.c: 170: temp_cursor.row = 4;
  5895  0C2E  3004               	movlw	4
  5896  0C2F  00C6               	movwf	??_choose_level2
  5897  0C30  0846               	movf	??_choose_level2,w
  5898  0C31  00E4               	movwf	_temp_cursor
  5899                           
  5900                           ;wayout.c: 171: Clear_Screen(0x00);
  5901  0C32  3000               	movlw	0
  5902  0C33  00B2               	movwf	Clear_Screen@value
  5903  0C34  00B3               	movwf	Clear_Screen@value+1
  5904  0C35  3193  239B  318B   	fcall	_Clear_Screen
  5905                           
  5906                           ;wayout.c: 172: wayout_display1();
  5907  0C38  3190  208A  318B   	fcall	_wayout_display1
  5908                           
  5909                           ;wayout.c: 173: set_point(temp_cursor.row,temp_cursor.col,screen[3]);
  5910  0C3B  0020               	movlb	0	; select bank0
  5911  0C3C  0865               	movf	_temp_cursor+1,w
  5912  0C3D  00C6               	movwf	??_choose_level2
  5913  0C3E  0846               	movf	??_choose_level2,w
  5914  0C3F  00B9               	movwf	set_point@point_y
  5915  0C40  3038               	movlw	(low ((_screen| (0+256)+24)))& (0+255)
  5916  0C41  00C7               	movwf	??_choose_level2+1
  5917  0C42  0847               	movf	??_choose_level2+1,w
  5918  0C43  00BA               	movwf	set_point@value
  5919  0C44  0864               	movf	_temp_cursor,w
  5920  0C45  3196  267C  318B   	fcall	_set_point
  5921                           
  5922                           ;wayout.c: 174: }
  5923  0C48  2D15               	goto	l3476
  5924  0C49                     l3420:	
  5925                           
  5926                           ;wayout.c: 175: else
  5927                           ;wayout.c: 176: {
  5928                           ;wayout.c: 177: temp_cursor.row=(temp_cursor.row+max_level3-step)%max_level3;
  5929  0C49  0020               	movlb	0	; select bank0
  5930  0C4A  084E               	movf	choose_level2@max_level3,w
  5931  0C4B  00C6               	movwf	??_choose_level2
  5932  0C4C  01C7               	clrf	??_choose_level2+1
  5933  0C4D  0846               	movf	??_choose_level2,w
  5934  0C4E  00A3               	movwf	___awmod@divisor
  5935  0C4F  0847               	movf	??_choose_level2+1,w
  5936  0C50  00A4               	movwf	___awmod@divisor+1
  5937  0C51  084D               	movf	choose_level2@step,w
  5938  0C52  00C8               	movwf	??_choose_level2+2
  5939  0C53  01C9               	clrf	??_choose_level2+3
  5940  0C54  09C8               	comf	??_choose_level2+2,f
  5941  0C55  09C9               	comf	??_choose_level2+3,f
  5942  0C56  0AC8               	incf	??_choose_level2+2,f
  5943  0C57  1903               	skipnz
  5944  0C58  0AC9               	incf	??_choose_level2+3,f
  5945  0C59  0864               	movf	_temp_cursor,w
  5946  0C5A  074E               	addwf	choose_level2@max_level3,w
  5947  0C5B  00CA               	movwf	??_choose_level2+4
  5948  0C5C  01CB               	clrf	??_choose_level2+5
  5949  0C5D  0DCB               	rlf	??_choose_level2+5,f
  5950  0C5E  0848               	movf	??_choose_level2+2,w
  5951  0C5F  074A               	addwf	??_choose_level2+4,w
  5952  0C60  00A5               	movwf	___awmod@dividend
  5953  0C61  0849               	movf	??_choose_level2+3,w
  5954  0C62  3D4B               	addwfc	??_choose_level2+5,w
  5955  0C63  00A6               	movwf	___awmod@dividend+1
  5956  0C64  3191  2171  318B   	fcall	___awmod
  5957  0C67  0020               	movlb	0	; select bank0
  5958  0C68  0823               	movf	?___awmod,w
  5959  0C69  00CC               	movwf	??_choose_level2+6
  5960  0C6A  084C               	movf	??_choose_level2+6,w
  5961  0C6B  00E4               	movwf	_temp_cursor
  5962                           
  5963                           ;wayout.c: 178: set_point(temp_cursor.row,temp_cursor.col,screen[3]);
  5964  0C6C  0865               	movf	_temp_cursor+1,w
  5965  0C6D  00C6               	movwf	??_choose_level2
  5966  0C6E  0846               	movf	??_choose_level2,w
  5967  0C6F  00B9               	movwf	set_point@point_y
  5968  0C70  3038               	movlw	(low ((_screen| (0+256)+24)))& (0+255)
  5969  0C71  00C7               	movwf	??_choose_level2+1
  5970  0C72  0847               	movf	??_choose_level2+1,w
  5971  0C73  00BA               	movwf	set_point@value
  5972  0C74  0864               	movf	_temp_cursor,w
  5973  0C75  3196  267C  318B   	fcall	_set_point
  5974                           
  5975                           ;wayout.c: 179: }
  5976                           ;wayout.c: 181: }
  5977  0C78  2D15               	goto	l3476
  5978  0C79                     l3424:	
  5979                           
  5980                           ;wayout.c: 182: else if(key == 2)
  5981  0C79  3002               	movlw	2
  5982  0C7A  0020               	movlb	0	; select bank0
  5983  0C7B  0668               	xorwf	_key,w
  5984  0C7C  1D03               	btfss	3,2
  5985  0C7D  2CDF               	goto	l3448
  5986                           
  5987                           ;wayout.c: 183: {
  5988                           ;wayout.c: 184: key=0;
  5989  0C7E  01E8               	clrf	_key
  5990                           
  5991                           ;wayout.c: 185: set_point(temp_cursor.row,temp_cursor.col,screen[0]);
  5992  0C7F  0865               	movf	_temp_cursor+1,w
  5993  0C80  00C6               	movwf	??_choose_level2
  5994  0C81  0846               	movf	??_choose_level2,w
  5995  0C82  00B9               	movwf	set_point@point_y
  5996  0C83  3020               	movlw	(low (_screen| (0+256)))& (0+255)
  5997  0C84  00C7               	movwf	??_choose_level2+1
  5998  0C85  0847               	movf	??_choose_level2+1,w
  5999  0C86  00BA               	movwf	set_point@value
  6000  0C87  0864               	movf	_temp_cursor,w
  6001  0C88  3196  267C  318B   	fcall	_set_point
  6002                           
  6003                           ;wayout.c: 186: if (temp_cursor.row == 4)
  6004  0C8B  3004               	movlw	4
  6005  0C8C  0020               	movlb	0	; select bank0
  6006  0C8D  0664               	xorwf	_temp_cursor,w
  6007  0C8E  1D03               	btfss	3,2
  6008  0C8F  2CAB               	goto	l3440
  6009                           
  6010                           ;wayout.c: 187: {
  6011                           ;wayout.c: 188: temp_cursor.row = 3;
  6012  0C90  3003               	movlw	3
  6013  0C91  00C6               	movwf	??_choose_level2
  6014  0C92  0846               	movf	??_choose_level2,w
  6015  0C93  00E4               	movwf	_temp_cursor
  6016                           
  6017                           ;wayout.c: 189: Clear_Screen(0x00);
  6018  0C94  3000               	movlw	0
  6019  0C95  00B2               	movwf	Clear_Screen@value
  6020  0C96  00B3               	movwf	Clear_Screen@value+1
  6021  0C97  3193  239B  318B   	fcall	_Clear_Screen
  6022                           
  6023                           ;wayout.c: 190: wayout_display2();
  6024  0C9A  3190  20BE  318B   	fcall	_wayout_display2
  6025                           
  6026                           ;wayout.c: 191: set_point(temp_cursor.row,temp_cursor.col,screen[3]);
  6027  0C9D  0020               	movlb	0	; select bank0
  6028  0C9E  0865               	movf	_temp_cursor+1,w
  6029  0C9F  00C6               	movwf	??_choose_level2
  6030  0CA0  0846               	movf	??_choose_level2,w
  6031  0CA1  00B9               	movwf	set_point@point_y
  6032  0CA2  3038               	movlw	(low ((_screen| (0+256)+24)))& (0+255)
  6033  0CA3  00C7               	movwf	??_choose_level2+1
  6034  0CA4  0847               	movf	??_choose_level2+1,w
  6035  0CA5  00BA               	movwf	set_point@value
  6036  0CA6  0864               	movf	_temp_cursor,w
  6037  0CA7  3196  267C  318B   	fcall	_set_point
  6038                           
  6039                           ;wayout.c: 192: }
  6040  0CAA  2D15               	goto	l3476
  6041  0CAB                     l3440:	
  6042                           
  6043                           ;wayout.c: 193: else if(temp_cursor.row == 7)
  6044  0CAB  3007               	movlw	7
  6045  0CAC  0020               	movlb	0	; select bank0
  6046  0CAD  0664               	xorwf	_temp_cursor,w
  6047  0CAE  1D03               	btfss	3,2
  6048  0CAF  2CBD               	goto	l3444
  6049                           
  6050                           ;wayout.c: 194: {
  6051                           ;wayout.c: 195: set_point(temp_cursor.row,temp_cursor.col,screen[3]);
  6052  0CB0  0865               	movf	_temp_cursor+1,w
  6053  0CB1  00C6               	movwf	??_choose_level2
  6054  0CB2  0846               	movf	??_choose_level2,w
  6055  0CB3  00B9               	movwf	set_point@point_y
  6056  0CB4  3038               	movlw	(low ((_screen| (0+256)+24)))& (0+255)
  6057  0CB5  00C7               	movwf	??_choose_level2+1
  6058  0CB6  0847               	movf	??_choose_level2+1,w
  6059  0CB7  00BA               	movwf	set_point@value
  6060  0CB8  0864               	movf	_temp_cursor,w
  6061  0CB9  3196  267C  318B   	fcall	_set_point
  6062                           
  6063                           ;wayout.c: 196: }
  6064  0CBC  2D15               	goto	l3476
  6065  0CBD                     l3444:	
  6066                           
  6067                           ;wayout.c: 197: else
  6068                           ;wayout.c: 198: {
  6069                           ;wayout.c: 199: temp_cursor.row=(temp_cursor.row+step)%max_level3;
  6070  0CBD  0020               	movlb	0	; select bank0
  6071  0CBE  084E               	movf	choose_level2@max_level3,w
  6072  0CBF  00C6               	movwf	??_choose_level2
  6073  0CC0  01C7               	clrf	??_choose_level2+1
  6074  0CC1  0846               	movf	??_choose_level2,w
  6075  0CC2  00A3               	movwf	___awmod@divisor
  6076  0CC3  0847               	movf	??_choose_level2+1,w
  6077  0CC4  00A4               	movwf	___awmod@divisor+1
  6078  0CC5  0864               	movf	_temp_cursor,w
  6079  0CC6  074D               	addwf	choose_level2@step,w
  6080  0CC7  00A5               	movwf	___awmod@dividend
  6081  0CC8  01A6               	clrf	___awmod@dividend+1
  6082  0CC9  0DA6               	rlf	___awmod@dividend+1,f
  6083  0CCA  3191  2171  318B   	fcall	___awmod
  6084  0CCD  0020               	movlb	0	; select bank0
  6085  0CCE  0823               	movf	?___awmod,w
  6086  0CCF  00C8               	movwf	??_choose_level2+2
  6087  0CD0  0848               	movf	??_choose_level2+2,w
  6088  0CD1  00E4               	movwf	_temp_cursor
  6089                           
  6090                           ;wayout.c: 200: set_point(temp_cursor.row,temp_cursor.col,screen[3]);
  6091  0CD2  0865               	movf	_temp_cursor+1,w
  6092  0CD3  00C6               	movwf	??_choose_level2
  6093  0CD4  0846               	movf	??_choose_level2,w
  6094  0CD5  00B9               	movwf	set_point@point_y
  6095  0CD6  3038               	movlw	(low ((_screen| (0+256)+24)))& (0+255)
  6096  0CD7  00C7               	movwf	??_choose_level2+1
  6097  0CD8  0847               	movf	??_choose_level2+1,w
  6098  0CD9  00BA               	movwf	set_point@value
  6099  0CDA  0864               	movf	_temp_cursor,w
  6100  0CDB  3196  267C  318B   	fcall	_set_point
  6101                           
  6102                           ;wayout.c: 201: }
  6103                           ;wayout.c: 202: }
  6104  0CDE  2D15               	goto	l3476
  6105  0CDF                     l3448:	
  6106                           
  6107                           ;wayout.c: 203: else if(key == 5)
  6108  0CDF  3005               	movlw	5
  6109  0CE0  0020               	movlb	0	; select bank0
  6110  0CE1  0668               	xorwf	_key,w
  6111  0CE2  1D03               	btfss	3,2
  6112  0CE3  2D09               	goto	l3464
  6113                           
  6114                           ;wayout.c: 204: {
  6115                           ;wayout.c: 205: key=0;
  6116  0CE4  01E8               	clrf	_key
  6117                           
  6118                           ;wayout.c: 206: if (temp_cursor.row %2 == 0)
  6119  0CE5  1864               	btfsc	_temp_cursor,0
  6120  0CE6  2CF8               	goto	l3460
  6121                           
  6122                           ;wayout.c: 207: {
  6123                           ;wayout.c: 208: return ((temp_cursor.row )/2+1);
  6124  0CE7  3002               	movlw	2
  6125  0CE8  00A3               	movwf	___awdiv@divisor
  6126  0CE9  3000               	movlw	0
  6127  0CEA  00A4               	movwf	___awdiv@divisor+1
  6128  0CEB  0864               	movf	_temp_cursor,w
  6129  0CEC  00C6               	movwf	??_choose_level2
  6130  0CED  01C7               	clrf	??_choose_level2+1
  6131  0CEE  0846               	movf	??_choose_level2,w
  6132  0CEF  00A5               	movwf	___awdiv@dividend
  6133  0CF0  0847               	movf	??_choose_level2+1,w
  6134  0CF1  00A6               	movwf	___awdiv@dividend+1
  6135  0CF2  3192  229B         	fcall	___awdiv
  6136  0CF4  0020               	movlb	0	; select bank0
  6137  0CF5  0823               	movf	?___awdiv,w
  6138  0CF6  3E01               	addlw	1
  6139  0CF7  0008               	return
  6140  0CF8                     l3460:	
  6141                           ;wayout.c: 209: }
  6142                           
  6143                           
  6144                           ;wayout.c: 210: else
  6145                           ;wayout.c: 211: {
  6146                           ;wayout.c: 212: return ((temp_cursor.row +3)/2+1);
  6147  0CF8  3002               	movlw	2
  6148  0CF9  00A3               	movwf	___awdiv@divisor
  6149  0CFA  3000               	movlw	0
  6150  0CFB  00A4               	movwf	___awdiv@divisor+1
  6151  0CFC  0864               	movf	_temp_cursor,w
  6152  0CFD  3E03               	addlw	3
  6153  0CFE  00A5               	movwf	___awdiv@dividend
  6154  0CFF  3000               	movlw	0
  6155  0D00  1803               	skipnc
  6156  0D01  3001               	movlw	1
  6157  0D02  00A6               	movwf	___awdiv@dividend+1
  6158  0D03  3192  229B         	fcall	___awdiv
  6159  0D05  0020               	movlb	0	; select bank0
  6160  0D06  0823               	movf	?___awdiv,w
  6161  0D07  3E01               	addlw	1
  6162  0D08  0008               	return
  6163  0D09                     l3464:	
  6164                           ;wayout.c: 213: }
  6165                           ;wayout.c: 214: }
  6166                           
  6167                           
  6168                           ;wayout.c: 215: else if (key == 6)
  6169  0D09  3006               	movlw	6
  6170  0D0A  0668               	xorwf	_key,w
  6171  0D0B  1D03               	btfss	3,2
  6172  0D0C  2D15               	goto	l3476
  6173                           
  6174                           ;wayout.c: 216: {
  6175                           ;wayout.c: 217: key=0;
  6176  0D0D  01E8               	clrf	_key
  6177                           
  6178                           ;wayout.c: 218: init_environment();
  6179  0D0E  319E  269E  318B   	fcall	_init_environment
  6180                           
  6181                           ;wayout.c: 219: set_menu();
  6182  0D11  319F  276B         	fcall	_set_menu
  6183                           
  6184                           ;wayout.c: 220: return 0;
  6185  0D13  3000               	movlw	0
  6186  0D14  0008               	return
  6187  0D15                     l3476:	
  6188                           
  6189                           ;wayout.c: 221: }
  6190                           ;wayout.c: 222: key=0;
  6191  0D15  0020               	movlb	0	; select bank0
  6192  0D16  01E8               	clrf	_key
  6193  0D17  2C07               	goto	l3400
  6194  0D18                     __end_of_choose_level2:	
  6195                           
  6196                           	psect	text11
  6197  10BE                     __ptext11:	
  6198 ;; *************** function _wayout_display2 *****************
  6199 ;; Defined at:
  6200 ;;		line 141 in file "wayout.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;		None
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;		None
  6205 ;; Return value:  Size  Location     Type
  6206 ;;                  1    wreg      void 
  6207 ;; Registers used:
  6208 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6209 ;; Tracked objects:
  6210 ;;		On entry : 0/0
  6211 ;;		On exit  : 0/0
  6212 ;;		Unchanged: 0/0
  6213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;Total ram usage:        1 bytes
  6219 ;; Hardware stack levels used:    1
  6220 ;; Hardware stack levels required when called:    8
  6221 ;; This function calls:
  6222 ;;		_Display_Chars
  6223 ;; This function is called by:
  6224 ;;		_choose_level2
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           
  6229                           ;psect for function _wayout_display2
  6230  10BE                     _wayout_display2:	
  6231                           
  6232                           ;wayout.c: 143: Display_Chars(1, " ...",7);
  6233                           
  6234                           ;incstack = 0
  6235                           ; Regs used in _wayout_display2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6236  10BE  30CA               	movlw	low (STR_22| (0+32768))
  6237  10BF  0020               	movlb	0	; select bank0
  6238  10C0  00B2               	movwf	Display_Chars@string
  6239  10C1  3098               	movlw	high (STR_22| (0+32768))
  6240  10C2  00B3               	movwf	Display_Chars@string+1
  6241  10C3  3007               	movlw	7
  6242  10C4  00BE               	movwf	??_wayout_display2
  6243  10C5  083E               	movf	??_wayout_display2,w
  6244  10C6  00B4               	movwf	Display_Chars@y
  6245  10C7  3001               	movlw	1
  6246  10C8  3192  22ED  3190   	fcall	_Display_Chars
  6247                           
  6248                           ;wayout.c: 144: Display_Chars(2, "level 4",3);
  6249  10CB  3083               	movlw	low (STR_23| (0+32768))
  6250  10CC  0020               	movlb	0	; select bank0
  6251  10CD  00B2               	movwf	Display_Chars@string
  6252  10CE  3098               	movlw	high (STR_23| (0+32768))
  6253  10CF  00B3               	movwf	Display_Chars@string+1
  6254  10D0  3003               	movlw	3
  6255  10D1  00BE               	movwf	??_wayout_display2
  6256  10D2  083E               	movf	??_wayout_display2,w
  6257  10D3  00B4               	movwf	Display_Chars@y
  6258  10D4  3002               	movlw	2
  6259  10D5  3192  22ED  3190   	fcall	_Display_Chars
  6260                           
  6261                           ;wayout.c: 145: Display_Chars(3, "level 5",3);
  6262  10D8  3093               	movlw	low (STR_24| (0+32768))
  6263  10D9  0020               	movlb	0	; select bank0
  6264  10DA  00B2               	movwf	Display_Chars@string
  6265  10DB  3098               	movlw	high (STR_24| (0+32768))
  6266  10DC  00B3               	movwf	Display_Chars@string+1
  6267  10DD  3003               	movlw	3
  6268  10DE  00BE               	movwf	??_wayout_display2
  6269  10DF  083E               	movf	??_wayout_display2,w
  6270  10E0  00B4               	movwf	Display_Chars@y
  6271  10E1  3003               	movlw	3
  6272  10E2  3192  22ED  3190   	fcall	_Display_Chars
  6273                           
  6274                           ;wayout.c: 146: Display_Chars(4, "level 6",3);
  6275  10E5  30A3               	movlw	low (STR_25| (0+32768))
  6276  10E6  0020               	movlb	0	; select bank0
  6277  10E7  00B2               	movwf	Display_Chars@string
  6278  10E8  3098               	movlw	high (STR_25| (0+32768))
  6279  10E9  00B3               	movwf	Display_Chars@string+1
  6280  10EA  3003               	movlw	3
  6281  10EB  00BE               	movwf	??_wayout_display2
  6282  10EC  083E               	movf	??_wayout_display2,w
  6283  10ED  00B4               	movwf	Display_Chars@y
  6284  10EE  3004               	movlw	4
  6285  10EF  3192  22ED         	fcall	_Display_Chars
  6286  10F1  0008               	return
  6287  10F2                     __end_of_wayout_display2:	
  6288                           
  6289                           	psect	text12
  6290  108A                     __ptext12:	
  6291 ;; *************** function _wayout_display1 *****************
  6292 ;; Defined at:
  6293 ;;		line 134 in file "wayout.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;		None
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;		None
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      void 
  6300 ;; Registers used:
  6301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;Total ram usage:        1 bytes
  6312 ;; Hardware stack levels used:    1
  6313 ;; Hardware stack levels required when called:    8
  6314 ;; This function calls:
  6315 ;;		_Display_Chars
  6316 ;; This function is called by:
  6317 ;;		_choose_level2
  6318 ;; This function uses a non-reentrant model
  6319 ;;
  6320                           
  6321                           
  6322                           ;psect for function _wayout_display1
  6323  108A                     _wayout_display1:	
  6324                           
  6325                           ;wayout.c: 136: Display_Chars(1, "level 1",3);
  6326                           
  6327                           ;incstack = 0
  6328                           ; Regs used in _wayout_display1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6329  108A  3053               	movlw	low (STR_18| (0+32768))
  6330  108B  0020               	movlb	0	; select bank0
  6331  108C  00B2               	movwf	Display_Chars@string
  6332  108D  3098               	movlw	high (STR_18| (0+32768))
  6333  108E  00B3               	movwf	Display_Chars@string+1
  6334  108F  3003               	movlw	3
  6335  1090  00BE               	movwf	??_wayout_display1
  6336  1091  083E               	movf	??_wayout_display1,w
  6337  1092  00B4               	movwf	Display_Chars@y
  6338  1093  3001               	movlw	1
  6339  1094  3192  22ED  3190   	fcall	_Display_Chars
  6340                           
  6341                           ;wayout.c: 137: Display_Chars(2, "level 2",3);
  6342  1097  3063               	movlw	low (STR_19| (0+32768))
  6343  1098  0020               	movlb	0	; select bank0
  6344  1099  00B2               	movwf	Display_Chars@string
  6345  109A  3098               	movlw	high (STR_19| (0+32768))
  6346  109B  00B3               	movwf	Display_Chars@string+1
  6347  109C  3003               	movlw	3
  6348  109D  00BE               	movwf	??_wayout_display1
  6349  109E  083E               	movf	??_wayout_display1,w
  6350  109F  00B4               	movwf	Display_Chars@y
  6351  10A0  3002               	movlw	2
  6352  10A1  3192  22ED  3190   	fcall	_Display_Chars
  6353                           
  6354                           ;wayout.c: 138: Display_Chars(3, "level 3",3);
  6355  10A4  3073               	movlw	low (STR_20| (0+32768))
  6356  10A5  0020               	movlb	0	; select bank0
  6357  10A6  00B2               	movwf	Display_Chars@string
  6358  10A7  3098               	movlw	high (STR_20| (0+32768))
  6359  10A8  00B3               	movwf	Display_Chars@string+1
  6360  10A9  3003               	movlw	3
  6361  10AA  00BE               	movwf	??_wayout_display1
  6362  10AB  083E               	movf	??_wayout_display1,w
  6363  10AC  00B4               	movwf	Display_Chars@y
  6364  10AD  3003               	movlw	3
  6365  10AE  3192  22ED  3190   	fcall	_Display_Chars
  6366                           
  6367                           ;wayout.c: 139: Display_Chars(4, "...",7);
  6368  10B1  30CB               	movlw	low ((STR_22+1)| (0+32768))
  6369  10B2  0020               	movlb	0	; select bank0
  6370  10B3  00B2               	movwf	Display_Chars@string
  6371  10B4  3098               	movlw	high ((STR_22+1)| (0+32768))
  6372  10B5  00B3               	movwf	Display_Chars@string+1
  6373  10B6  3007               	movlw	7
  6374  10B7  00BE               	movwf	??_wayout_display1
  6375  10B8  083E               	movf	??_wayout_display1,w
  6376  10B9  00B4               	movwf	Display_Chars@y
  6377  10BA  3004               	movlw	4
  6378  10BB  3192  22ED         	fcall	_Display_Chars
  6379  10BD  0008               	return
  6380  10BE                     __end_of_wayout_display1:	
  6381                           
  6382                           	psect	text13
  6383  0807                     __ptext13:	
  6384 ;; *************** function _choose *****************
  6385 ;; Defined at:
  6386 ;;		line 78 in file "wayout.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;  i               2   48[BANK0 ] int 
  6389 ;;  j               2   50[BANK0 ] int 
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;		None
  6392 ;; Return value:  Size  Location     Type
  6393 ;;                  1    wreg      unsigned char 
  6394 ;; Registers used:
  6395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6396 ;; Tracked objects:
  6397 ;;		On entry : 0/0
  6398 ;;		On exit  : 0/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6401 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;Total ram usage:       11 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; Hardware stack levels required when called:    9
  6408 ;; This function calls:
  6409 ;;		_change_near
  6410 ;;		_if_in_table
  6411 ;;		_set_point
  6412 ;; This function is called by:
  6413 ;;		_wayout
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           
  6418                           ;psect for function _choose
  6419  0807                     _choose:	
  6420                           
  6421                           ;wayout.c: 79: if(!if_in_table(i, j))
  6422                           
  6423                           ;incstack = 0
  6424                           ; Regs used in _choose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6425  0807  0020               	movlb	0	; select bank0
  6426  0808  0851               	movf	choose@i+1,w
  6427  0809  00A4               	movwf	if_in_table@i+1
  6428  080A  0850               	movf	choose@i,w
  6429  080B  00A3               	movwf	if_in_table@i
  6430  080C  0853               	movf	choose@j+1,w
  6431  080D  00A6               	movwf	if_in_table@j+1
  6432  080E  0852               	movf	choose@j,w
  6433  080F  00A5               	movwf	if_in_table@j
  6434  0810  3187  27E0  3188   	fcall	_if_in_table
  6435  0813  3A00               	xorlw	0
  6436  0814  1D03               	skipz
  6437  0815  2818               	goto	l3520
  6438                           
  6439                           ;wayout.c: 80: return 0;
  6440  0816  3000               	movlw	0
  6441  0817  0008               	return
  6442  0818                     l3520:	
  6443                           
  6444                           ;wayout.c: 81: else{
  6445                           ;wayout.c: 82: if((table[i][j] & 0x03) == 1 || (table[i][j] & 0x03) == 2){
  6446  0818  0020               	movlb	0	; select bank0
  6447  0819  0850               	movf	choose@i,w
  6448  081A  00D4               	movwf	??_choose
  6449  081B  3003               	movlw	3
  6450  081C                     u4565:	
  6451  081C  35D4               	lslf	??_choose,f
  6452  081D  0B89               	decfsz	9,f
  6453  081E  281C               	goto	u4565
  6454  081F  30A5               	movlw	(low (_table| 0))& (0+255)
  6455  0820  0754               	addwf	??_choose,w
  6456  0821  00D5               	movwf	??_choose+1
  6457  0822  0852               	movf	choose@j,w
  6458  0823  0755               	addwf	??_choose+1,w
  6459  0824  00D6               	movwf	??_choose+2
  6460  0825  0856               	movf	??_choose+2,w
  6461  0826  0086               	movwf	6
  6462  0827  0187               	clrf	7
  6463  0828  3003               	movlw	3
  6464  0829  0501               	andwf	1,w
  6465  082A  00D7               	movwf	??_choose+3
  6466  082B  0357               	decf	??_choose+3,w
  6467  082C  1903               	btfsc	3,2
  6468  082D  2844               	goto	l3524
  6469  082E  0850               	movf	choose@i,w
  6470  082F  00D4               	movwf	??_choose
  6471  0830  3003               	movlw	3
  6472  0831                     u4585:	
  6473  0831  35D4               	lslf	??_choose,f
  6474  0832  0B89               	decfsz	9,f
  6475  0833  2831               	goto	u4585
  6476  0834  30A5               	movlw	(low (_table| 0))& (0+255)
  6477  0835  0754               	addwf	??_choose,w
  6478  0836  00D5               	movwf	??_choose+1
  6479  0837  0852               	movf	choose@j,w
  6480  0838  0755               	addwf	??_choose+1,w
  6481  0839  00D6               	movwf	??_choose+2
  6482  083A  0856               	movf	??_choose+2,w
  6483  083B  0086               	movwf	6
  6484  083C  0187               	clrf	7
  6485  083D  3003               	movlw	3
  6486  083E  0501               	andwf	1,w
  6487  083F  00D7               	movwf	??_choose+3
  6488  0840  3002               	movlw	2
  6489  0841  0657               	xorwf	??_choose+3,w
  6490  0842  1D03               	btfss	3,2
  6491  0843  28C8               	goto	l3542
  6492  0844                     l3524:	
  6493                           
  6494                           ;wayout.c: 84: table[i][j] = (3 - (table[i][j] & 0x03)) | 0x08;
  6495  0844  0850               	movf	choose@i,w
  6496  0845  00D4               	movwf	??_choose
  6497  0846  3003               	movlw	3
  6498  0847                     u4605:	
  6499  0847  35D4               	lslf	??_choose,f
  6500  0848  0B89               	decfsz	9,f
  6501  0849  2847               	goto	u4605
  6502  084A  30A5               	movlw	(low (_table| 0))& (0+255)
  6503  084B  0754               	addwf	??_choose,w
  6504  084C  00D5               	movwf	??_choose+1
  6505  084D  0852               	movf	choose@j,w
  6506  084E  0755               	addwf	??_choose+1,w
  6507  084F  00D6               	movwf	??_choose+2
  6508  0850  0856               	movf	??_choose+2,w
  6509  0851  0086               	movwf	6
  6510  0852  0187               	clrf	7
  6511  0853  0801               	movf	1,w
  6512  0854  3903               	andlw	3
  6513  0855  3AFF               	xorlw	255
  6514  0856  3E01               	addlw	1
  6515  0857  3E03               	addlw	3
  6516  0858  3808               	iorlw	8
  6517  0859  00D7               	movwf	??_choose+3
  6518  085A  0850               	movf	choose@i,w
  6519  085B  00D8               	movwf	??_choose+4
  6520  085C  3003               	movlw	3
  6521  085D                     u4615:	
  6522  085D  35D8               	lslf	??_choose+4,f
  6523  085E  0B89               	decfsz	9,f
  6524  085F  285D               	goto	u4615
  6525  0860  30A5               	movlw	(low (_table| 0))& (0+255)
  6526  0861  0758               	addwf	??_choose+4,w
  6527  0862  00D9               	movwf	??_choose+5
  6528  0863  0852               	movf	choose@j,w
  6529  0864  0759               	addwf	??_choose+5,w
  6530  0865  00DA               	movwf	??_choose+6
  6531  0866  085A               	movf	??_choose+6,w
  6532  0867  0086               	movwf	6
  6533  0868  0187               	clrf	7
  6534  0869  0857               	movf	??_choose+3,w
  6535  086A  0081               	movwf	1
  6536                           
  6537                           ;wayout.c: 85: set_point(i,j,screen[table[i][j]-5]);
  6538  086B  0852               	movf	choose@j,w
  6539  086C  00D4               	movwf	??_choose
  6540  086D  0854               	movf	??_choose,w
  6541  086E  00B9               	movwf	set_point@point_y
  6542  086F  0850               	movf	choose@i,w
  6543  0870  00D5               	movwf	??_choose+1
  6544  0871  3003               	movlw	3
  6545  0872                     u4625:	
  6546  0872  35D5               	lslf	??_choose+1,f
  6547  0873  0B89               	decfsz	9,f
  6548  0874  2872               	goto	u4625
  6549  0875  30A5               	movlw	(low (_table| 0))& (0+255)
  6550  0876  0755               	addwf	??_choose+1,w
  6551  0877  00D6               	movwf	??_choose+2
  6552  0878  0852               	movf	choose@j,w
  6553  0879  0756               	addwf	??_choose+2,w
  6554  087A  00D7               	movwf	??_choose+3
  6555  087B  0857               	movf	??_choose+3,w
  6556  087C  0086               	movwf	6
  6557  087D  0187               	clrf	7
  6558  087E  0801               	movf	1,w
  6559  087F  00D8               	movwf	??_choose+4
  6560  0880  3002               	movlw	2
  6561  0881                     u4635:	
  6562  0881  35D8               	lslf	??_choose+4,f
  6563  0882  3EFF               	addlw	-1
  6564  0883  1D03               	skipz
  6565  0884  2881               	goto	u4635
  6566  0885  3558               	lslf	??_choose+4,w
  6567  0886  3ED8               	addlw	216
  6568  0887  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  6569  0888  00D9               	movwf	??_choose+5
  6570  0889  0859               	movf	??_choose+5,w
  6571  088A  00BA               	movwf	set_point@value
  6572  088B  0850               	movf	choose@i,w
  6573  088C  3196  267C  3188   	fcall	_set_point
  6574                           
  6575                           ;wayout.c: 86: change_near(i-1, j);
  6576  088F  0020               	movlb	0	; select bank0
  6577  0890  0850               	movf	choose@i,w
  6578  0891  3EFF               	addlw	255
  6579  0892  00C5               	movwf	change_near@k
  6580  0893  30FF               	movlw	255
  6581  0894  3D51               	addwfc	choose@i+1,w
  6582  0895  00C6               	movwf	change_near@k+1
  6583  0896  0853               	movf	choose@j+1,w
  6584  0897  00C8               	movwf	change_near@l+1
  6585  0898  0852               	movf	choose@j,w
  6586  0899  00C7               	movwf	change_near@l
  6587  089A  3195  25EE  3188   	fcall	_change_near
  6588                           
  6589                           ;wayout.c: 87: change_near(i+1, j);
  6590  089D  0020               	movlb	0	; select bank0
  6591  089E  0850               	movf	choose@i,w
  6592  089F  3E01               	addlw	1
  6593  08A0  00C5               	movwf	change_near@k
  6594  08A1  3000               	movlw	0
  6595  08A2  3D51               	addwfc	choose@i+1,w
  6596  08A3  00C6               	movwf	change_near@k+1
  6597  08A4  0853               	movf	choose@j+1,w
  6598  08A5  00C8               	movwf	change_near@l+1
  6599  08A6  0852               	movf	choose@j,w
  6600  08A7  00C7               	movwf	change_near@l
  6601  08A8  3195  25EE  3188   	fcall	_change_near
  6602                           
  6603                           ;wayout.c: 88: change_near(i, j-1);
  6604  08AB  0020               	movlb	0	; select bank0
  6605  08AC  0851               	movf	choose@i+1,w
  6606  08AD  00C6               	movwf	change_near@k+1
  6607  08AE  0850               	movf	choose@i,w
  6608  08AF  00C5               	movwf	change_near@k
  6609  08B0  0852               	movf	choose@j,w
  6610  08B1  3EFF               	addlw	255
  6611  08B2  00C7               	movwf	change_near@l
  6612  08B3  30FF               	movlw	255
  6613  08B4  3D53               	addwfc	choose@j+1,w
  6614  08B5  00C8               	movwf	change_near@l+1
  6615  08B6  3195  25EE  3188   	fcall	_change_near
  6616                           
  6617                           ;wayout.c: 89: change_near(i, j+1);
  6618  08B9  0020               	movlb	0	; select bank0
  6619  08BA  0851               	movf	choose@i+1,w
  6620  08BB  00C6               	movwf	change_near@k+1
  6621  08BC  0850               	movf	choose@i,w
  6622  08BD  00C5               	movwf	change_near@k
  6623  08BE  0852               	movf	choose@j,w
  6624  08BF  3E01               	addlw	1
  6625  08C0  00C7               	movwf	change_near@l
  6626  08C1  3000               	movlw	0
  6627  08C2  3D53               	addwfc	choose@j+1,w
  6628  08C3  00C8               	movwf	change_near@l+1
  6629  08C4  3195  25EE         	fcall	_change_near
  6630                           
  6631                           ;wayout.c: 90: return 1;
  6632  08C6  3001               	movlw	1
  6633                           
  6634                           ;wayout.c: 91: }
  6635  08C7  0008               	return
  6636  08C8                     l3542:	
  6637                           
  6638                           ;wayout.c: 92: else{
  6639                           ;wayout.c: 93: return 0;
  6640  08C8  3000               	movlw	0
  6641  08C9  0008               	return
  6642  08CA                     __end_of_choose:	
  6643                           
  6644                           	psect	text14
  6645  15EE                     __ptext14:	
  6646 ;; *************** function _change_near *****************
  6647 ;; Defined at:
  6648 ;;		line 63 in file "wayout.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;  k               2   37[BANK0 ] int 
  6651 ;;  l               2   39[BANK0 ] int 
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;		None
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  1    wreg      void 
  6656 ;; Registers used:
  6657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6663 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;Total ram usage:       11 bytes
  6668 ;; Hardware stack levels used:    1
  6669 ;; Hardware stack levels required when called:    8
  6670 ;; This function calls:
  6671 ;;		_if_in_table
  6672 ;;		_set_point
  6673 ;; This function is called by:
  6674 ;;		_choose
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           
  6679                           ;psect for function _change_near
  6680  15EE                     _change_near:	
  6681                           
  6682                           ;wayout.c: 64: if(if_in_table(k, l)){
  6683                           
  6684                           ;incstack = 0
  6685                           ; Regs used in _change_near: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6686  15EE  0020               	movlb	0	; select bank0
  6687  15EF  0846               	movf	change_near@k+1,w
  6688  15F0  00A4               	movwf	if_in_table@i+1
  6689  15F1  0845               	movf	change_near@k,w
  6690  15F2  00A3               	movwf	if_in_table@i
  6691  15F3  0848               	movf	change_near@l+1,w
  6692  15F4  00A6               	movwf	if_in_table@j+1
  6693  15F5  0847               	movf	change_near@l,w
  6694  15F6  00A5               	movwf	if_in_table@j
  6695  15F7  3187  27E0  3195   	fcall	_if_in_table
  6696  15FA  3A00               	xorlw	0
  6697  15FB  1903               	skipnz
  6698  15FC  0008               	return
  6699                           
  6700                           ;wayout.c: 65: if(table[k][l] == 0)
  6701  15FD  0020               	movlb	0	; select bank0
  6702  15FE  0845               	movf	change_near@k,w
  6703  15FF  00C9               	movwf	??_change_near
  6704  1600  3003               	movlw	3
  6705  1601                     u3835:	
  6706  1601  35C9               	lslf	??_change_near,f
  6707  1602  0B89               	decfsz	9,f
  6708  1603  2E01               	goto	u3835
  6709  1604  30A5               	movlw	(low (_table| 0))& (0+255)
  6710  1605  0749               	addwf	??_change_near,w
  6711  1606  00CA               	movwf	??_change_near+1
  6712  1607  0847               	movf	change_near@l,w
  6713  1608  074A               	addwf	??_change_near+1,w
  6714  1609  00CB               	movwf	??_change_near+2
  6715  160A  084B               	movf	??_change_near+2,w
  6716  160B  0086               	movwf	6
  6717  160C  0187               	clrf	7
  6718  160D  0801               	movf	1,w
  6719  160E  1903               	btfsc	3,2
  6720  160F  0008               	return
  6721                           
  6722                           ;wayout.c: 67: else if(table[k][l]== 1 || table[k][l] == 2){
  6723                           
  6724                           ;wayout.c: 66: ;
  6725  1610  0845               	movf	change_near@k,w
  6726  1611  00C9               	movwf	??_change_near
  6727  1612  3003               	movlw	3
  6728  1613                     u3855:	
  6729  1613  35C9               	lslf	??_change_near,f
  6730  1614  0B89               	decfsz	9,f
  6731  1615  2E13               	goto	u3855
  6732  1616  30A5               	movlw	(low (_table| 0))& (0+255)
  6733  1617  0749               	addwf	??_change_near,w
  6734  1618  00CA               	movwf	??_change_near+1
  6735  1619  0847               	movf	change_near@l,w
  6736  161A  074A               	addwf	??_change_near+1,w
  6737  161B  00CB               	movwf	??_change_near+2
  6738  161C  084B               	movf	??_change_near+2,w
  6739  161D  0086               	movwf	6
  6740  161E  0187               	clrf	7
  6741  161F  0301               	decf	1,w
  6742  1620  1903               	btfsc	3,2
  6743  1621  2E35               	goto	l3144
  6744  1622  0845               	movf	change_near@k,w
  6745  1623  00C9               	movwf	??_change_near
  6746  1624  3003               	movlw	3
  6747  1625                     u3875:	
  6748  1625  35C9               	lslf	??_change_near,f
  6749  1626  0B89               	decfsz	9,f
  6750  1627  2E25               	goto	u3875
  6751  1628  30A5               	movlw	(low (_table| 0))& (0+255)
  6752  1629  0749               	addwf	??_change_near,w
  6753  162A  00CA               	movwf	??_change_near+1
  6754  162B  0847               	movf	change_near@l,w
  6755  162C  074A               	addwf	??_change_near+1,w
  6756  162D  00CB               	movwf	??_change_near+2
  6757  162E  084B               	movf	??_change_near+2,w
  6758  162F  0086               	movwf	6
  6759  1630  0187               	clrf	7
  6760  1631  3002               	movlw	2
  6761  1632  0601               	xorwf	1,w
  6762  1633  1D03               	btfss	3,2
  6763  1634  0008               	return
  6764  1635                     l3144:	
  6765                           
  6766                           ;wayout.c: 68: table[k][l] = 3 - table[k][l];
  6767  1635  0845               	movf	change_near@k,w
  6768  1636  00C9               	movwf	??_change_near
  6769  1637  3003               	movlw	3
  6770  1638                     u3895:	
  6771  1638  35C9               	lslf	??_change_near,f
  6772  1639  0B89               	decfsz	9,f
  6773  163A  2E38               	goto	u3895
  6774  163B  30A5               	movlw	(low (_table| 0))& (0+255)
  6775  163C  0749               	addwf	??_change_near,w
  6776  163D  00CA               	movwf	??_change_near+1
  6777  163E  0847               	movf	change_near@l,w
  6778  163F  074A               	addwf	??_change_near+1,w
  6779  1640  00CB               	movwf	??_change_near+2
  6780  1641  084B               	movf	??_change_near+2,w
  6781  1642  0086               	movwf	6
  6782  1643  0187               	clrf	7
  6783  1644  0301               	decf	1,w
  6784  1645  3AFF               	xorlw	255
  6785  1646  3E03               	addlw	3
  6786  1647  00CC               	movwf	??_change_near+3
  6787  1648  0845               	movf	change_near@k,w
  6788  1649  00CD               	movwf	??_change_near+4
  6789  164A  3003               	movlw	3
  6790  164B                     u3905:	
  6791  164B  35CD               	lslf	??_change_near+4,f
  6792  164C  0B89               	decfsz	9,f
  6793  164D  2E4B               	goto	u3905
  6794  164E  30A5               	movlw	(low (_table| 0))& (0+255)
  6795  164F  074D               	addwf	??_change_near+4,w
  6796  1650  00CE               	movwf	??_change_near+5
  6797  1651  0847               	movf	change_near@l,w
  6798  1652  074E               	addwf	??_change_near+5,w
  6799  1653  00CF               	movwf	??_change_near+6
  6800  1654  084F               	movf	??_change_near+6,w
  6801  1655  0086               	movwf	6
  6802  1656  0187               	clrf	7
  6803  1657  084C               	movf	??_change_near+3,w
  6804  1658  0081               	movwf	1
  6805                           
  6806                           ;wayout.c: 69: set_point(k,l,screen[table[k][l]]);
  6807  1659  0847               	movf	change_near@l,w
  6808  165A  00C9               	movwf	??_change_near
  6809  165B  0849               	movf	??_change_near,w
  6810  165C  00B9               	movwf	set_point@point_y
  6811  165D  0845               	movf	change_near@k,w
  6812  165E  00CA               	movwf	??_change_near+1
  6813  165F  3003               	movlw	3
  6814  1660                     u3915:	
  6815  1660  35CA               	lslf	??_change_near+1,f
  6816  1661  0B89               	decfsz	9,f
  6817  1662  2E60               	goto	u3915
  6818  1663  30A5               	movlw	(low (_table| 0))& (0+255)
  6819  1664  074A               	addwf	??_change_near+1,w
  6820  1665  00CB               	movwf	??_change_near+2
  6821  1666  0847               	movf	change_near@l,w
  6822  1667  074B               	addwf	??_change_near+2,w
  6823  1668  00CC               	movwf	??_change_near+3
  6824  1669  084C               	movf	??_change_near+3,w
  6825  166A  0086               	movwf	6
  6826  166B  0187               	clrf	7
  6827  166C  0801               	movf	1,w
  6828  166D  00CD               	movwf	??_change_near+4
  6829  166E  3002               	movlw	2
  6830  166F                     u3925:	
  6831  166F  35CD               	lslf	??_change_near+4,f
  6832  1670  3EFF               	addlw	-1
  6833  1671  1D03               	skipz
  6834  1672  2E6F               	goto	u3925
  6835  1673  354D               	lslf	??_change_near+4,w
  6836  1674  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  6837  1675  00CE               	movwf	??_change_near+5
  6838  1676  084E               	movf	??_change_near+5,w
  6839  1677  00BA               	movwf	set_point@value
  6840  1678  0845               	movf	change_near@k,w
  6841  1679  3196  267C         	fcall	_set_point
  6842                           
  6843                           ;wayout.c: 71: else{
  6844                           ;wayout.c: 72: ;
  6845                           
  6846                           ;wayout.c: 70: }
  6847  167B  0008               	return
  6848  167C                     __end_of_change_near:	
  6849                           
  6850                           	psect	text15
  6851  07E0                     __ptext15:	
  6852 ;; *************** function _if_in_table *****************
  6853 ;; Defined at:
  6854 ;;		line 55 in file "wayout.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;  i               2    3[BANK0 ] int 
  6857 ;;  j               2    5[BANK0 ] int 
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  1    wreg      unsigned char 
  6862 ;; Registers used:
  6863 ;;		wreg
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6869 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6872 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;Total ram usage:        5 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    4
  6876 ;; This function calls:
  6877 ;;		Nothing
  6878 ;; This function is called by:
  6879 ;;		_change_near
  6880 ;;		_choose
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           
  6885                           ;psect for function _if_in_table
  6886  07E0                     _if_in_table:	
  6887                           
  6888                           ;wayout.c: 56: if(i >= 0 && i <= 8)
  6889                           
  6890                           ;incstack = 0
  6891                           ; Regs used in _if_in_table: [wreg]
  6892  07E0  0020               	movlb	0	; select bank0
  6893  07E1  1BA4               	btfsc	if_in_table@i+1,7
  6894  07E2  2FFE               	goto	l2960
  6895  07E3  0824               	movf	if_in_table@i+1,w
  6896  07E4  3A80               	xorlw	128
  6897  07E5  00A7               	movwf	??_if_in_table
  6898  07E6  3080               	movlw	128
  6899  07E7  0227               	subwf	??_if_in_table,w
  6900  07E8  1D03               	skipz
  6901  07E9  2FEC               	goto	u3465
  6902  07EA  3009               	movlw	9
  6903  07EB  0223               	subwf	if_in_table@i,w
  6904  07EC                     u3465:	
  6905  07EC  1803               	skipnc
  6906  07ED  2FFE               	goto	l2960
  6907                           
  6908                           ;wayout.c: 57: if(j >= 0 && j <= 8)
  6909  07EE  0020               	movlb	0	; select bank0
  6910  07EF  1BA6               	btfsc	if_in_table@j+1,7
  6911  07F0  2FFE               	goto	l2960
  6912  07F1  0826               	movf	if_in_table@j+1,w
  6913  07F2  3A80               	xorlw	128
  6914  07F3  00A7               	movwf	??_if_in_table
  6915  07F4  3080               	movlw	128
  6916  07F5  0227               	subwf	??_if_in_table,w
  6917  07F6  1D03               	skipz
  6918  07F7  2FFA               	goto	u3485
  6919  07F8  3009               	movlw	9
  6920  07F9  0225               	subwf	if_in_table@j,w
  6921  07FA                     u3485:	
  6922  07FA  1803               	skipnc
  6923  07FB  2FFE               	goto	l2960
  6924                           
  6925                           ;wayout.c: 58: return 1;
  6926  07FC  3001               	movlw	1
  6927  07FD  0008               	return
  6928  07FE                     l2960:	
  6929                           
  6930                           ;wayout.c: 59: return 0;
  6931  07FE  3000               	movlw	0
  6932  07FF  0008               	return
  6933  0800                     __end_of_if_in_table:	
  6934                           
  6935                           	psect	text16
  6936  1058                     __ptext16:	
  6937 ;; *************** function _check_if_complete *****************
  6938 ;; Defined at:
  6939 ;;		line 99 in file "wayout.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;		None
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  j               1    7[BANK0 ] unsigned char 
  6944 ;;  i               1    6[BANK0 ] unsigned char 
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  1    wreg      unsigned char 
  6947 ;; Registers used:
  6948 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6958 ;;Total ram usage:        5 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    4
  6961 ;; This function calls:
  6962 ;;		Nothing
  6963 ;; This function is called by:
  6964 ;;		_wayout
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _check_if_complete
  6970  1058                     _check_if_complete:	
  6971                           
  6972                           ;wayout.c: 100: for(unsigned char i=0; i<8; i++)
  6973                           
  6974                           ;incstack = 0
  6975                           ; Regs used in _check_if_complete: [wreg+fsr1l+fsr1h+status,2+status,0]
  6976  1058  0020               	movlb	0	; select bank0
  6977  1059  01A6               	clrf	check_if_complete@i
  6978  105A  3008               	movlw	8
  6979  105B  0226               	subwf	check_if_complete@i,w
  6980  105C  1803               	btfsc	3,0
  6981  105D  2888               	goto	l3572
  6982  105E                     l3552:	
  6983                           
  6984                           ;wayout.c: 101: for(unsigned char j=0;j<8;j++)
  6985  105E  01A7               	clrf	check_if_complete@j
  6986  105F  3008               	movlw	8
  6987  1060  0227               	subwf	check_if_complete@j,w
  6988  1061  1803               	btfsc	3,0
  6989  1062  2880               	goto	l3568
  6990  1063                     l3558:	
  6991                           
  6992                           ;wayout.c: 103: if(table[i][j] == 2)
  6993  1063  0826               	movf	check_if_complete@i,w
  6994  1064  00A3               	movwf	??_check_if_complete
  6995  1065  3003               	movlw	3
  6996  1066                     u4665:	
  6997  1066  35A3               	lslf	??_check_if_complete,f
  6998  1067  0B89               	decfsz	9,f
  6999  1068  2866               	goto	u4665
  7000  1069  30A5               	movlw	(low (_table| 0))& (0+255)
  7001  106A  0723               	addwf	??_check_if_complete,w
  7002  106B  00A4               	movwf	??_check_if_complete+1
  7003  106C  0827               	movf	check_if_complete@j,w
  7004  106D  0724               	addwf	??_check_if_complete+1,w
  7005  106E  00A5               	movwf	??_check_if_complete+2
  7006  106F  0825               	movf	??_check_if_complete+2,w
  7007  1070  0086               	movwf	6
  7008  1071  0187               	clrf	7
  7009  1072  3002               	movlw	2
  7010  1073  0601               	xorwf	1,w
  7011  1074  1D03               	btfss	3,2
  7012  1075  2878               	goto	l3564
  7013                           
  7014                           ;wayout.c: 104: return 0;
  7015  1076  3000               	movlw	0
  7016  1077  0008               	return
  7017  1078                     l3564:	
  7018  1078  3001               	movlw	1
  7019  1079  00A3               	movwf	??_check_if_complete
  7020  107A  0823               	movf	??_check_if_complete,w
  7021  107B  07A7               	addwf	check_if_complete@j,f
  7022  107C  3008               	movlw	8
  7023  107D  0227               	subwf	check_if_complete@j,w
  7024  107E  1C03               	skipc
  7025  107F  2863               	goto	l3558
  7026  1080                     l3568:	
  7027  1080  3001               	movlw	1
  7028  1081  00A3               	movwf	??_check_if_complete
  7029  1082  0823               	movf	??_check_if_complete,w
  7030  1083  07A6               	addwf	check_if_complete@i,f
  7031  1084  3008               	movlw	8
  7032  1085  0226               	subwf	check_if_complete@i,w
  7033  1086  1C03               	skipc
  7034  1087  285E               	goto	l3552
  7035  1088                     l3572:	
  7036                           
  7037                           ;wayout.c: 105: return 1;
  7038  1088  3001               	movlw	1
  7039  1089  0008               	return
  7040  108A                     __end_of_check_if_complete:	
  7041                           
  7042                           	psect	text17
  7043  1467                     __ptext17:	
  7044 ;; *************** function _init_heibaiqi *****************
  7045 ;; Defined at:
  7046 ;;		line 45 in file "heibaiqi.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;		None
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;		None
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  1    wreg      void 
  7053 ;; Registers used:
  7054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7055 ;; Tracked objects:
  7056 ;;		On entry : 0/0
  7057 ;;		On exit  : 0/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7063 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7064 ;;Total ram usage:        2 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:    9
  7067 ;; This function calls:
  7068 ;;		_Clear_Screen
  7069 ;;		_draw_heibaiqi_right
  7070 ;;		_memset
  7071 ;;		_set_point
  7072 ;; This function is called by:
  7073 ;;		_run_game
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           
  7078                           ;psect for function _init_heibaiqi
  7079  1467                     _init_heibaiqi:	
  7080                           
  7081                           ;heibaiqi.c: 47: Clear_Screen(0x00);
  7082                           
  7083                           ;incstack = 0
  7084                           ; Regs used in _init_heibaiqi: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7085  1467  3000               	movlw	0
  7086  1468  0020               	movlb	0	; select bank0
  7087  1469  00B2               	movwf	Clear_Screen@value
  7088  146A  00B3               	movwf	Clear_Screen@value+1
  7089  146B  3193  239B  3194   	fcall	_Clear_Screen
  7090                           
  7091                           ;heibaiqi.c: 48: player=1;
  7092  146E  0021               	movlb	1	; select bank1
  7093  146F  01A1               	clrf	_player^(0+128)
  7094  1470  0AA1               	incf	_player^(0+128),f
  7095                           
  7096                           ;heibaiqi.c: 49: result=0;
  7097  1471  01A2               	clrf	_result^(0+128)
  7098                           
  7099                           ;heibaiqi.c: 50: black_num=2;
  7100  1472  3002               	movlw	2
  7101  1473  0020               	movlb	0	; select bank0
  7102  1474  00C5               	movwf	??_init_heibaiqi
  7103  1475  0845               	movf	??_init_heibaiqi,w
  7104  1476  00E7               	movwf	_black_num
  7105                           
  7106                           ;heibaiqi.c: 51: white_num=2;
  7107  1477  3002               	movlw	2
  7108  1478  00C5               	movwf	??_init_heibaiqi
  7109  1479  0845               	movf	??_init_heibaiqi,w
  7110  147A  00EB               	movwf	_white_num
  7111                           
  7112                           ;heibaiqi.c: 52: empty_num=60;
  7113  147B  303C               	movlw	60
  7114  147C  00C5               	movwf	??_init_heibaiqi
  7115  147D  0845               	movf	??_init_heibaiqi,w
  7116  147E  0021               	movlb	1	; select bank1
  7117  147F  00A0               	movwf	_empty_num^(0+128)
  7118                           
  7119                           ;heibaiqi.c: 53: temp_cursor.row=3;
  7120  1480  3003               	movlw	3
  7121  1481  0020               	movlb	0	; select bank0
  7122  1482  00C5               	movwf	??_init_heibaiqi
  7123  1483  0845               	movf	??_init_heibaiqi,w
  7124  1484  00E4               	movwf	_temp_cursor
  7125                           
  7126                           ;heibaiqi.c: 54: temp_cursor.col=3;
  7127  1485  3003               	movlw	3
  7128  1486  00C5               	movwf	??_init_heibaiqi
  7129  1487  0845               	movf	??_init_heibaiqi,w
  7130  1488  00E5               	movwf	_temp_cursor+1
  7131                           
  7132                           ;heibaiqi.c: 56: memset(table,0,sizeof(table));
  7133  1489  3000               	movlw	0
  7134  148A  00A3               	movwf	memset@c
  7135  148B  00A4               	movwf	memset@c+1
  7136  148C  3040               	movlw	64
  7137  148D  00A5               	movwf	memset@n
  7138  148E  3000               	movlw	0
  7139  148F  00A6               	movwf	memset@n+1
  7140  1490  30A5               	movlw	(low (_table| 0))& (0+255)
  7141  1491  319E  26D1  3194   	fcall	_memset
  7142                           
  7143                           ;heibaiqi.c: 57: table[3][3] = 1 | 0x08;
  7144  1494  3009               	movlw	9
  7145  1495  0020               	movlb	0	; select bank0
  7146  1496  00C5               	movwf	??_init_heibaiqi
  7147  1497  0845               	movf	??_init_heibaiqi,w
  7148  1498  0021               	movlb	1	; select bank1
  7149  1499  00C0               	movwf	(_table^(0+128)+27)
  7150                           
  7151                           ;heibaiqi.c: 58: table[4][4] = 1;
  7152  149A  01C9               	clrf	(_table^(0+128)+36)
  7153  149B  0AC9               	incf	(_table^(0+128)+36),f
  7154                           
  7155                           ;heibaiqi.c: 59: table[3][4] = 2;
  7156  149C  3002               	movlw	2
  7157  149D  0020               	movlb	0	; select bank0
  7158  149E  00C5               	movwf	??_init_heibaiqi
  7159  149F  0845               	movf	??_init_heibaiqi,w
  7160  14A0  0021               	movlb	1	; select bank1
  7161  14A1  00C1               	movwf	(_table^(0+128)+28)
  7162                           
  7163                           ;heibaiqi.c: 60: table[4][3] = 2;
  7164  14A2  3002               	movlw	2
  7165  14A3  0020               	movlb	0	; select bank0
  7166  14A4  00C5               	movwf	??_init_heibaiqi
  7167  14A5  0845               	movf	??_init_heibaiqi,w
  7168  14A6  0021               	movlb	1	; select bank1
  7169  14A7  00C8               	movwf	(_table^(0+128)+35)
  7170                           
  7171                           ;heibaiqi.c: 77: set_point(3, 3, choose_first);
  7172  14A8  3003               	movlw	3
  7173  14A9  0020               	movlb	0	; select bank0
  7174  14AA  00C5               	movwf	??_init_heibaiqi
  7175  14AB  0845               	movf	??_init_heibaiqi,w
  7176  14AC  00B9               	movwf	set_point@point_y
  7177  14AD  30C2               	movlw	(low (_choose_first| (0+256)))& (0+255)
  7178  14AE  00C6               	movwf	??_init_heibaiqi+1
  7179  14AF  0846               	movf	??_init_heibaiqi+1,w
  7180  14B0  00BA               	movwf	set_point@value
  7181  14B1  3003               	movlw	3
  7182  14B2  3196  267C  3194   	fcall	_set_point
  7183                           
  7184                           ;heibaiqi.c: 78: set_point(4, 4, first_chess);
  7185  14B5  3004               	movlw	4
  7186  14B6  0020               	movlb	0	; select bank0
  7187  14B7  00C5               	movwf	??_init_heibaiqi
  7188  14B8  0845               	movf	??_init_heibaiqi,w
  7189  14B9  00B9               	movwf	set_point@point_y
  7190  14BA  30D2               	movlw	(low (_first_chess| (0+256)))& (0+255)
  7191  14BB  00C6               	movwf	??_init_heibaiqi+1
  7192  14BC  0846               	movf	??_init_heibaiqi+1,w
  7193  14BD  00BA               	movwf	set_point@value
  7194  14BE  3004               	movlw	4
  7195  14BF  3196  267C  3194   	fcall	_set_point
  7196                           
  7197                           ;heibaiqi.c: 79: set_point(3, 4, second_chess);
  7198  14C2  3004               	movlw	4
  7199  14C3  0020               	movlb	0	; select bank0
  7200  14C4  00C5               	movwf	??_init_heibaiqi
  7201  14C5  0845               	movf	??_init_heibaiqi,w
  7202  14C6  00B9               	movwf	set_point@point_y
  7203  14C7  3064               	movlw	(low (_second_chess| (0+256)))& (0+255)
  7204  14C8  00C6               	movwf	??_init_heibaiqi+1
  7205  14C9  0846               	movf	??_init_heibaiqi+1,w
  7206  14CA  00BA               	movwf	set_point@value
  7207  14CB  3003               	movlw	3
  7208  14CC  3196  267C  3194   	fcall	_set_point
  7209                           
  7210                           ;heibaiqi.c: 80: set_point(4, 3, second_chess);
  7211  14CF  3003               	movlw	3
  7212  14D0  0020               	movlb	0	; select bank0
  7213  14D1  00C5               	movwf	??_init_heibaiqi
  7214  14D2  0845               	movf	??_init_heibaiqi,w
  7215  14D3  00B9               	movwf	set_point@point_y
  7216  14D4  3064               	movlw	(low (_second_chess| (0+256)))& (0+255)
  7217  14D5  00C6               	movwf	??_init_heibaiqi+1
  7218  14D6  0846               	movf	??_init_heibaiqi+1,w
  7219  14D7  00BA               	movwf	set_point@value
  7220  14D8  3004               	movlw	4
  7221  14D9  3196  267C  3194   	fcall	_set_point
  7222                           
  7223                           ;heibaiqi.c: 82: draw_heibaiqi_right();
  7224  14DC  318A  22D1         	fcall	_draw_heibaiqi_right
  7225  14DE  0008               	return
  7226  14DF                     __end_of_init_heibaiqi:	
  7227                           
  7228                           	psect	text18
  7229  0AD1                     __ptext18:	
  7230 ;; *************** function _draw_heibaiqi_right *****************
  7231 ;; Defined at:
  7232 ;;		line 3 in file "heibaiqi.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;		None
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  i               1   33[BANK0 ] unsigned char 
  7237 ;;  j               1   32[BANK0 ] unsigned char 
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      void 
  7240 ;; Registers used:
  7241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;Total ram usage:        4 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    8
  7254 ;; This function calls:
  7255 ;;		_Display_Chars
  7256 ;;		_Write_Com
  7257 ;;		_Write_Data
  7258 ;;		_delay_100us
  7259 ;;		_int2string
  7260 ;; This function is called by:
  7261 ;;		_init_heibaiqi
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           
  7266                           ;psect for function _draw_heibaiqi_right
  7267  0AD1                     _draw_heibaiqi_right:	
  7268                           
  7269                           ;heibaiqi.c: 4: unsigned char i,j;
  7270                           ;heibaiqi.c: 5: Write_Com(0x01);
  7271                           
  7272                           ;incstack = 0
  7273                           ; Regs used in _draw_heibaiqi_right: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7274  0AD1  3001               	movlw	1
  7275  0AD2  0020               	movlb	0	; select bank0
  7276  0AD3  00B0               	movwf	Write_Com@com
  7277  0AD4  3000               	movlw	0
  7278  0AD5  00B1               	movwf	Write_Com@com+1
  7279  0AD6  319E  265E  318A   	fcall	_Write_Com
  7280                           
  7281                           ;heibaiqi.c: 6: delay_100us(100);
  7282  0AD9  3064               	movlw	100
  7283  0ADA  0020               	movlb	0	; select bank0
  7284  0ADB  00A9               	movwf	delay_100us@cnt
  7285  0ADC  3000               	movlw	0
  7286  0ADD  00AA               	movwf	delay_100us@cnt+1
  7287  0ADE  319F  27B4  318A   	fcall	_delay_100us
  7288                           
  7289                           ;heibaiqi.c: 7: Write_Com(0x34);
  7290  0AE1  3034               	movlw	52
  7291  0AE2  0020               	movlb	0	; select bank0
  7292  0AE3  00B0               	movwf	Write_Com@com
  7293  0AE4  3000               	movlw	0
  7294  0AE5  00B1               	movwf	Write_Com@com+1
  7295  0AE6  319E  265E  318A   	fcall	_Write_Com
  7296                           
  7297                           ;heibaiqi.c: 8: for(i=0; i<64; i++) {
  7298  0AE9  0020               	movlb	0	; select bank0
  7299  0AEA  01C1               	clrf	draw_heibaiqi_right@i
  7300  0AEB  3040               	movlw	64
  7301  0AEC  0241               	subwf	draw_heibaiqi_right@i,w
  7302  0AED  1803               	btfsc	3,0
  7303  0AEE  2BA3               	goto	l3206
  7304  0AEF                     l3160:	
  7305                           
  7306                           ;heibaiqi.c: 9: if(i < 16) {
  7307  0AEF  3010               	movlw	16
  7308  0AF0  0241               	subwf	draw_heibaiqi_right@i,w
  7309  0AF1  1803               	skipnc
  7310  0AF2  2B21               	goto	l3176
  7311                           
  7312                           ;heibaiqi.c: 10: Write_Com(0x80+i);
  7313  0AF3  0841               	movf	draw_heibaiqi_right@i,w
  7314  0AF4  3E80               	addlw	128
  7315  0AF5  00B0               	movwf	Write_Com@com
  7316  0AF6  3000               	movlw	0
  7317  0AF7  1803               	skipnc
  7318  0AF8  3001               	movlw	1
  7319  0AF9  00B1               	movwf	Write_Com@com+1
  7320  0AFA  319E  265E  318A   	fcall	_Write_Com
  7321                           
  7322                           ;heibaiqi.c: 11: Write_Com(0x84);
  7323  0AFD  3084               	movlw	132
  7324  0AFE  0020               	movlb	0	; select bank0
  7325  0AFF  00B0               	movwf	Write_Com@com
  7326  0B00  3000               	movlw	0
  7327  0B01  00B1               	movwf	Write_Com@com+1
  7328  0B02  319E  265E  318A   	fcall	_Write_Com
  7329                           
  7330                           ;heibaiqi.c: 12: Write_Data(0x7f);
  7331  0B05  307F               	movlw	127
  7332  0B06  0020               	movlb	0	; select bank0
  7333  0B07  00B0               	movwf	Write_Data@dat
  7334  0B08  3000               	movlw	0
  7335  0B09  00B1               	movwf	Write_Data@dat+1
  7336  0B0A  319E  266D  318A   	fcall	_Write_Data
  7337                           
  7338                           ;heibaiqi.c: 13: for(j=1; j<8; j++) {
  7339  0B0D  0020               	movlb	0	; select bank0
  7340  0B0E  01C0               	clrf	draw_heibaiqi_right@j
  7341  0B0F  0AC0               	incf	draw_heibaiqi_right@j,f
  7342  0B10                     L4:	
  7343  0B10  3008               	movlw	8
  7344  0B11  0240               	subwf	draw_heibaiqi_right@j,w
  7345  0B12  1803               	btfsc	3,0
  7346  0B13  2B9A               	goto	l3202
  7347                           
  7348                           ;heibaiqi.c: 14: Write_Data(0xff);
  7349  0B14  30FF               	movlw	255
  7350  0B15  00B0               	movwf	Write_Data@dat
  7351  0B16  3000               	movlw	0
  7352  0B17  00B1               	movwf	Write_Data@dat+1
  7353  0B18  319E  266D  318A   	fcall	_Write_Data
  7354  0B1B  3001               	movlw	1
  7355  0B1C  0020               	movlb	0	; select bank0
  7356  0B1D  00BE               	movwf	??_draw_heibaiqi_right
  7357  0B1E  083E               	movf	??_draw_heibaiqi_right,w
  7358  0B1F  07C0               	addwf	draw_heibaiqi_right@j,f
  7359  0B20  2B10               	goto	L4
  7360  0B21                     l3176:	
  7361                           ;heibaiqi.c: 15: }
  7362                           ;heibaiqi.c: 16: }
  7363                           
  7364                           
  7365                           ;heibaiqi.c: 17: else if(i < 32 && i >= 16) {
  7366  0B21  3020               	movlw	32
  7367  0B22  0241               	subwf	draw_heibaiqi_right@i,w
  7368  0B23  1803               	skipnc
  7369  0B24  2B44               	goto	l3182
  7370  0B25  3010               	movlw	16
  7371  0B26  0241               	subwf	draw_heibaiqi_right@i,w
  7372  0B27  1C03               	skipc
  7373  0B28  2B44               	goto	l3182
  7374                           
  7375                           ;heibaiqi.c: 18: Write_Com(0x80+i);
  7376  0B29  0841               	movf	draw_heibaiqi_right@i,w
  7377  0B2A  3E80               	addlw	128
  7378  0B2B  00B0               	movwf	Write_Com@com
  7379  0B2C  3000               	movlw	0
  7380  0B2D  1803               	skipnc
  7381  0B2E  3001               	movlw	1
  7382  0B2F  00B1               	movwf	Write_Com@com+1
  7383  0B30  319E  265E  318A   	fcall	_Write_Com
  7384                           
  7385                           ;heibaiqi.c: 19: Write_Com(0x84);
  7386  0B33  3084               	movlw	132
  7387  0B34  0020               	movlb	0	; select bank0
  7388  0B35  00B0               	movwf	Write_Com@com
  7389  0B36  3000               	movlw	0
  7390  0B37  00B1               	movwf	Write_Com@com+1
  7391  0B38  319E  265E  318A   	fcall	_Write_Com
  7392                           
  7393                           ;heibaiqi.c: 20: Write_Data(0b01111000);
  7394  0B3B  3078               	movlw	120
  7395  0B3C  0020               	movlb	0	; select bank0
  7396  0B3D  00B0               	movwf	Write_Data@dat
  7397  0B3E  3000               	movlw	0
  7398  0B3F  00B1               	movwf	Write_Data@dat+1
  7399  0B40  319E  266D  318A   	fcall	_Write_Data
  7400                           
  7401                           ;heibaiqi.c: 21: }
  7402  0B43  2B9A               	goto	l3202
  7403  0B44                     l3182:	
  7404                           
  7405                           ;heibaiqi.c: 22: else if(i < 48 && i >= 32) {
  7406  0B44  3030               	movlw	48
  7407  0B45  0020               	movlb	0	; select bank0
  7408  0B46  0241               	subwf	draw_heibaiqi_right@i,w
  7409  0B47  1803               	skipnc
  7410  0B48  2B68               	goto	l3188
  7411  0B49  3020               	movlw	32
  7412  0B4A  0241               	subwf	draw_heibaiqi_right@i,w
  7413  0B4B  1C03               	skipc
  7414  0B4C  2B68               	goto	l3188
  7415                           
  7416                           ;heibaiqi.c: 23: Write_Com(0x80+(i-32));
  7417  0B4D  0841               	movf	draw_heibaiqi_right@i,w
  7418  0B4E  3E60               	addlw	96
  7419  0B4F  00B0               	movwf	Write_Com@com
  7420  0B50  3000               	movlw	0
  7421  0B51  1803               	skipnc
  7422  0B52  3001               	movlw	1
  7423  0B53  00B1               	movwf	Write_Com@com+1
  7424  0B54  319E  265E  318A   	fcall	_Write_Com
  7425                           
  7426                           ;heibaiqi.c: 24: Write_Com(0x8C);
  7427  0B57  308C               	movlw	140
  7428  0B58  0020               	movlb	0	; select bank0
  7429  0B59  00B0               	movwf	Write_Com@com
  7430  0B5A  3000               	movlw	0
  7431  0B5B  00B1               	movwf	Write_Com@com+1
  7432  0B5C  319E  265E  318A   	fcall	_Write_Com
  7433                           
  7434                           ;heibaiqi.c: 25: Write_Data(0b01111000);
  7435  0B5F  3078               	movlw	120
  7436  0B60  0020               	movlb	0	; select bank0
  7437  0B61  00B0               	movwf	Write_Data@dat
  7438  0B62  3000               	movlw	0
  7439  0B63  00B1               	movwf	Write_Data@dat+1
  7440  0B64  319E  266D  318A   	fcall	_Write_Data
  7441                           
  7442                           ;heibaiqi.c: 26: }
  7443  0B67  2B9A               	goto	l3202
  7444  0B68                     l3188:	
  7445                           
  7446                           ;heibaiqi.c: 27: else {
  7447                           ;heibaiqi.c: 28: Write_Com(0x80+(i-32));
  7448  0B68  0020               	movlb	0	; select bank0
  7449  0B69  0841               	movf	draw_heibaiqi_right@i,w
  7450  0B6A  3E60               	addlw	96
  7451  0B6B  00B0               	movwf	Write_Com@com
  7452  0B6C  3000               	movlw	0
  7453  0B6D  1803               	skipnc
  7454  0B6E  3001               	movlw	1
  7455  0B6F  00B1               	movwf	Write_Com@com+1
  7456  0B70  319E  265E  318A   	fcall	_Write_Com
  7457                           
  7458                           ;heibaiqi.c: 29: Write_Com(0x8C);
  7459  0B73  308C               	movlw	140
  7460  0B74  0020               	movlb	0	; select bank0
  7461  0B75  00B0               	movwf	Write_Com@com
  7462  0B76  3000               	movlw	0
  7463  0B77  00B1               	movwf	Write_Com@com+1
  7464  0B78  319E  265E  318A   	fcall	_Write_Com
  7465                           
  7466                           ;heibaiqi.c: 30: Write_Data(0x7f);
  7467  0B7B  307F               	movlw	127
  7468  0B7C  0020               	movlb	0	; select bank0
  7469  0B7D  00B0               	movwf	Write_Data@dat
  7470  0B7E  3000               	movlw	0
  7471  0B7F  00B1               	movwf	Write_Data@dat+1
  7472  0B80  319E  266D  318A   	fcall	_Write_Data
  7473                           
  7474                           ;heibaiqi.c: 31: for(j=1; j<8; j++) {
  7475  0B83  0020               	movlb	0	; select bank0
  7476  0B84  01C0               	clrf	draw_heibaiqi_right@j
  7477  0B85  0AC0               	incf	draw_heibaiqi_right@j,f
  7478  0B86  3008               	movlw	8
  7479  0B87  0240               	subwf	draw_heibaiqi_right@j,w
  7480  0B88  1803               	btfsc	3,0
  7481  0B89  2B9A               	goto	l3202
  7482  0B8A                     l3196:	
  7483                           
  7484                           ;heibaiqi.c: 32: Write_Data(0xff);
  7485  0B8A  30FF               	movlw	255
  7486  0B8B  00B0               	movwf	Write_Data@dat
  7487  0B8C  3000               	movlw	0
  7488  0B8D  00B1               	movwf	Write_Data@dat+1
  7489  0B8E  319E  266D  318A   	fcall	_Write_Data
  7490  0B91  3001               	movlw	1
  7491  0B92  0020               	movlb	0	; select bank0
  7492  0B93  00BE               	movwf	??_draw_heibaiqi_right
  7493  0B94  083E               	movf	??_draw_heibaiqi_right,w
  7494  0B95  07C0               	addwf	draw_heibaiqi_right@j,f
  7495  0B96  3008               	movlw	8
  7496  0B97  0240               	subwf	draw_heibaiqi_right@j,w
  7497  0B98  1C03               	skipc
  7498  0B99  2B8A               	goto	l3196
  7499  0B9A                     l3202:	
  7500  0B9A  3001               	movlw	1
  7501  0B9B  0020               	movlb	0	; select bank0
  7502  0B9C  00BE               	movwf	??_draw_heibaiqi_right
  7503  0B9D  083E               	movf	??_draw_heibaiqi_right,w
  7504  0B9E  07C1               	addwf	draw_heibaiqi_right@i,f
  7505  0B9F  3040               	movlw	64
  7506  0BA0  0241               	subwf	draw_heibaiqi_right@i,w
  7507  0BA1  1C03               	skipc
  7508  0BA2  2AEF               	goto	l3160
  7509  0BA3                     l3206:	
  7510                           
  7511                           ;heibaiqi.c: 33: }
  7512                           ;heibaiqi.c: 34: }
  7513                           ;heibaiqi.c: 35: }
  7514                           ;heibaiqi.c: 36: Write_Com(0x36);
  7515  0BA3  3036               	movlw	54
  7516  0BA4  00B0               	movwf	Write_Com@com
  7517  0BA5  3000               	movlw	0
  7518  0BA6  00B1               	movwf	Write_Com@com+1
  7519  0BA7  319E  265E  318A   	fcall	_Write_Com
  7520                           
  7521                           ;heibaiqi.c: 37: Write_Com(0x30);
  7522  0BAA  3030               	movlw	48
  7523  0BAB  0020               	movlb	0	; select bank0
  7524  0BAC  00B0               	movwf	Write_Com@com
  7525  0BAD  3000               	movlw	0
  7526  0BAE  00B1               	movwf	Write_Com@com+1
  7527  0BAF  319E  265E  318A   	fcall	_Write_Com
  7528                           
  7529                           ;heibaiqi.c: 39: int2string(display_black,5,black_num);
  7530  0BB2  3005               	movlw	5
  7531  0BB3  0020               	movlb	0	; select bank0
  7532  0BB4  00BE               	movwf	??_draw_heibaiqi_right
  7533  0BB5  083E               	movf	??_draw_heibaiqi_right,w
  7534  0BB6  00AC               	movwf	int2string@begin
  7535  0BB7  0867               	movf	_black_num,w
  7536  0BB8  00BF               	movwf	??_draw_heibaiqi_right+1
  7537  0BB9  083F               	movf	??_draw_heibaiqi_right+1,w
  7538  0BBA  00AD               	movwf	int2string@num
  7539  0BBB  3050               	movlw	(low (_display_black| (0+256)))& (0+255)
  7540  0BBC  3191  21B7  318A   	fcall	_int2string
  7541                           
  7542                           ;heibaiqi.c: 40: Display_Chars(2,display_black,5);
  7543  0BBF  3050               	movlw	low _display_black
  7544  0BC0  0020               	movlb	0	; select bank0
  7545  0BC1  00B2               	movwf	Display_Chars@string
  7546  0BC2  3001               	movlw	high _display_black
  7547  0BC3  00B3               	movwf	Display_Chars@string+1
  7548  0BC4  3005               	movlw	5
  7549  0BC5  00BE               	movwf	??_draw_heibaiqi_right
  7550  0BC6  083E               	movf	??_draw_heibaiqi_right,w
  7551  0BC7  00B4               	movwf	Display_Chars@y
  7552  0BC8  3002               	movlw	2
  7553  0BC9  3192  22ED  318A   	fcall	_Display_Chars
  7554                           
  7555                           ;heibaiqi.c: 41: int2string(display_white,5,white_num);
  7556  0BCC  3005               	movlw	5
  7557  0BCD  0020               	movlb	0	; select bank0
  7558  0BCE  00BE               	movwf	??_draw_heibaiqi_right
  7559  0BCF  083E               	movf	??_draw_heibaiqi_right,w
  7560  0BD0  00AC               	movwf	int2string@begin
  7561  0BD1  086B               	movf	_white_num,w
  7562  0BD2  00BF               	movwf	??_draw_heibaiqi_right+1
  7563  0BD3  083F               	movf	??_draw_heibaiqi_right+1,w
  7564  0BD4  00AD               	movwf	int2string@num
  7565  0BD5  305A               	movlw	(low (_display_white| (0+256)))& (0+255)
  7566  0BD6  3191  21B7  318A   	fcall	_int2string
  7567                           
  7568                           ;heibaiqi.c: 42: Display_Chars(3,display_white,5);
  7569  0BD9  305A               	movlw	low _display_white
  7570  0BDA  0020               	movlb	0	; select bank0
  7571  0BDB  00B2               	movwf	Display_Chars@string
  7572  0BDC  3001               	movlw	high _display_white
  7573  0BDD  00B3               	movwf	Display_Chars@string+1
  7574  0BDE  3005               	movlw	5
  7575  0BDF  00BE               	movwf	??_draw_heibaiqi_right
  7576  0BE0  083E               	movf	??_draw_heibaiqi_right,w
  7577  0BE1  00B4               	movwf	Display_Chars@y
  7578  0BE2  3003               	movlw	3
  7579  0BE3  3192  22ED         	fcall	_Display_Chars
  7580  0BE5  0008               	return
  7581  0BE6                     __end_of_draw_heibaiqi_right:	
  7582                           
  7583                           	psect	text19
  7584  0384                     __ptext19:	
  7585 ;; *************** function _heibaiqi *****************
  7586 ;; Defined at:
  7587 ;;		line 235 in file "heibaiqi.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;		None
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;		None
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1    wreg      void 
  7594 ;; Registers used:
  7595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7604 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7605 ;;Total ram usage:        7 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    9
  7608 ;; This function calls:
  7609 ;;		_Display_Chars
  7610 ;;		_choose_point
  7611 ;;		_init_environment
  7612 ;;		_judge_result
  7613 ;;		_set_menu
  7614 ;;		_set_point
  7615 ;; This function is called by:
  7616 ;;		_run_game
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           
  7621                           ;psect for function _heibaiqi
  7622  0384                     _heibaiqi:	
  7623                           
  7624                           ;heibaiqi.c: 239: switch(key)
  7625                           
  7626                           ;incstack = 0
  7627                           ; Regs used in _heibaiqi: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7628  0384  2E3C               	goto	l3710
  7629  0385                     l3628:	
  7630                           ;heibaiqi.c: 240: {
  7631                           ;heibaiqi.c: 241: case 1:
  7632                           
  7633                           
  7634                           ;heibaiqi.c: 242: key=0;
  7635  0385  0020               	movlb	0	; select bank0
  7636  0386  01E8               	clrf	_key
  7637                           
  7638                           ;heibaiqi.c: 243: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] & 0x03;
  7639  0387  0864               	movf	_temp_cursor,w
  7640  0388  00D8               	movwf	??_heibaiqi
  7641  0389  3003               	movlw	3
  7642  038A                     u4745:	
  7643  038A  35D8               	lslf	??_heibaiqi,f
  7644  038B  0B89               	decfsz	9,f
  7645  038C  2B8A               	goto	u4745
  7646  038D  30A5               	movlw	(low (_table| 0))& (0+255)
  7647  038E  0758               	addwf	??_heibaiqi,w
  7648  038F  00D9               	movwf	??_heibaiqi+1
  7649  0390  0865               	movf	_temp_cursor+1,w
  7650  0391  0759               	addwf	??_heibaiqi+1,w
  7651  0392  00DA               	movwf	??_heibaiqi+2
  7652  0393  085A               	movf	??_heibaiqi+2,w
  7653  0394  0086               	movwf	6
  7654  0395  0187               	clrf	7
  7655  0396  0801               	movf	1,w
  7656  0397  3903               	andlw	3
  7657  0398  00DB               	movwf	??_heibaiqi+3
  7658  0399  0864               	movf	_temp_cursor,w
  7659  039A  00DC               	movwf	??_heibaiqi+4
  7660  039B  3003               	movlw	3
  7661  039C                     u4755:	
  7662  039C  35DC               	lslf	??_heibaiqi+4,f
  7663  039D  0B89               	decfsz	9,f
  7664  039E  2B9C               	goto	u4755
  7665  039F  30A5               	movlw	(low (_table| 0))& (0+255)
  7666  03A0  075C               	addwf	??_heibaiqi+4,w
  7667  03A1  00DD               	movwf	??_heibaiqi+5
  7668  03A2  0865               	movf	_temp_cursor+1,w
  7669  03A3  075D               	addwf	??_heibaiqi+5,w
  7670  03A4  00DE               	movwf	??_heibaiqi+6
  7671  03A5  085E               	movf	??_heibaiqi+6,w
  7672  03A6  0086               	movwf	6
  7673  03A7  0187               	clrf	7
  7674  03A8  085B               	movf	??_heibaiqi+3,w
  7675  03A9  0081               	movwf	1
  7676                           
  7677                           ;heibaiqi.c: 244: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]]);
  7678  03AA  0865               	movf	_temp_cursor+1,w
  7679  03AB  00D8               	movwf	??_heibaiqi
  7680  03AC  0858               	movf	??_heibaiqi,w
  7681  03AD  00B9               	movwf	set_point@point_y
  7682  03AE  0864               	movf	_temp_cursor,w
  7683  03AF  00D9               	movwf	??_heibaiqi+1
  7684  03B0  3003               	movlw	3
  7685  03B1                     u4765:	
  7686  03B1  35D9               	lslf	??_heibaiqi+1,f
  7687  03B2  0B89               	decfsz	9,f
  7688  03B3  2BB1               	goto	u4765
  7689  03B4  30A5               	movlw	(low (_table| 0))& (0+255)
  7690  03B5  0759               	addwf	??_heibaiqi+1,w
  7691  03B6  00DA               	movwf	??_heibaiqi+2
  7692  03B7  0865               	movf	_temp_cursor+1,w
  7693  03B8  075A               	addwf	??_heibaiqi+2,w
  7694  03B9  00DB               	movwf	??_heibaiqi+3
  7695  03BA  085B               	movf	??_heibaiqi+3,w
  7696  03BB  0086               	movwf	6
  7697  03BC  0187               	clrf	7
  7698  03BD  0801               	movf	1,w
  7699  03BE  00DC               	movwf	??_heibaiqi+4
  7700  03BF  3002               	movlw	2
  7701  03C0                     u4775:	
  7702  03C0  35DC               	lslf	??_heibaiqi+4,f
  7703  03C1  3EFF               	addlw	-1
  7704  03C2  1D03               	skipz
  7705  03C3  2BC0               	goto	u4775
  7706  03C4  355C               	lslf	??_heibaiqi+4,w
  7707  03C5  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  7708  03C6  00DD               	movwf	??_heibaiqi+5
  7709  03C7  085D               	movf	??_heibaiqi+5,w
  7710  03C8  00BA               	movwf	set_point@value
  7711  03C9  0864               	movf	_temp_cursor,w
  7712  03CA  3196  267C  3183   	fcall	_set_point
  7713                           
  7714                           ;heibaiqi.c: 245: temp_cursor.row=(temp_cursor.row+8-1)%8;
  7715  03CD  0020               	movlb	0	; select bank0
  7716  03CE  0864               	movf	_temp_cursor,w
  7717  03CF  3E07               	addlw	7
  7718  03D0  3907               	andlw	7
  7719  03D1  00D8               	movwf	??_heibaiqi
  7720  03D2  0858               	movf	??_heibaiqi,w
  7721  03D3  00E4               	movwf	_temp_cursor
  7722                           
  7723                           ;heibaiqi.c: 246: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] | 0x08;
  7724  03D4  0864               	movf	_temp_cursor,w
  7725  03D5  00D8               	movwf	??_heibaiqi
  7726  03D6  3003               	movlw	3
  7727  03D7                     u4785:	
  7728  03D7  35D8               	lslf	??_heibaiqi,f
  7729  03D8  0B89               	decfsz	9,f
  7730  03D9  2BD7               	goto	u4785
  7731  03DA  30A5               	movlw	(low (_table| 0))& (0+255)
  7732  03DB  0758               	addwf	??_heibaiqi,w
  7733  03DC  00D9               	movwf	??_heibaiqi+1
  7734  03DD  0865               	movf	_temp_cursor+1,w
  7735  03DE  0759               	addwf	??_heibaiqi+1,w
  7736  03DF  00DA               	movwf	??_heibaiqi+2
  7737  03E0  085A               	movf	??_heibaiqi+2,w
  7738  03E1  0086               	movwf	6
  7739  03E2  0187               	clrf	7
  7740  03E3  0801               	movf	1,w
  7741  03E4  3808               	iorlw	8
  7742  03E5  00DB               	movwf	??_heibaiqi+3
  7743  03E6  0864               	movf	_temp_cursor,w
  7744  03E7  00DC               	movwf	??_heibaiqi+4
  7745  03E8  3003               	movlw	3
  7746  03E9                     u4795:	
  7747  03E9  35DC               	lslf	??_heibaiqi+4,f
  7748  03EA  0B89               	decfsz	9,f
  7749  03EB  2BE9               	goto	u4795
  7750  03EC  30A5               	movlw	(low (_table| 0))& (0+255)
  7751  03ED  075C               	addwf	??_heibaiqi+4,w
  7752  03EE  00DD               	movwf	??_heibaiqi+5
  7753  03EF  0865               	movf	_temp_cursor+1,w
  7754  03F0  075D               	addwf	??_heibaiqi+5,w
  7755  03F1  00DE               	movwf	??_heibaiqi+6
  7756  03F2  085E               	movf	??_heibaiqi+6,w
  7757  03F3  0086               	movwf	6
  7758  03F4  0187               	clrf	7
  7759  03F5  085B               	movf	??_heibaiqi+3,w
  7760  03F6  0081               	movwf	1
  7761                           
  7762                           ;heibaiqi.c: 247: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]-5]);
  7763  03F7  0865               	movf	_temp_cursor+1,w
  7764  03F8  00D8               	movwf	??_heibaiqi
  7765  03F9  0858               	movf	??_heibaiqi,w
  7766  03FA  00B9               	movwf	set_point@point_y
  7767  03FB  0864               	movf	_temp_cursor,w
  7768  03FC  00D9               	movwf	??_heibaiqi+1
  7769  03FD  3003               	movlw	3
  7770  03FE                     u4805:	
  7771  03FE  35D9               	lslf	??_heibaiqi+1,f
  7772  03FF  0B89               	decfsz	9,f
  7773  0400  2BFE               	goto	u4805
  7774  0401  30A5               	movlw	(low (_table| 0))& (0+255)
  7775  0402  0759               	addwf	??_heibaiqi+1,w
  7776  0403  00DA               	movwf	??_heibaiqi+2
  7777  0404  0865               	movf	_temp_cursor+1,w
  7778  0405  075A               	addwf	??_heibaiqi+2,w
  7779  0406  00DB               	movwf	??_heibaiqi+3
  7780  0407  085B               	movf	??_heibaiqi+3,w
  7781  0408  0086               	movwf	6
  7782  0409  0187               	clrf	7
  7783  040A  0801               	movf	1,w
  7784  040B  00DC               	movwf	??_heibaiqi+4
  7785  040C  3002               	movlw	2
  7786  040D                     u4815:	
  7787  040D  35DC               	lslf	??_heibaiqi+4,f
  7788  040E  3EFF               	addlw	-1
  7789  040F  1D03               	skipz
  7790  0410  2C0D               	goto	u4815
  7791  0411  355C               	lslf	??_heibaiqi+4,w
  7792  0412  3ED8               	addlw	216
  7793  0413  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  7794  0414  00DD               	movwf	??_heibaiqi+5
  7795  0415  085D               	movf	??_heibaiqi+5,w
  7796  0416  00BA               	movwf	set_point@value
  7797  0417  0864               	movf	_temp_cursor,w
  7798  0418  3196  267C         	fcall	_set_point
  7799                           
  7800                           ;heibaiqi.c: 248: break;
  7801  041A  0008               	return
  7802  041B                     l3640:	
  7803                           ;heibaiqi.c: 249: case 2:
  7804                           
  7805                           
  7806                           ;heibaiqi.c: 250: key=0;
  7807  041B  0020               	movlb	0	; select bank0
  7808  041C  01E8               	clrf	_key
  7809                           
  7810                           ;heibaiqi.c: 251: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] & 0x03;
  7811  041D  0864               	movf	_temp_cursor,w
  7812  041E  00D8               	movwf	??_heibaiqi
  7813  041F  3003               	movlw	3
  7814  0420                     u4825:	
  7815  0420  35D8               	lslf	??_heibaiqi,f
  7816  0421  0B89               	decfsz	9,f
  7817  0422  2C20               	goto	u4825
  7818  0423  30A5               	movlw	(low (_table| 0))& (0+255)
  7819  0424  0758               	addwf	??_heibaiqi,w
  7820  0425  00D9               	movwf	??_heibaiqi+1
  7821  0426  0865               	movf	_temp_cursor+1,w
  7822  0427  0759               	addwf	??_heibaiqi+1,w
  7823  0428  00DA               	movwf	??_heibaiqi+2
  7824  0429  085A               	movf	??_heibaiqi+2,w
  7825  042A  0086               	movwf	6
  7826  042B  0187               	clrf	7
  7827  042C  0801               	movf	1,w
  7828  042D  3903               	andlw	3
  7829  042E  00DB               	movwf	??_heibaiqi+3
  7830  042F  0864               	movf	_temp_cursor,w
  7831  0430  00DC               	movwf	??_heibaiqi+4
  7832  0431  3003               	movlw	3
  7833  0432                     u4835:	
  7834  0432  35DC               	lslf	??_heibaiqi+4,f
  7835  0433  0B89               	decfsz	9,f
  7836  0434  2C32               	goto	u4835
  7837  0435  30A5               	movlw	(low (_table| 0))& (0+255)
  7838  0436  075C               	addwf	??_heibaiqi+4,w
  7839  0437  00DD               	movwf	??_heibaiqi+5
  7840  0438  0865               	movf	_temp_cursor+1,w
  7841  0439  075D               	addwf	??_heibaiqi+5,w
  7842  043A  00DE               	movwf	??_heibaiqi+6
  7843  043B  085E               	movf	??_heibaiqi+6,w
  7844  043C  0086               	movwf	6
  7845  043D  0187               	clrf	7
  7846  043E  085B               	movf	??_heibaiqi+3,w
  7847  043F  0081               	movwf	1
  7848                           
  7849                           ;heibaiqi.c: 252: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]]);
  7850  0440  0865               	movf	_temp_cursor+1,w
  7851  0441  00D8               	movwf	??_heibaiqi
  7852  0442  0858               	movf	??_heibaiqi,w
  7853  0443  00B9               	movwf	set_point@point_y
  7854  0444  0864               	movf	_temp_cursor,w
  7855  0445  00D9               	movwf	??_heibaiqi+1
  7856  0446  3003               	movlw	3
  7857  0447                     u4845:	
  7858  0447  35D9               	lslf	??_heibaiqi+1,f
  7859  0448  0B89               	decfsz	9,f
  7860  0449  2C47               	goto	u4845
  7861  044A  30A5               	movlw	(low (_table| 0))& (0+255)
  7862  044B  0759               	addwf	??_heibaiqi+1,w
  7863  044C  00DA               	movwf	??_heibaiqi+2
  7864  044D  0865               	movf	_temp_cursor+1,w
  7865  044E  075A               	addwf	??_heibaiqi+2,w
  7866  044F  00DB               	movwf	??_heibaiqi+3
  7867  0450  085B               	movf	??_heibaiqi+3,w
  7868  0451  0086               	movwf	6
  7869  0452  0187               	clrf	7
  7870  0453  0801               	movf	1,w
  7871  0454  00DC               	movwf	??_heibaiqi+4
  7872  0455  3002               	movlw	2
  7873  0456                     u4855:	
  7874  0456  35DC               	lslf	??_heibaiqi+4,f
  7875  0457  3EFF               	addlw	-1
  7876  0458  1D03               	skipz
  7877  0459  2C56               	goto	u4855
  7878  045A  355C               	lslf	??_heibaiqi+4,w
  7879  045B  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  7880  045C  00DD               	movwf	??_heibaiqi+5
  7881  045D  085D               	movf	??_heibaiqi+5,w
  7882  045E  00BA               	movwf	set_point@value
  7883  045F  0864               	movf	_temp_cursor,w
  7884  0460  3196  267C  3183   	fcall	_set_point
  7885                           
  7886                           ;heibaiqi.c: 253: temp_cursor.row=(temp_cursor.row+1)%8;
  7887  0463  0020               	movlb	0	; select bank0
  7888  0464  0864               	movf	_temp_cursor,w
  7889  0465  3E01               	addlw	1
  7890  0466  3907               	andlw	7
  7891  0467  00D8               	movwf	??_heibaiqi
  7892  0468  0858               	movf	??_heibaiqi,w
  7893  0469  00E4               	movwf	_temp_cursor
  7894                           
  7895                           ;heibaiqi.c: 254: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] | 0x08;
  7896  046A  0864               	movf	_temp_cursor,w
  7897  046B  00D8               	movwf	??_heibaiqi
  7898  046C  3003               	movlw	3
  7899  046D                     u4865:	
  7900  046D  35D8               	lslf	??_heibaiqi,f
  7901  046E  0B89               	decfsz	9,f
  7902  046F  2C6D               	goto	u4865
  7903  0470  30A5               	movlw	(low (_table| 0))& (0+255)
  7904  0471  0758               	addwf	??_heibaiqi,w
  7905  0472  00D9               	movwf	??_heibaiqi+1
  7906  0473  0865               	movf	_temp_cursor+1,w
  7907  0474  0759               	addwf	??_heibaiqi+1,w
  7908  0475  00DA               	movwf	??_heibaiqi+2
  7909  0476  085A               	movf	??_heibaiqi+2,w
  7910  0477  0086               	movwf	6
  7911  0478  0187               	clrf	7
  7912  0479  0801               	movf	1,w
  7913  047A  3808               	iorlw	8
  7914  047B  00DB               	movwf	??_heibaiqi+3
  7915  047C  0864               	movf	_temp_cursor,w
  7916  047D  00DC               	movwf	??_heibaiqi+4
  7917  047E  3003               	movlw	3
  7918  047F                     u4875:	
  7919  047F  35DC               	lslf	??_heibaiqi+4,f
  7920  0480  0B89               	decfsz	9,f
  7921  0481  2C7F               	goto	u4875
  7922  0482  30A5               	movlw	(low (_table| 0))& (0+255)
  7923  0483  075C               	addwf	??_heibaiqi+4,w
  7924  0484  00DD               	movwf	??_heibaiqi+5
  7925  0485  0865               	movf	_temp_cursor+1,w
  7926  0486  075D               	addwf	??_heibaiqi+5,w
  7927  0487  00DE               	movwf	??_heibaiqi+6
  7928  0488  085E               	movf	??_heibaiqi+6,w
  7929  0489  0086               	movwf	6
  7930  048A  0187               	clrf	7
  7931  048B  085B               	movf	??_heibaiqi+3,w
  7932  048C  0081               	movwf	1
  7933                           
  7934                           ;heibaiqi.c: 255: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]-5]);
  7935  048D  0865               	movf	_temp_cursor+1,w
  7936  048E  00D8               	movwf	??_heibaiqi
  7937  048F  0858               	movf	??_heibaiqi,w
  7938  0490  00B9               	movwf	set_point@point_y
  7939  0491  0864               	movf	_temp_cursor,w
  7940  0492  00D9               	movwf	??_heibaiqi+1
  7941  0493  3003               	movlw	3
  7942  0494                     u4885:	
  7943  0494  35D9               	lslf	??_heibaiqi+1,f
  7944  0495  0B89               	decfsz	9,f
  7945  0496  2C94               	goto	u4885
  7946  0497  30A5               	movlw	(low (_table| 0))& (0+255)
  7947  0498  0759               	addwf	??_heibaiqi+1,w
  7948  0499  00DA               	movwf	??_heibaiqi+2
  7949  049A  0865               	movf	_temp_cursor+1,w
  7950  049B  075A               	addwf	??_heibaiqi+2,w
  7951  049C  00DB               	movwf	??_heibaiqi+3
  7952  049D  085B               	movf	??_heibaiqi+3,w
  7953  049E  0086               	movwf	6
  7954  049F  0187               	clrf	7
  7955  04A0  0801               	movf	1,w
  7956  04A1  00DC               	movwf	??_heibaiqi+4
  7957  04A2  3002               	movlw	2
  7958  04A3                     u4895:	
  7959  04A3  35DC               	lslf	??_heibaiqi+4,f
  7960  04A4  3EFF               	addlw	-1
  7961  04A5  1D03               	skipz
  7962  04A6  2CA3               	goto	u4895
  7963  04A7  355C               	lslf	??_heibaiqi+4,w
  7964  04A8  3ED8               	addlw	216
  7965  04A9  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  7966  04AA  00DD               	movwf	??_heibaiqi+5
  7967  04AB  085D               	movf	??_heibaiqi+5,w
  7968  04AC  00BA               	movwf	set_point@value
  7969  04AD  0864               	movf	_temp_cursor,w
  7970  04AE  3196  267C         	fcall	_set_point
  7971                           
  7972                           ;heibaiqi.c: 256: break;
  7973  04B0  0008               	return
  7974  04B1                     l3652:	
  7975                           ;heibaiqi.c: 257: case 3:
  7976                           
  7977                           
  7978                           ;heibaiqi.c: 258: key=0;
  7979  04B1  0020               	movlb	0	; select bank0
  7980  04B2  01E8               	clrf	_key
  7981                           
  7982                           ;heibaiqi.c: 259: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] & 0x03;
  7983  04B3  0864               	movf	_temp_cursor,w
  7984  04B4  00D8               	movwf	??_heibaiqi
  7985  04B5  3003               	movlw	3
  7986  04B6                     u4905:	
  7987  04B6  35D8               	lslf	??_heibaiqi,f
  7988  04B7  0B89               	decfsz	9,f
  7989  04B8  2CB6               	goto	u4905
  7990  04B9  30A5               	movlw	(low (_table| 0))& (0+255)
  7991  04BA  0758               	addwf	??_heibaiqi,w
  7992  04BB  00D9               	movwf	??_heibaiqi+1
  7993  04BC  0865               	movf	_temp_cursor+1,w
  7994  04BD  0759               	addwf	??_heibaiqi+1,w
  7995  04BE  00DA               	movwf	??_heibaiqi+2
  7996  04BF  085A               	movf	??_heibaiqi+2,w
  7997  04C0  0086               	movwf	6
  7998  04C1  0187               	clrf	7
  7999  04C2  0801               	movf	1,w
  8000  04C3  3903               	andlw	3
  8001  04C4  00DB               	movwf	??_heibaiqi+3
  8002  04C5  0864               	movf	_temp_cursor,w
  8003  04C6  00DC               	movwf	??_heibaiqi+4
  8004  04C7  3003               	movlw	3
  8005  04C8                     u4915:	
  8006  04C8  35DC               	lslf	??_heibaiqi+4,f
  8007  04C9  0B89               	decfsz	9,f
  8008  04CA  2CC8               	goto	u4915
  8009  04CB  30A5               	movlw	(low (_table| 0))& (0+255)
  8010  04CC  075C               	addwf	??_heibaiqi+4,w
  8011  04CD  00DD               	movwf	??_heibaiqi+5
  8012  04CE  0865               	movf	_temp_cursor+1,w
  8013  04CF  075D               	addwf	??_heibaiqi+5,w
  8014  04D0  00DE               	movwf	??_heibaiqi+6
  8015  04D1  085E               	movf	??_heibaiqi+6,w
  8016  04D2  0086               	movwf	6
  8017  04D3  0187               	clrf	7
  8018  04D4  085B               	movf	??_heibaiqi+3,w
  8019  04D5  0081               	movwf	1
  8020                           
  8021                           ;heibaiqi.c: 260: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]]);
  8022  04D6  0865               	movf	_temp_cursor+1,w
  8023  04D7  00D8               	movwf	??_heibaiqi
  8024  04D8  0858               	movf	??_heibaiqi,w
  8025  04D9  00B9               	movwf	set_point@point_y
  8026  04DA  0864               	movf	_temp_cursor,w
  8027  04DB  00D9               	movwf	??_heibaiqi+1
  8028  04DC  3003               	movlw	3
  8029  04DD                     u4925:	
  8030  04DD  35D9               	lslf	??_heibaiqi+1,f
  8031  04DE  0B89               	decfsz	9,f
  8032  04DF  2CDD               	goto	u4925
  8033  04E0  30A5               	movlw	(low (_table| 0))& (0+255)
  8034  04E1  0759               	addwf	??_heibaiqi+1,w
  8035  04E2  00DA               	movwf	??_heibaiqi+2
  8036  04E3  0865               	movf	_temp_cursor+1,w
  8037  04E4  075A               	addwf	??_heibaiqi+2,w
  8038  04E5  00DB               	movwf	??_heibaiqi+3
  8039  04E6  085B               	movf	??_heibaiqi+3,w
  8040  04E7  0086               	movwf	6
  8041  04E8  0187               	clrf	7
  8042  04E9  0801               	movf	1,w
  8043  04EA  00DC               	movwf	??_heibaiqi+4
  8044  04EB  3002               	movlw	2
  8045  04EC                     u4935:	
  8046  04EC  35DC               	lslf	??_heibaiqi+4,f
  8047  04ED  3EFF               	addlw	-1
  8048  04EE  1D03               	skipz
  8049  04EF  2CEC               	goto	u4935
  8050  04F0  355C               	lslf	??_heibaiqi+4,w
  8051  04F1  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  8052  04F2  00DD               	movwf	??_heibaiqi+5
  8053  04F3  085D               	movf	??_heibaiqi+5,w
  8054  04F4  00BA               	movwf	set_point@value
  8055  04F5  0864               	movf	_temp_cursor,w
  8056  04F6  3196  267C  3183   	fcall	_set_point
  8057                           
  8058                           ;heibaiqi.c: 261: temp_cursor.col=(temp_cursor.col+8-1)%8;
  8059  04F9  0020               	movlb	0	; select bank0
  8060  04FA  0865               	movf	_temp_cursor+1,w
  8061  04FB  3E07               	addlw	7
  8062  04FC  3907               	andlw	7
  8063  04FD  00D8               	movwf	??_heibaiqi
  8064  04FE  0858               	movf	??_heibaiqi,w
  8065  04FF  00E5               	movwf	_temp_cursor+1
  8066                           
  8067                           ;heibaiqi.c: 262: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] | 0x08;
  8068  0500  0864               	movf	_temp_cursor,w
  8069  0501  00D8               	movwf	??_heibaiqi
  8070  0502  3003               	movlw	3
  8071  0503                     u4945:	
  8072  0503  35D8               	lslf	??_heibaiqi,f
  8073  0504  0B89               	decfsz	9,f
  8074  0505  2D03               	goto	u4945
  8075  0506  30A5               	movlw	(low (_table| 0))& (0+255)
  8076  0507  0758               	addwf	??_heibaiqi,w
  8077  0508  00D9               	movwf	??_heibaiqi+1
  8078  0509  0865               	movf	_temp_cursor+1,w
  8079  050A  0759               	addwf	??_heibaiqi+1,w
  8080  050B  00DA               	movwf	??_heibaiqi+2
  8081  050C  085A               	movf	??_heibaiqi+2,w
  8082  050D  0086               	movwf	6
  8083  050E  0187               	clrf	7
  8084  050F  0801               	movf	1,w
  8085  0510  3808               	iorlw	8
  8086  0511  00DB               	movwf	??_heibaiqi+3
  8087  0512  0864               	movf	_temp_cursor,w
  8088  0513  00DC               	movwf	??_heibaiqi+4
  8089  0514  3003               	movlw	3
  8090  0515                     u4955:	
  8091  0515  35DC               	lslf	??_heibaiqi+4,f
  8092  0516  0B89               	decfsz	9,f
  8093  0517  2D15               	goto	u4955
  8094  0518  30A5               	movlw	(low (_table| 0))& (0+255)
  8095  0519  075C               	addwf	??_heibaiqi+4,w
  8096  051A  00DD               	movwf	??_heibaiqi+5
  8097  051B  0865               	movf	_temp_cursor+1,w
  8098  051C  075D               	addwf	??_heibaiqi+5,w
  8099  051D  00DE               	movwf	??_heibaiqi+6
  8100  051E  085E               	movf	??_heibaiqi+6,w
  8101  051F  0086               	movwf	6
  8102  0520  0187               	clrf	7
  8103  0521  085B               	movf	??_heibaiqi+3,w
  8104  0522  0081               	movwf	1
  8105                           
  8106                           ;heibaiqi.c: 263: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]-5]);
  8107  0523  0865               	movf	_temp_cursor+1,w
  8108  0524  00D8               	movwf	??_heibaiqi
  8109  0525  0858               	movf	??_heibaiqi,w
  8110  0526  00B9               	movwf	set_point@point_y
  8111  0527  0864               	movf	_temp_cursor,w
  8112  0528  00D9               	movwf	??_heibaiqi+1
  8113  0529  3003               	movlw	3
  8114  052A                     u4965:	
  8115  052A  35D9               	lslf	??_heibaiqi+1,f
  8116  052B  0B89               	decfsz	9,f
  8117  052C  2D2A               	goto	u4965
  8118  052D  30A5               	movlw	(low (_table| 0))& (0+255)
  8119  052E  0759               	addwf	??_heibaiqi+1,w
  8120  052F  00DA               	movwf	??_heibaiqi+2
  8121  0530  0865               	movf	_temp_cursor+1,w
  8122  0531  075A               	addwf	??_heibaiqi+2,w
  8123  0532  00DB               	movwf	??_heibaiqi+3
  8124  0533  085B               	movf	??_heibaiqi+3,w
  8125  0534  0086               	movwf	6
  8126  0535  0187               	clrf	7
  8127  0536  0801               	movf	1,w
  8128  0537  00DC               	movwf	??_heibaiqi+4
  8129  0538  3002               	movlw	2
  8130  0539                     u4975:	
  8131  0539  35DC               	lslf	??_heibaiqi+4,f
  8132  053A  3EFF               	addlw	-1
  8133  053B  1D03               	skipz
  8134  053C  2D39               	goto	u4975
  8135  053D  355C               	lslf	??_heibaiqi+4,w
  8136  053E  3ED8               	addlw	216
  8137  053F  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  8138  0540  00DD               	movwf	??_heibaiqi+5
  8139  0541  085D               	movf	??_heibaiqi+5,w
  8140  0542  00BA               	movwf	set_point@value
  8141  0543  0864               	movf	_temp_cursor,w
  8142  0544  3196  267C         	fcall	_set_point
  8143                           
  8144                           ;heibaiqi.c: 264: break;
  8145  0546  0008               	return
  8146  0547                     l3664:	
  8147                           ;heibaiqi.c: 265: case 4:
  8148                           
  8149                           
  8150                           ;heibaiqi.c: 266: key=0;
  8151  0547  0020               	movlb	0	; select bank0
  8152  0548  01E8               	clrf	_key
  8153                           
  8154                           ;heibaiqi.c: 267: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] & 0x03;
  8155  0549  0864               	movf	_temp_cursor,w
  8156  054A  00D8               	movwf	??_heibaiqi
  8157  054B  3003               	movlw	3
  8158  054C                     u4985:	
  8159  054C  35D8               	lslf	??_heibaiqi,f
  8160  054D  0B89               	decfsz	9,f
  8161  054E  2D4C               	goto	u4985
  8162  054F  30A5               	movlw	(low (_table| 0))& (0+255)
  8163  0550  0758               	addwf	??_heibaiqi,w
  8164  0551  00D9               	movwf	??_heibaiqi+1
  8165  0552  0865               	movf	_temp_cursor+1,w
  8166  0553  0759               	addwf	??_heibaiqi+1,w
  8167  0554  00DA               	movwf	??_heibaiqi+2
  8168  0555  085A               	movf	??_heibaiqi+2,w
  8169  0556  0086               	movwf	6
  8170  0557  0187               	clrf	7
  8171  0558  0801               	movf	1,w
  8172  0559  3903               	andlw	3
  8173  055A  00DB               	movwf	??_heibaiqi+3
  8174  055B  0864               	movf	_temp_cursor,w
  8175  055C  00DC               	movwf	??_heibaiqi+4
  8176  055D  3003               	movlw	3
  8177  055E                     u4995:	
  8178  055E  35DC               	lslf	??_heibaiqi+4,f
  8179  055F  0B89               	decfsz	9,f
  8180  0560  2D5E               	goto	u4995
  8181  0561  30A5               	movlw	(low (_table| 0))& (0+255)
  8182  0562  075C               	addwf	??_heibaiqi+4,w
  8183  0563  00DD               	movwf	??_heibaiqi+5
  8184  0564  0865               	movf	_temp_cursor+1,w
  8185  0565  075D               	addwf	??_heibaiqi+5,w
  8186  0566  00DE               	movwf	??_heibaiqi+6
  8187  0567  085E               	movf	??_heibaiqi+6,w
  8188  0568  0086               	movwf	6
  8189  0569  0187               	clrf	7
  8190  056A  085B               	movf	??_heibaiqi+3,w
  8191  056B  0081               	movwf	1
  8192                           
  8193                           ;heibaiqi.c: 268: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]]);
  8194  056C  0865               	movf	_temp_cursor+1,w
  8195  056D  00D8               	movwf	??_heibaiqi
  8196  056E  0858               	movf	??_heibaiqi,w
  8197  056F  00B9               	movwf	set_point@point_y
  8198  0570  0864               	movf	_temp_cursor,w
  8199  0571  00D9               	movwf	??_heibaiqi+1
  8200  0572  3003               	movlw	3
  8201  0573                     u5005:	
  8202  0573  35D9               	lslf	??_heibaiqi+1,f
  8203  0574  0B89               	decfsz	9,f
  8204  0575  2D73               	goto	u5005
  8205  0576  30A5               	movlw	(low (_table| 0))& (0+255)
  8206  0577  0759               	addwf	??_heibaiqi+1,w
  8207  0578  00DA               	movwf	??_heibaiqi+2
  8208  0579  0865               	movf	_temp_cursor+1,w
  8209  057A  075A               	addwf	??_heibaiqi+2,w
  8210  057B  00DB               	movwf	??_heibaiqi+3
  8211  057C  085B               	movf	??_heibaiqi+3,w
  8212  057D  0086               	movwf	6
  8213  057E  0187               	clrf	7
  8214  057F  0801               	movf	1,w
  8215  0580  00DC               	movwf	??_heibaiqi+4
  8216  0581  3002               	movlw	2
  8217  0582                     u5015:	
  8218  0582  35DC               	lslf	??_heibaiqi+4,f
  8219  0583  3EFF               	addlw	-1
  8220  0584  1D03               	skipz
  8221  0585  2D82               	goto	u5015
  8222  0586  355C               	lslf	??_heibaiqi+4,w
  8223  0587  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  8224  0588  00DD               	movwf	??_heibaiqi+5
  8225  0589  085D               	movf	??_heibaiqi+5,w
  8226  058A  00BA               	movwf	set_point@value
  8227  058B  0864               	movf	_temp_cursor,w
  8228  058C  3196  267C  3183   	fcall	_set_point
  8229                           
  8230                           ;heibaiqi.c: 269: temp_cursor.col=(temp_cursor.col+1)%8;
  8231  058F  0020               	movlb	0	; select bank0
  8232  0590  0865               	movf	_temp_cursor+1,w
  8233  0591  3E01               	addlw	1
  8234  0592  3907               	andlw	7
  8235  0593  00D8               	movwf	??_heibaiqi
  8236  0594  0858               	movf	??_heibaiqi,w
  8237  0595  00E5               	movwf	_temp_cursor+1
  8238                           
  8239                           ;heibaiqi.c: 270: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] | 0x08;
  8240  0596  0864               	movf	_temp_cursor,w
  8241  0597  00D8               	movwf	??_heibaiqi
  8242  0598  3003               	movlw	3
  8243  0599                     u5025:	
  8244  0599  35D8               	lslf	??_heibaiqi,f
  8245  059A  0B89               	decfsz	9,f
  8246  059B  2D99               	goto	u5025
  8247  059C  30A5               	movlw	(low (_table| 0))& (0+255)
  8248  059D  0758               	addwf	??_heibaiqi,w
  8249  059E  00D9               	movwf	??_heibaiqi+1
  8250  059F  0865               	movf	_temp_cursor+1,w
  8251  05A0  0759               	addwf	??_heibaiqi+1,w
  8252  05A1  00DA               	movwf	??_heibaiqi+2
  8253  05A2  085A               	movf	??_heibaiqi+2,w
  8254  05A3  0086               	movwf	6
  8255  05A4  0187               	clrf	7
  8256  05A5  0801               	movf	1,w
  8257  05A6  3808               	iorlw	8
  8258  05A7  00DB               	movwf	??_heibaiqi+3
  8259  05A8  0864               	movf	_temp_cursor,w
  8260  05A9  00DC               	movwf	??_heibaiqi+4
  8261  05AA  3003               	movlw	3
  8262  05AB                     u5035:	
  8263  05AB  35DC               	lslf	??_heibaiqi+4,f
  8264  05AC  0B89               	decfsz	9,f
  8265  05AD  2DAB               	goto	u5035
  8266  05AE  30A5               	movlw	(low (_table| 0))& (0+255)
  8267  05AF  075C               	addwf	??_heibaiqi+4,w
  8268  05B0  00DD               	movwf	??_heibaiqi+5
  8269  05B1  0865               	movf	_temp_cursor+1,w
  8270  05B2  075D               	addwf	??_heibaiqi+5,w
  8271  05B3  00DE               	movwf	??_heibaiqi+6
  8272  05B4  085E               	movf	??_heibaiqi+6,w
  8273  05B5  0086               	movwf	6
  8274  05B6  0187               	clrf	7
  8275  05B7  085B               	movf	??_heibaiqi+3,w
  8276  05B8  0081               	movwf	1
  8277                           
  8278                           ;heibaiqi.c: 271: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]-5]);
  8279  05B9  0865               	movf	_temp_cursor+1,w
  8280  05BA  00D8               	movwf	??_heibaiqi
  8281  05BB  0858               	movf	??_heibaiqi,w
  8282  05BC  00B9               	movwf	set_point@point_y
  8283  05BD  0864               	movf	_temp_cursor,w
  8284  05BE  00D9               	movwf	??_heibaiqi+1
  8285  05BF  3003               	movlw	3
  8286  05C0                     u5045:	
  8287  05C0  35D9               	lslf	??_heibaiqi+1,f
  8288  05C1  0B89               	decfsz	9,f
  8289  05C2  2DC0               	goto	u5045
  8290  05C3  30A5               	movlw	(low (_table| 0))& (0+255)
  8291  05C4  0759               	addwf	??_heibaiqi+1,w
  8292  05C5  00DA               	movwf	??_heibaiqi+2
  8293  05C6  0865               	movf	_temp_cursor+1,w
  8294  05C7  075A               	addwf	??_heibaiqi+2,w
  8295  05C8  00DB               	movwf	??_heibaiqi+3
  8296  05C9  085B               	movf	??_heibaiqi+3,w
  8297  05CA  0086               	movwf	6
  8298  05CB  0187               	clrf	7
  8299  05CC  0801               	movf	1,w
  8300  05CD  00DC               	movwf	??_heibaiqi+4
  8301  05CE  3002               	movlw	2
  8302  05CF                     u5055:	
  8303  05CF  35DC               	lslf	??_heibaiqi+4,f
  8304  05D0  3EFF               	addlw	-1
  8305  05D1  1D03               	skipz
  8306  05D2  2DCF               	goto	u5055
  8307  05D3  355C               	lslf	??_heibaiqi+4,w
  8308  05D4  3ED8               	addlw	216
  8309  05D5  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  8310  05D6  00DD               	movwf	??_heibaiqi+5
  8311  05D7  085D               	movf	??_heibaiqi+5,w
  8312  05D8  00BA               	movwf	set_point@value
  8313  05D9  0864               	movf	_temp_cursor,w
  8314  05DA  3196  267C         	fcall	_set_point
  8315                           
  8316                           ;heibaiqi.c: 272: break;
  8317  05DC  0008               	return
  8318  05DD                     l3676:	
  8319                           ;heibaiqi.c: 273: case 5:
  8320                           
  8321                           
  8322                           ;heibaiqi.c: 274: key=0;
  8323  05DD  0020               	movlb	0	; select bank0
  8324  05DE  01E8               	clrf	_key
  8325                           
  8326                           ;heibaiqi.c: 275: if(!choose_point(temp_cursor.row,temp_cursor.col,player))
  8327  05DF  0865               	movf	_temp_cursor+1,w
  8328  05E0  00D8               	movwf	??_heibaiqi
  8329  05E1  0858               	movf	??_heibaiqi,w
  8330  05E2  00C5               	movwf	choose_point@col
  8331  05E3  0021               	movlb	1	; select bank1
  8332  05E4  0821               	movf	_player^(0+128),w
  8333  05E5  0020               	movlb	0	; select bank0
  8334  05E6  00D9               	movwf	??_heibaiqi+1
  8335  05E7  0859               	movf	??_heibaiqi+1,w
  8336  05E8  00C6               	movwf	choose_point@ply
  8337  05E9  0864               	movf	_temp_cursor,w
  8338  05EA  3186  2652  3183   	fcall	_choose_point
  8339  05ED  3A00               	xorlw	0
  8340  05EE  1903               	btfsc	3,2
  8341  05EF  0008               	return
  8342                           
  8343                           ;heibaiqi.c: 278: result = judge_result();
  8344                           
  8345                           ;heibaiqi.c: 276: break;
  8346  05F0  319F  2747  3183   	fcall	_judge_result
  8347  05F3  0020               	movlb	0	; select bank0
  8348  05F4  00D8               	movwf	??_heibaiqi
  8349  05F5  0858               	movf	??_heibaiqi,w
  8350  05F6  0021               	movlb	1	; select bank1
  8351  05F7  00A2               	movwf	_result^(0+128)
  8352                           
  8353                           ;heibaiqi.c: 279: if(result==0)
  8354  05F8  0822               	movf	_result^(0+128),w
  8355  05F9  1D03               	btfss	3,2
  8356  05FA  2E04               	goto	l3690
  8357                           
  8358                           ;heibaiqi.c: 280: {
  8359                           ;heibaiqi.c: 281: player=3-player;
  8360  05FB  0321               	decf	_player^(0+128),w
  8361  05FC  3AFF               	xorlw	255
  8362  05FD  3E03               	addlw	3
  8363  05FE  0020               	movlb	0	; select bank0
  8364  05FF  00D8               	movwf	??_heibaiqi
  8365  0600  0858               	movf	??_heibaiqi,w
  8366  0601  0021               	movlb	1	; select bank1
  8367  0602  00A1               	movwf	_player^(0+128)
  8368                           
  8369                           ;heibaiqi.c: 282: break;
  8370  0603  0008               	return
  8371  0604                     l3690:	
  8372                           ;heibaiqi.c: 283: }
  8373                           
  8374                           
  8375                           ;heibaiqi.c: 284: else if(result==1)
  8376  0604  0322               	decf	_result^(0+128),w
  8377  0605  1D03               	btfss	3,2
  8378  0606  2E0C               	goto	l3694
  8379                           
  8380                           ;heibaiqi.c: 285: {
  8381                           ;heibaiqi.c: 286: Display_Chars(1, "Black Win",1);
  8382  0607  3040               	movlw	low (STR_1| (0+32768))
  8383  0608  0020               	movlb	0	; select bank0
  8384  0609  00B2               	movwf	Display_Chars@string
  8385  060A  3098               	movlw	high (STR_1| (0+32768))
  8386  060B  2E1F               	goto	L5
  8387  060C                     l3694:	
  8388                           ;heibaiqi.c: 288: }
  8389                           
  8390                           ;heibaiqi.c: 287: Display_Chars(2, "Press back to exit",1);
  8391                           
  8392                           
  8393                           ;heibaiqi.c: 289: else if(result==2)
  8394  060C  3002               	movlw	2
  8395  060D  0021               	movlb	1	; select bank1
  8396  060E  0622               	xorwf	_result^(0+128),w
  8397  060F  1D03               	btfss	3,2
  8398  0610  2E16               	goto	l3698
  8399                           
  8400                           ;heibaiqi.c: 290: {
  8401                           ;heibaiqi.c: 291: Display_Chars(1, "White Win",1);
  8402  0611  3036               	movlw	low (STR_3| (0+32768))
  8403  0612  0020               	movlb	0	; select bank0
  8404  0613  00B2               	movwf	Display_Chars@string
  8405  0614  3098               	movlw	high (STR_3| (0+32768))
  8406  0615  2E1F               	goto	L5
  8407  0616                     l3698:	
  8408                           ;heibaiqi.c: 293: }
  8409                           
  8410                           ;heibaiqi.c: 292: Display_Chars(2, "Press back to exit",1);
  8411                           
  8412                           
  8413                           ;heibaiqi.c: 294: else if(result==3)
  8414  0616  3003               	movlw	3
  8415  0617  0021               	movlb	1	; select bank1
  8416  0618  0622               	xorwf	_result^(0+128),w
  8417  0619  1D03               	btfss	3,2
  8418  061A  2E31               	goto	l3702
  8419                           
  8420                           ;heibaiqi.c: 295: {
  8421                           ;heibaiqi.c: 296: Display_Chars(1, "ping ju",1);
  8422  061B  30BB               	movlw	low (STR_5| (0+32768))
  8423  061C  0020               	movlb	0	; select bank0
  8424  061D  00B2               	movwf	Display_Chars@string
  8425  061E  3098               	movlw	high (STR_5| (0+32768))
  8426  061F                     L5:	
  8427  061F  00B3               	movwf	Display_Chars@string+1
  8428  0620  01B4               	clrf	Display_Chars@y
  8429  0621  0AB4               	incf	Display_Chars@y,f
  8430  0622  3001               	movlw	1
  8431  0623  3192  22ED  3183   	fcall	_Display_Chars
  8432                           
  8433                           ;heibaiqi.c: 297: Display_Chars(2, "Press back to exit",1);
  8434  0626  3000               	movlw	low (STR_2| (0+32768))
  8435  0627  0020               	movlb	0	; select bank0
  8436  0628  00B2               	movwf	Display_Chars@string
  8437  0629  3098               	movlw	high (STR_2| (0+32768))
  8438  062A  00B3               	movwf	Display_Chars@string+1
  8439  062B  01B4               	clrf	Display_Chars@y
  8440  062C  0AB4               	incf	Display_Chars@y,f
  8441  062D  3002               	movlw	2
  8442  062E  3192  22ED  3183   	fcall	_Display_Chars
  8443  0631                     l3702:	
  8444                           ;heibaiqi.c: 300: ;
  8445                           
  8446                           ;heibaiqi.c: 298: }
  8447                           ;heibaiqi.c: 299: while(key!=6)
  8448                           
  8449  0631  3006               	movlw	6
  8450  0632  0020               	movlb	0	; select bank0
  8451  0633  0668               	xorwf	_key,w
  8452  0634  1D03               	btfss	3,2
  8453  0635  2E31               	goto	l3702
  8454  0636                     l3704:	
  8455                           ;heibaiqi.c: 301: case 6:
  8456                           
  8457                           
  8458                           ;heibaiqi.c: 302: init_environment();
  8459  0636  319E  269E  3183   	fcall	_init_environment
  8460                           
  8461                           ;heibaiqi.c: 303: set_menu();
  8462  0639  319F  276B         	fcall	_set_menu
  8463                           
  8464                           ;heibaiqi.c: 305: }
  8465                           
  8466                           ;heibaiqi.c: 304: break;
  8467  063B  0008               	return
  8468  063C                     l3710:	
  8469  063C  0020               	movlb	0	; select bank0
  8470  063D  0868               	movf	_key,w
  8471                           
  8472                           ; Switch size 1, requested type "space"
  8473                           ; Number of cases is 6, Range of values is 1 to 6
  8474                           ; switch strategies available:
  8475                           ; Name         Instructions Cycles
  8476                           ; simple_byte           19    10 (average)
  8477                           ; direct_byte           21     9 (fixed)
  8478                           ; jumptable            263     9 (fixed)
  8479                           ;	Chosen strategy is simple_byte
  8480  063E  3A01               	xorlw	1	; case 1
  8481  063F  1903               	skipnz
  8482  0640  2B85               	goto	l3628
  8483  0641  3A03               	xorlw	3	; case 2
  8484  0642  1903               	skipnz
  8485  0643  2C1B               	goto	l3640
  8486  0644  3A01               	xorlw	1	; case 3
  8487  0645  1903               	skipnz
  8488  0646  2CB1               	goto	l3652
  8489  0647  3A07               	xorlw	7	; case 4
  8490  0648  1903               	skipnz
  8491  0649  2D47               	goto	l3664
  8492  064A  3A01               	xorlw	1	; case 5
  8493  064B  1903               	skipnz
  8494  064C  2DDD               	goto	l3676
  8495  064D  3A03               	xorlw	3	; case 6
  8496  064E  1903               	skipnz
  8497  064F  2E36               	goto	l3704
  8498  0650  2E51               	goto	l163
  8499  0651                     l163:	
  8500  0651  0008               	return
  8501  0652                     __end_of_heibaiqi:	
  8502                           
  8503                           	psect	text20
  8504  1F6B                     __ptext20:	
  8505 ;; *************** function _set_menu *****************
  8506 ;; Defined at:
  8507 ;;		line 341 in file "func.c"
  8508 ;; Parameters:    Size  Location     Type
  8509 ;;		None
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;		None
  8512 ;; Return value:  Size  Location     Type
  8513 ;;                  1    wreg      void 
  8514 ;; Registers used:
  8515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8516 ;; Tracked objects:
  8517 ;;		On entry : 0/0
  8518 ;;		On exit  : 0/0
  8519 ;;		Unchanged: 0/0
  8520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;Total ram usage:        1 bytes
  8526 ;; Hardware stack levels used:    1
  8527 ;; Hardware stack levels required when called:    8
  8528 ;; This function calls:
  8529 ;;		_Display_Chars
  8530 ;;		_set_point
  8531 ;; This function is called by:
  8532 ;;		_heibaiqi
  8533 ;;		_main
  8534 ;;		_choose_level2
  8535 ;; This function uses a non-reentrant model
  8536 ;;
  8537                           
  8538                           
  8539                           ;psect for function _set_menu
  8540  1F6B                     _set_menu:	
  8541                           
  8542                           ;func.c: 343: Display_Chars(1, "heibaiqi",2);
  8543                           
  8544                           ;incstack = 0
  8545                           ; Regs used in _set_menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8546  1F6B  304A               	movlw	low (STR_10| (0+32768))
  8547  1F6C  0020               	movlb	0	; select bank0
  8548  1F6D  00B2               	movwf	Display_Chars@string
  8549  1F6E  3098               	movlw	high (STR_10| (0+32768))
  8550  1F6F  00B3               	movwf	Display_Chars@string+1
  8551  1F70  3002               	movlw	2
  8552  1F71  00C5               	movwf	??_set_menu
  8553  1F72  0845               	movf	??_set_menu,w
  8554  1F73  00B4               	movwf	Display_Chars@y
  8555  1F74  3001               	movlw	1
  8556  1F75  3192  22ED  319F   	fcall	_Display_Chars
  8557                           
  8558                           ;func.c: 344: Display_Chars(2,"wayout",2);
  8559  1F78  30C3               	movlw	low (STR_11| (0+32768))
  8560  1F79  0020               	movlb	0	; select bank0
  8561  1F7A  00B2               	movwf	Display_Chars@string
  8562  1F7B  3098               	movlw	high (STR_11| (0+32768))
  8563  1F7C  00B3               	movwf	Display_Chars@string+1
  8564  1F7D  3002               	movlw	2
  8565  1F7E  00C5               	movwf	??_set_menu
  8566  1F7F  0845               	movf	??_set_menu,w
  8567  1F80  00B4               	movwf	Display_Chars@y
  8568  1F81  3002               	movlw	2
  8569  1F82  3192  22ED  319F   	fcall	_Display_Chars
  8570                           
  8571                           ;func.c: 345: set_point(0,0,screen[3]);
  8572  1F85  0020               	movlb	0	; select bank0
  8573  1F86  01B9               	clrf	set_point@point_y
  8574  1F87  3038               	movlw	(low ((_screen| (0+256)+24)))& (0+255)
  8575  1F88  00C5               	movwf	??_set_menu
  8576  1F89  0845               	movf	??_set_menu,w
  8577  1F8A  00BA               	movwf	set_point@value
  8578  1F8B  3000               	movlw	0
  8579  1F8C  3196  267C         	fcall	_set_point
  8580  1F8E  0008               	return
  8581  1F8F                     __end_of_set_menu:	
  8582                           
  8583                           	psect	text21
  8584  1F47                     __ptext21:	
  8585 ;; *************** function _judge_result *****************
  8586 ;; Defined at:
  8587 ;;		line 204 in file "heibaiqi.c"
  8588 ;; Parameters:    Size  Location     Type
  8589 ;;		None
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;		None
  8592 ;; Return value:  Size  Location     Type
  8593 ;;                  1    wreg      unsigned char 
  8594 ;; Registers used:
  8595 ;;		wreg, status,2, status,0
  8596 ;; Tracked objects:
  8597 ;;		On entry : 0/0
  8598 ;;		On exit  : 0/0
  8599 ;;		Unchanged: 0/0
  8600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;Total ram usage:        0 bytes
  8606 ;; Hardware stack levels used:    1
  8607 ;; Hardware stack levels required when called:    4
  8608 ;; This function calls:
  8609 ;;		Nothing
  8610 ;; This function is called by:
  8611 ;;		_heibaiqi
  8612 ;; This function uses a non-reentrant model
  8613 ;;
  8614                           
  8615                           
  8616                           ;psect for function _judge_result
  8617  1F47                     _judge_result:	
  8618                           
  8619                           ;heibaiqi.c: 206: if(black_num==0)
  8620                           
  8621                           ;incstack = 0
  8622                           ; Regs used in _judge_result: [wreg+status,2+status,0]
  8623  1F47  0020               	movlb	0	; select bank0
  8624  1F48  0867               	movf	_black_num,w
  8625  1F49  1D03               	btfss	3,2
  8626  1F4A  2F4D               	goto	l3290
  8627                           
  8628                           ;heibaiqi.c: 207: return 2;
  8629  1F4B  3002               	movlw	2
  8630  1F4C  0008               	return
  8631  1F4D                     l3290:	
  8632                           
  8633                           ;heibaiqi.c: 208: else if(white_num==0)
  8634  1F4D  086B               	movf	_white_num,w
  8635  1F4E  1D03               	btfss	3,2
  8636  1F4F  2F52               	goto	l3298
  8637                           
  8638                           ;heibaiqi.c: 209: return 1;
  8639  1F50  3001               	movlw	1
  8640  1F51  0008               	return
  8641  1F52                     l3298:	
  8642                           
  8643                           ;heibaiqi.c: 210: else if(empty_num==0)
  8644  1F52  0021               	movlb	1	; select bank1
  8645  1F53  0820               	movf	_empty_num^(0+128),w
  8646  1F54  1D03               	btfss	3,2
  8647  1F55  2F69               	goto	l3322
  8648                           
  8649                           ;heibaiqi.c: 211: {
  8650                           ;heibaiqi.c: 212: if(black_num>white_num)
  8651  1F56  0020               	movlb	0	; select bank0
  8652  1F57  0867               	movf	_black_num,w
  8653  1F58  026B               	subwf	_white_num,w
  8654  1F59  1803               	skipnc
  8655  1F5A  2F5D               	goto	l3308
  8656                           
  8657                           ;heibaiqi.c: 213: return 1;
  8658  1F5B  3001               	movlw	1
  8659  1F5C  0008               	return
  8660  1F5D                     l3308:	
  8661                           
  8662                           ;heibaiqi.c: 214: else if(black_num<white_num)
  8663  1F5D  086B               	movf	_white_num,w
  8664  1F5E  0267               	subwf	_black_num,w
  8665  1F5F  1803               	skipnc
  8666  1F60  2F63               	goto	l3316
  8667                           
  8668                           ;heibaiqi.c: 215: return 2;
  8669  1F61  3002               	movlw	2
  8670  1F62  0008               	return
  8671  1F63                     l3316:	
  8672                           
  8673                           ;heibaiqi.c: 216: else if(black_num==white_num)
  8674  1F63  0867               	movf	_black_num,w
  8675  1F64  066B               	xorwf	_white_num,w
  8676  1F65  1D03               	skipz
  8677  1F66  0008               	return
  8678                           
  8679                           ;heibaiqi.c: 217: return 3;
  8680  1F67  3003               	movlw	3
  8681                           
  8682                           ;heibaiqi.c: 218: }
  8683  1F68  0008               	return
  8684  1F69                     l3322:	
  8685                           
  8686                           ;heibaiqi.c: 219: else
  8687                           ;heibaiqi.c: 220: return 0;
  8688  1F69  3000               	movlw	0
  8689  1F6A  0008               	return
  8690  1F6B                     __end_of_judge_result:	
  8691                           
  8692                           	psect	text22
  8693  1E9E                     __ptext22:	
  8694 ;; *************** function _init_environment *****************
  8695 ;; Defined at:
  8696 ;;		line 265 in file "func.c"
  8697 ;; Parameters:    Size  Location     Type
  8698 ;;		None
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;		None
  8701 ;; Return value:  Size  Location     Type
  8702 ;;                  1    wreg      void 
  8703 ;; Registers used:
  8704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8705 ;; Tracked objects:
  8706 ;;		On entry : 0/0
  8707 ;;		On exit  : 0/0
  8708 ;;		Unchanged: 0/0
  8709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;Total ram usage:        0 bytes
  8715 ;; Hardware stack levels used:    1
  8716 ;; Hardware stack levels required when called:    8
  8717 ;; This function calls:
  8718 ;;		_Clear_Screen
  8719 ;;		_memset
  8720 ;; This function is called by:
  8721 ;;		_heibaiqi
  8722 ;;		_main
  8723 ;;		_choose_level2
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           
  8728                           ;psect for function _init_environment
  8729  1E9E                     _init_environment:	
  8730                           
  8731                           ;func.c: 267: start=0;
  8732                           
  8733                           ;incstack = 0
  8734                           ; Regs used in _init_environment: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8735  1E9E  0021               	movlb	1	; select bank1
  8736  1E9F  01A3               	clrf	_start^(0+128)
  8737                           
  8738                           ;func.c: 268: key=0;
  8739  1EA0  0020               	movlb	0	; select bank0
  8740  1EA1  01E8               	clrf	_key
  8741                           
  8742                           ;func.c: 270: temp_cursor.row=0;
  8743  1EA2  01E4               	clrf	_temp_cursor
  8744                           
  8745                           ;func.c: 271: temp_cursor.col=0;
  8746  1EA3  01E5               	clrf	_temp_cursor+1
  8747                           
  8748                           ;func.c: 273: memset(table,0,sizeof(table));
  8749  1EA4  3000               	movlw	0
  8750  1EA5  00A3               	movwf	memset@c
  8751  1EA6  00A4               	movwf	memset@c+1
  8752  1EA7  3040               	movlw	64
  8753  1EA8  00A5               	movwf	memset@n
  8754  1EA9  3000               	movlw	0
  8755  1EAA  00A6               	movwf	memset@n+1
  8756  1EAB  30A5               	movlw	(low (_table| 0))& (0+255)
  8757  1EAC  319E  26D1  319E   	fcall	_memset
  8758                           
  8759                           ;func.c: 274: Clear_Screen(0x00);
  8760  1EAF  3000               	movlw	0
  8761  1EB0  0020               	movlb	0	; select bank0
  8762  1EB1  00B2               	movwf	Clear_Screen@value
  8763  1EB2  00B3               	movwf	Clear_Screen@value+1
  8764  1EB3  3193  239B         	fcall	_Clear_Screen
  8765  1EB5  0008               	return
  8766  1EB6                     __end_of_init_environment:	
  8767                           
  8768                           	psect	text23
  8769  1ED1                     __ptext23:	
  8770 ;; *************** function _memset *****************
  8771 ;; Defined at:
  8772 ;;		line 8 in file "E:\xCB\sources\common\memset.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;  p1              1    wreg     PTR void 
  8775 ;;		 -> table(64), 
  8776 ;;  c               2    3[BANK0 ] int 
  8777 ;;  n               2    5[BANK0 ] unsigned int 
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;  p1              1    9[BANK0 ] PTR void 
  8780 ;;		 -> table(64), 
  8781 ;;  p               1    8[BANK0 ] PTR unsigned char 
  8782 ;;		 -> table(64), 
  8783 ;; Return value:  Size  Location     Type
  8784 ;;                  1    wreg      PTR void 
  8785 ;; Registers used:
  8786 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8787 ;; Tracked objects:
  8788 ;;		On entry : 0/0
  8789 ;;		On exit  : 0/0
  8790 ;;		Unchanged: 0/0
  8791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8792 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;Total ram usage:        7 bytes
  8797 ;; Hardware stack levels used:    1
  8798 ;; Hardware stack levels required when called:    4
  8799 ;; This function calls:
  8800 ;;		Nothing
  8801 ;; This function is called by:
  8802 ;;		_init_heibaiqi
  8803 ;;		_init_environment
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function _memset
  8809  1ED1                     _memset:	
  8810                           
  8811                           ;incstack = 0
  8812                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8813                           ;memset@p1 stored from wreg
  8814  1ED1  0020               	movlb	0	; select bank0
  8815  1ED2  00A9               	movwf	memset@p1
  8816  1ED3  0829               	movf	memset@p1,w
  8817  1ED4  00A7               	movwf	??_memset
  8818  1ED5  0827               	movf	??_memset,w
  8819  1ED6  00A8               	movwf	memset@p
  8820  1ED7                     l2918:	
  8821  1ED7  3001               	movlw	1
  8822  1ED8  02A5               	subwf	memset@n,f
  8823  1ED9  3000               	movlw	0
  8824  1EDA  3BA6               	subwfb	memset@n+1,f
  8825  1EDB  0A25               	incf	memset@n,w
  8826  1EDC  1903               	btfsc	3,2
  8827  1EDD  0A26               	incf	memset@n+1,w
  8828  1EDE  1903               	btfsc	3,2
  8829  1EDF  0008               	return
  8830  1EE0  0823               	movf	memset@c,w
  8831  1EE1  00A7               	movwf	??_memset
  8832  1EE2  0828               	movf	memset@p,w
  8833  1EE3  0086               	movwf	6
  8834  1EE4  0187               	clrf	7
  8835  1EE5  0827               	movf	??_memset,w
  8836  1EE6  0081               	movwf	1
  8837  1EE7  3001               	movlw	1
  8838  1EE8  00A7               	movwf	??_memset
  8839  1EE9  0827               	movf	??_memset,w
  8840  1EEA  07A8               	addwf	memset@p,f
  8841  1EEB  2ED7               	goto	l2918
  8842  1EEC                     __end_of_memset:	
  8843                           ;	Return value of _memset is never used
  8844                           
  8845                           
  8846                           	psect	text24
  8847  139B                     __ptext24:	
  8848 ;; *************** function _Clear_Screen *****************
  8849 ;; Defined at:
  8850 ;;		line 131 in file "func.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;  value           2   18[BANK0 ] int 
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  i               1   22[BANK0 ] unsigned char 
  8855 ;;  j               1   21[BANK0 ] unsigned char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		wreg, status,2, status,0, pclath, cstack
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8865 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;Total ram usage:        5 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    7
  8872 ;; This function calls:
  8873 ;;		_Write_Com
  8874 ;;		_Write_Data
  8875 ;;		_delay_100us
  8876 ;; This function is called by:
  8877 ;;		_init_heibaiqi
  8878 ;;		_init_environment
  8879 ;;		_start_video
  8880 ;;		_choose_level2
  8881 ;;		_init_wayout
  8882 ;;		_wayout
  8883 ;;		_choose_level
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           
  8888                           ;psect for function _Clear_Screen
  8889  139B                     _Clear_Screen:	
  8890                           
  8891                           ;func.c: 132: unsigned char i,j;
  8892                           ;func.c: 133: Write_Com(0x01);
  8893                           
  8894                           ;incstack = 0
  8895                           ; Regs used in _Clear_Screen: [wreg+status,2+status,0+pclath+cstack]
  8896  139B  3001               	movlw	1
  8897  139C  0020               	movlb	0	; select bank0
  8898  139D  00B0               	movwf	Write_Com@com
  8899  139E  3000               	movlw	0
  8900  139F  00B1               	movwf	Write_Com@com+1
  8901  13A0  319E  265E  3193   	fcall	_Write_Com
  8902                           
  8903                           ;func.c: 134: delay_100us(100);
  8904  13A3  3064               	movlw	100
  8905  13A4  0020               	movlb	0	; select bank0
  8906  13A5  00A9               	movwf	delay_100us@cnt
  8907  13A6  3000               	movlw	0
  8908  13A7  00AA               	movwf	delay_100us@cnt+1
  8909  13A8  319F  27B4  3193   	fcall	_delay_100us
  8910                           
  8911                           ;func.c: 135: Write_Com(0x34);
  8912  13AB  3034               	movlw	52
  8913  13AC  0020               	movlb	0	; select bank0
  8914  13AD  00B0               	movwf	Write_Com@com
  8915  13AE  3000               	movlw	0
  8916  13AF  00B1               	movwf	Write_Com@com+1
  8917  13B0  319E  265E  3193   	fcall	_Write_Com
  8918                           
  8919                           ;func.c: 136: for(i=0;i<32;i++)
  8920  13B3  0020               	movlb	0	; select bank0
  8921  13B4  01B6               	clrf	Clear_Screen@i
  8922  13B5  3020               	movlw	32
  8923  13B6  0236               	subwf	Clear_Screen@i,w
  8924  13B7  1803               	btfsc	3,0
  8925  13B8  2BE9               	goto	l2910
  8926  13B9                     l2892:	
  8927                           
  8928                           ;func.c: 137: {
  8929                           ;func.c: 138: Write_Com(0x80+i);
  8930  13B9  0836               	movf	Clear_Screen@i,w
  8931  13BA  3E80               	addlw	128
  8932  13BB  00B0               	movwf	Write_Com@com
  8933  13BC  3000               	movlw	0
  8934  13BD  1803               	skipnc
  8935  13BE  3001               	movlw	1
  8936  13BF  00B1               	movwf	Write_Com@com+1
  8937  13C0  319E  265E  3193   	fcall	_Write_Com
  8938                           
  8939                           ;func.c: 139: Write_Com(0x80);
  8940  13C3  3080               	movlw	128
  8941  13C4  0020               	movlb	0	; select bank0
  8942  13C5  00B0               	movwf	Write_Com@com
  8943  13C6  3000               	movlw	0
  8944  13C7  00B1               	movwf	Write_Com@com+1
  8945  13C8  319E  265E  3193   	fcall	_Write_Com
  8946                           
  8947                           ;func.c: 140: for(j=0;j<32;j++)
  8948  13CB  0020               	movlb	0	; select bank0
  8949  13CC  01B5               	clrf	Clear_Screen@j
  8950  13CD  3020               	movlw	32
  8951  13CE  0235               	subwf	Clear_Screen@j,w
  8952  13CF  1803               	btfsc	3,0
  8953  13D0  2BE1               	goto	l2906
  8954  13D1                     l2900:	
  8955                           
  8956                           ;func.c: 141: {
  8957                           ;func.c: 142: Write_Data(value);
  8958  13D1  0833               	movf	Clear_Screen@value+1,w
  8959  13D2  00B1               	movwf	Write_Data@dat+1
  8960  13D3  0832               	movf	Clear_Screen@value,w
  8961  13D4  00B0               	movwf	Write_Data@dat
  8962  13D5  319E  266D  3193   	fcall	_Write_Data
  8963  13D8  3001               	movlw	1
  8964  13D9  0020               	movlb	0	; select bank0
  8965  13DA  00B4               	movwf	??_Clear_Screen
  8966  13DB  0834               	movf	??_Clear_Screen,w
  8967  13DC  07B5               	addwf	Clear_Screen@j,f
  8968  13DD  3020               	movlw	32
  8969  13DE  0235               	subwf	Clear_Screen@j,w
  8970  13DF  1C03               	skipc
  8971  13E0  2BD1               	goto	l2900
  8972  13E1                     l2906:	
  8973  13E1  3001               	movlw	1
  8974  13E2  00B4               	movwf	??_Clear_Screen
  8975  13E3  0834               	movf	??_Clear_Screen,w
  8976  13E4  07B6               	addwf	Clear_Screen@i,f
  8977  13E5  3020               	movlw	32
  8978  13E6  0236               	subwf	Clear_Screen@i,w
  8979  13E7  1C03               	skipc
  8980  13E8  2BB9               	goto	l2892
  8981  13E9                     l2910:	
  8982                           
  8983                           ;func.c: 143: }
  8984                           ;func.c: 144: }
  8985                           ;func.c: 145: Write_Com(0x36);
  8986  13E9  3036               	movlw	54
  8987  13EA  00B0               	movwf	Write_Com@com
  8988  13EB  3000               	movlw	0
  8989  13EC  00B1               	movwf	Write_Com@com+1
  8990  13ED  319E  265E  3193   	fcall	_Write_Com
  8991                           
  8992                           ;func.c: 146: Write_Com(0x30);
  8993  13F0  3030               	movlw	48
  8994  13F1  0020               	movlb	0	; select bank0
  8995  13F2  00B0               	movwf	Write_Com@com
  8996  13F3  3000               	movlw	0
  8997  13F4  00B1               	movwf	Write_Com@com+1
  8998  13F5  319E  265E         	fcall	_Write_Com
  8999  13F7  0008               	return
  9000  13F8                     __end_of_Clear_Screen:	
  9001                           
  9002                           	psect	text25
  9003  0652                     __ptext25:	
  9004 ;; *************** function _choose_point *****************
  9005 ;; Defined at:
  9006 ;;		line 142 in file "heibaiqi.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;  row             1    wreg     unsigned char 
  9009 ;;  col             1   37[BANK0 ] unsigned char 
  9010 ;;  ply             1   38[BANK0 ] unsigned char 
  9011 ;; Auto vars:     Size  Location     Type
  9012 ;;  row             1   54[BANK0 ] unsigned char 
  9013 ;;  j               1   55[BANK0 ] unsigned char 
  9014 ;;  i               1   53[BANK0 ] unsigned char 
  9015 ;;  up              1   52[BANK0 ] unsigned char 
  9016 ;;  right           1   51[BANK0 ] unsigned char 
  9017 ;;  temp            1   50[BANK0 ] unsigned char 
  9018 ;;  result          1   49[BANK0 ] unsigned char 
  9019 ;; Return value:  Size  Location     Type
  9020 ;;                  1    wreg      unsigned char 
  9021 ;; Registers used:
  9022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9028 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;Total ram usage:       19 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    8
  9035 ;; This function calls:
  9036 ;;		_Display_Chars
  9037 ;;		___bmul
  9038 ;;		___wmul
  9039 ;;		_check_point
  9040 ;;		_int2string
  9041 ;;		_set_point
  9042 ;; This function is called by:
  9043 ;;		_heibaiqi
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           
  9048                           ;psect for function _choose_point
  9049  0652                     _choose_point:	
  9050                           
  9051                           ;incstack = 0
  9052                           ; Regs used in _choose_point: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9053                           ;choose_point@row stored from wreg
  9054  0652  0020               	movlb	0	; select bank0
  9055  0653  00D6               	movwf	choose_point@row
  9056                           
  9057                           ;heibaiqi.c: 144: if(table[row][col] & 0x03)
  9058  0654  0856               	movf	choose_point@row,w
  9059  0655  00C7               	movwf	??_choose_point
  9060  0656  3003               	movlw	3
  9061  0657                     u4045:	
  9062  0657  35C7               	lslf	??_choose_point,f
  9063  0658  0B89               	decfsz	9,f
  9064  0659  2E57               	goto	u4045
  9065  065A  30A5               	movlw	(low (_table| 0))& (0+255)
  9066  065B  0747               	addwf	??_choose_point,w
  9067  065C  00C8               	movwf	??_choose_point+1
  9068  065D  0845               	movf	choose_point@col,w
  9069  065E  0748               	addwf	??_choose_point+1,w
  9070  065F  00C9               	movwf	??_choose_point+2
  9071  0660  0849               	movf	??_choose_point+2,w
  9072  0661  0086               	movwf	6
  9073  0662  0187               	clrf	7
  9074  0663  0801               	movf	1,w
  9075  0664  3903               	andlw	3
  9076  0665  1903               	btfsc	3,2
  9077  0666  2E69               	goto	l3222
  9078                           
  9079                           ;heibaiqi.c: 145: return 0;
  9080  0667  3000               	movlw	0
  9081  0668  0008               	return
  9082  0669                     l3222:	
  9083                           
  9084                           ;heibaiqi.c: 146: unsigned char result = check_point(row, col, ply);
  9085  0669  0845               	movf	choose_point@col,w
  9086  066A  00C7               	movwf	??_choose_point
  9087  066B  0847               	movf	??_choose_point,w
  9088  066C  00A9               	movwf	check_point@col
  9089  066D  0846               	movf	choose_point@ply,w
  9090  066E  00C8               	movwf	??_choose_point+1
  9091  066F  0848               	movf	??_choose_point+1,w
  9092  0670  00AA               	movwf	check_point@ply
  9093  0671  0856               	movf	choose_point@row,w
  9094  0672  3189  21CA  3186   	fcall	_check_point
  9095  0675  0020               	movlb	0	; select bank0
  9096  0676  00C9               	movwf	??_choose_point+2
  9097  0677  0849               	movf	??_choose_point+2,w
  9098  0678  00D1               	movwf	choose_point@result
  9099                           
  9100                           ;heibaiqi.c: 147: if(!result)
  9101  0679  0851               	movf	choose_point@result,w
  9102  067A  1D03               	btfss	3,2
  9103  067B  2E7E               	goto	l3230
  9104                           
  9105                           ;heibaiqi.c: 148: return 0;
  9106  067C  3000               	movlw	0
  9107  067D  0008               	return
  9108  067E                     l3230:	
  9109                           
  9110                           ;heibaiqi.c: 149: char right, up;
  9111                           ;heibaiqi.c: 150: unsigned char temp = 0b10000000;
  9112  067E  3080               	movlw	128
  9113  067F  00C7               	movwf	??_choose_point
  9114  0680  0847               	movf	??_choose_point,w
  9115  0681  00D2               	movwf	choose_point@temp
  9116                           
  9117                           ;heibaiqi.c: 151: table[row][col] = ply | 0x08;
  9118  0682  0846               	movf	choose_point@ply,w
  9119  0683  3808               	iorlw	8
  9120  0684  00C7               	movwf	??_choose_point
  9121  0685  0856               	movf	choose_point@row,w
  9122  0686  00C8               	movwf	??_choose_point+1
  9123  0687  3003               	movlw	3
  9124  0688                     u4075:	
  9125  0688  35C8               	lslf	??_choose_point+1,f
  9126  0689  0B89               	decfsz	9,f
  9127  068A  2E88               	goto	u4075
  9128  068B  30A5               	movlw	(low (_table| 0))& (0+255)
  9129  068C  0748               	addwf	??_choose_point+1,w
  9130  068D  00C9               	movwf	??_choose_point+2
  9131  068E  0845               	movf	choose_point@col,w
  9132  068F  0749               	addwf	??_choose_point+2,w
  9133  0690  00CA               	movwf	??_choose_point+3
  9134  0691  084A               	movf	??_choose_point+3,w
  9135  0692  0086               	movwf	6
  9136  0693  0187               	clrf	7
  9137  0694  0847               	movf	??_choose_point,w
  9138  0695  0081               	movwf	1
  9139                           
  9140                           ;heibaiqi.c: 158: if(ply==1)
  9141  0696  0346               	decf	choose_point@ply,w
  9142  0697  1D03               	btfss	3,2
  9143  0698  2E9E               	goto	l3238
  9144                           
  9145                           ;heibaiqi.c: 159: black_num++;
  9146  0699  3001               	movlw	1
  9147  069A  00C7               	movwf	??_choose_point
  9148  069B  0847               	movf	??_choose_point,w
  9149  069C  07E7               	addwf	_black_num,f
  9150  069D  2EA6               	goto	l113
  9151  069E                     l3238:	
  9152                           
  9153                           ;heibaiqi.c: 160: else if(ply==2)
  9154  069E  3002               	movlw	2
  9155  069F  0646               	xorwf	choose_point@ply,w
  9156  06A0  1D03               	btfss	3,2
  9157  06A1  2EA6               	goto	l113
  9158                           
  9159                           ;heibaiqi.c: 161: white_num++;
  9160  06A2  3001               	movlw	1
  9161  06A3  00C7               	movwf	??_choose_point
  9162  06A4  0847               	movf	??_choose_point,w
  9163  06A5  07EB               	addwf	_white_num,f
  9164  06A6                     l113:	
  9165                           
  9166                           ;heibaiqi.c: 162: empty_num--;
  9167  06A6  3001               	movlw	1
  9168  06A7  0021               	movlb	1	; select bank1
  9169  06A8  02A0               	subwf	_empty_num^(0+128),f
  9170                           
  9171                           ;heibaiqi.c: 163: for(unsigned char i=0; i<8; i++){
  9172  06A9  0020               	movlb	0	; select bank0
  9173  06AA  01D5               	clrf	choose_point@i
  9174  06AB  3008               	movlw	8
  9175  06AC  0255               	subwf	choose_point@i,w
  9176  06AD  1803               	btfsc	3,0
  9177  06AE  2F96               	goto	l3272
  9178  06AF                     l115:	
  9179                           
  9180                           ;heibaiqi.c: 164: char j = 1;
  9181  06AF  01D7               	clrf	choose_point@j
  9182  06B0  0AD7               	incf	choose_point@j,f
  9183                           
  9184                           ;heibaiqi.c: 165: if(result & temp){
  9185  06B1  0851               	movf	choose_point@result,w
  9186  06B2  0552               	andwf	choose_point@temp,w
  9187  06B3  1903               	btfsc	3,2
  9188  06B4  2F8A               	goto	l3268
  9189                           
  9190                           ;heibaiqi.c: 166: right = towards[i][0];
  9191  06B5  3555               	lslf	choose_point@i,w
  9192  06B6  3EA0               	addlw	(low (_towards| (0+256)))& (0+255)
  9193  06B7  0086               	movwf	6
  9194  06B8  3001               	movlw	1	; select bank3/4
  9195  06B9  0087               	movwf	7
  9196  06BA  0801               	movf	1,w
  9197  06BB  00C7               	movwf	??_choose_point
  9198  06BC  0847               	movf	??_choose_point,w
  9199  06BD  00D3               	movwf	choose_point@right
  9200                           
  9201                           ;heibaiqi.c: 167: up = towards[i][1];
  9202  06BE  1403               	setc
  9203  06BF  0D55               	rlf	choose_point@i,w
  9204  06C0  3EA0               	addlw	(low (_towards| (0+256)))& (0+255)
  9205  06C1  0086               	movwf	6
  9206  06C2  3001               	movlw	1	; select bank3/4
  9207  06C3  0087               	movwf	7
  9208  06C4  0801               	movf	1,w
  9209  06C5  00C7               	movwf	??_choose_point
  9210  06C6  0847               	movf	??_choose_point,w
  9211  06C7  00D4               	movwf	choose_point@up
  9212                           
  9213                           ;heibaiqi.c: 168: while(0 <= (char)(col+j*up) && (char)(col+j*up) < 8 && 0 <= (char)(row
      +                          +j*right) && (char)(row+j*right) < 8){
  9214  06C8  2F6C               	goto	l3264
  9215  06C9                     l3252:	
  9216                           
  9217                           ;heibaiqi.c: 169: if(table[row+j*right][col+j*up] != ply){
  9218  06C9  0854               	movf	choose_point@up,w
  9219  06CA  00C7               	movwf	??_choose_point
  9220  06CB  0847               	movf	??_choose_point,w
  9221  06CC  00A3               	movwf	___bmul@multiplicand
  9222  06CD  0857               	movf	choose_point@j,w
  9223  06CE  319E  268C  3186   	fcall	___bmul
  9224  06D1  0020               	movlb	0	; select bank0
  9225  06D2  0745               	addwf	choose_point@col,w
  9226  06D3  00C8               	movwf	??_choose_point+1
  9227  06D4  30A5               	movlw	(low (_table| 0))& (0+255)
  9228  06D5  0748               	addwf	??_choose_point+1,w
  9229  06D6  00C9               	movwf	??_choose_point+2
  9230  06D7  0857               	movf	choose_point@j,w
  9231  06D8  00CA               	movwf	??_choose_point+3
  9232  06D9  01CB               	clrf	??_choose_point+4
  9233  06DA  084A               	movf	??_choose_point+3,w
  9234  06DB  00A3               	movwf	___wmul@multiplier
  9235  06DC  084B               	movf	??_choose_point+4,w
  9236  06DD  00A4               	movwf	___wmul@multiplier+1
  9237  06DE  0853               	movf	choose_point@right,w
  9238  06DF  00CC               	movwf	??_choose_point+5
  9239  06E0  01CD               	clrf	??_choose_point+6
  9240  06E1  084C               	movf	??_choose_point+5,w
  9241  06E2  00A5               	movwf	___wmul@multiplicand
  9242  06E3  084D               	movf	??_choose_point+6,w
  9243  06E4  00A6               	movwf	___wmul@multiplicand+1
  9244  06E5  319E  26EC  3186   	fcall	___wmul
  9245  06E8  0020               	movlb	0	; select bank0
  9246  06E9  0823               	movf	?___wmul,w
  9247  06EA  0756               	addwf	choose_point@row,w
  9248  06EB  00CE               	movwf	??_choose_point+7
  9249  06EC  3002               	movlw	2
  9250  06ED                     u4125:	
  9251  06ED  35CE               	lslf	??_choose_point+7,f
  9252  06EE  3EFF               	addlw	-1
  9253  06EF  1D03               	skipz
  9254  06F0  2EED               	goto	u4125
  9255  06F1  354E               	lslf	??_choose_point+7,w
  9256  06F2  0749               	addwf	??_choose_point+2,w
  9257  06F3  00CF               	movwf	??_choose_point+8
  9258  06F4  084F               	movf	??_choose_point+8,w
  9259  06F5  0086               	movwf	6
  9260  06F6  0187               	clrf	7
  9261  06F7  0801               	movf	1,w
  9262  06F8  0646               	xorwf	choose_point@ply,w
  9263  06F9  1903               	skipnz
  9264  06FA  2F8A               	goto	l3268
  9265                           
  9266                           ;heibaiqi.c: 170: table[row+j*right][col+j*up] = ply;
  9267  06FB  0846               	movf	choose_point@ply,w
  9268  06FC  00C7               	movwf	??_choose_point
  9269  06FD  0854               	movf	choose_point@up,w
  9270  06FE  00C8               	movwf	??_choose_point+1
  9271  06FF  0848               	movf	??_choose_point+1,w
  9272  0700  00A3               	movwf	___bmul@multiplicand
  9273  0701  0857               	movf	choose_point@j,w
  9274  0702  319E  268C  3186   	fcall	___bmul
  9275  0705  0020               	movlb	0	; select bank0
  9276  0706  0745               	addwf	choose_point@col,w
  9277  0707  00C9               	movwf	??_choose_point+2
  9278  0708  30A5               	movlw	(low (_table| 0))& (0+255)
  9279  0709  0749               	addwf	??_choose_point+2,w
  9280  070A  00CA               	movwf	??_choose_point+3
  9281  070B  0857               	movf	choose_point@j,w
  9282  070C  00CB               	movwf	??_choose_point+4
  9283  070D  01CC               	clrf	??_choose_point+5
  9284  070E  084B               	movf	??_choose_point+4,w
  9285  070F  00A3               	movwf	___wmul@multiplier
  9286  0710  084C               	movf	??_choose_point+5,w
  9287  0711  00A4               	movwf	___wmul@multiplier+1
  9288  0712  0853               	movf	choose_point@right,w
  9289  0713  00CD               	movwf	??_choose_point+6
  9290  0714  01CE               	clrf	??_choose_point+7
  9291  0715  084D               	movf	??_choose_point+6,w
  9292  0716  00A5               	movwf	___wmul@multiplicand
  9293  0717  084E               	movf	??_choose_point+7,w
  9294  0718  00A6               	movwf	___wmul@multiplicand+1
  9295  0719  319E  26EC  3186   	fcall	___wmul
  9296  071C  0020               	movlb	0	; select bank0
  9297  071D  0823               	movf	?___wmul,w
  9298  071E  0756               	addwf	choose_point@row,w
  9299  071F  00CF               	movwf	??_choose_point+8
  9300  0720  3002               	movlw	2
  9301  0721                     u4145:	
  9302  0721  35CF               	lslf	??_choose_point+8,f
  9303  0722  3EFF               	addlw	-1
  9304  0723  1D03               	skipz
  9305  0724  2F21               	goto	u4145
  9306  0725  354F               	lslf	??_choose_point+8,w
  9307  0726  074A               	addwf	??_choose_point+3,w
  9308  0727  00D0               	movwf	??_choose_point+9
  9309  0728  0850               	movf	??_choose_point+9,w
  9310  0729  0086               	movwf	6
  9311  072A  0187               	clrf	7
  9312  072B  0847               	movf	??_choose_point,w
  9313  072C  0081               	movwf	1
  9314                           
  9315                           ;heibaiqi.c: 177: set_point(row+j*right,col+j*up,screen[ply]);
  9316  072D  0854               	movf	choose_point@up,w
  9317  072E  00C7               	movwf	??_choose_point
  9318  072F  0847               	movf	??_choose_point,w
  9319  0730  00A3               	movwf	___bmul@multiplicand
  9320  0731  0857               	movf	choose_point@j,w
  9321  0732  319E  268C  3186   	fcall	___bmul
  9322  0735  0020               	movlb	0	; select bank0
  9323  0736  0745               	addwf	choose_point@col,w
  9324  0737  00C8               	movwf	??_choose_point+1
  9325  0738  0848               	movf	??_choose_point+1,w
  9326  0739  00B9               	movwf	set_point@point_y
  9327  073A  0846               	movf	choose_point@ply,w
  9328  073B  00C9               	movwf	??_choose_point+2
  9329  073C  3002               	movlw	2
  9330  073D                     u4155:	
  9331  073D  35C9               	lslf	??_choose_point+2,f
  9332  073E  3EFF               	addlw	-1
  9333  073F  1D03               	skipz
  9334  0740  2F3D               	goto	u4155
  9335  0741  3549               	lslf	??_choose_point+2,w
  9336  0742  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  9337  0743  00CA               	movwf	??_choose_point+3
  9338  0744  084A               	movf	??_choose_point+3,w
  9339  0745  00BA               	movwf	set_point@value
  9340  0746  0853               	movf	choose_point@right,w
  9341  0747  00CB               	movwf	??_choose_point+4
  9342  0748  084B               	movf	??_choose_point+4,w
  9343  0749  00A3               	movwf	___bmul@multiplicand
  9344  074A  0857               	movf	choose_point@j,w
  9345  074B  319E  268C  3186   	fcall	___bmul
  9346  074E  0020               	movlb	0	; select bank0
  9347  074F  0756               	addwf	choose_point@row,w
  9348  0750  3196  267C  3186   	fcall	_set_point
  9349                           
  9350                           ;heibaiqi.c: 178: if(ply==1)
  9351  0753  0020               	movlb	0	; select bank0
  9352  0754  0346               	decf	choose_point@ply,w
  9353  0755  1D03               	btfss	3,2
  9354  0756  2F5E               	goto	l3260
  9355                           
  9356                           ;heibaiqi.c: 179: {
  9357                           ;heibaiqi.c: 180: black_num++;
  9358  0757  3001               	movlw	1
  9359  0758  00C7               	movwf	??_choose_point
  9360  0759  0847               	movf	??_choose_point,w
  9361  075A  07E7               	addwf	_black_num,f
  9362                           
  9363                           ;heibaiqi.c: 181: white_num--;
  9364  075B  3001               	movlw	1
  9365  075C  02EB               	subwf	_white_num,f
  9366                           
  9367                           ;heibaiqi.c: 182: }
  9368  075D  2F68               	goto	l122
  9369  075E                     l3260:	
  9370                           
  9371                           ;heibaiqi.c: 183: else if(ply==2)
  9372  075E  3002               	movlw	2
  9373  075F  0646               	xorwf	choose_point@ply,w
  9374  0760  1D03               	btfss	3,2
  9375  0761  2F68               	goto	l122
  9376                           
  9377                           ;heibaiqi.c: 184: {
  9378                           ;heibaiqi.c: 185: black_num--;
  9379  0762  3001               	movlw	1
  9380  0763  02E7               	subwf	_black_num,f
  9381                           
  9382                           ;heibaiqi.c: 186: white_num++;
  9383  0764  3001               	movlw	1
  9384  0765  00C7               	movwf	??_choose_point
  9385  0766  0847               	movf	??_choose_point,w
  9386  0767  07EB               	addwf	_white_num,f
  9387  0768                     l122:	
  9388                           
  9389                           ;heibaiqi.c: 187: }
  9390                           ;heibaiqi.c: 188: j++;
  9391  0768  3001               	movlw	1
  9392  0769  00C7               	movwf	??_choose_point
  9393  076A  0847               	movf	??_choose_point,w
  9394  076B  07D7               	addwf	choose_point@j,f
  9395  076C                     l3264:	
  9396                           ;heibaiqi.c: 190: else
  9397                           ;heibaiqi.c: 191: break;
  9398                           
  9399                           ;heibaiqi.c: 189: }
  9400                           
  9401  076C  0854               	movf	choose_point@up,w
  9402  076D  00C7               	movwf	??_choose_point
  9403  076E  0847               	movf	??_choose_point,w
  9404  076F  00A3               	movwf	___bmul@multiplicand
  9405  0770  0857               	movf	choose_point@j,w
  9406  0771  319E  268C  3186   	fcall	___bmul
  9407  0774  0020               	movlb	0	; select bank0
  9408  0775  0745               	addwf	choose_point@col,w
  9409  0776  00C8               	movwf	??_choose_point+1
  9410  0777  3008               	movlw	8
  9411  0778  0248               	subwf	??_choose_point+1,w
  9412  0779  1803               	skipnc
  9413  077A  2F8A               	goto	l3268
  9414  077B  0853               	movf	choose_point@right,w
  9415  077C  00C7               	movwf	??_choose_point
  9416  077D  0847               	movf	??_choose_point,w
  9417  077E  00A3               	movwf	___bmul@multiplicand
  9418  077F  0857               	movf	choose_point@j,w
  9419  0780  319E  268C  3186   	fcall	___bmul
  9420  0783  0020               	movlb	0	; select bank0
  9421  0784  0756               	addwf	choose_point@row,w
  9422  0785  00C8               	movwf	??_choose_point+1
  9423  0786  3008               	movlw	8
  9424  0787  0248               	subwf	??_choose_point+1,w
  9425  0788  1C03               	skipc
  9426  0789  2EC9               	goto	l3252
  9427  078A                     l3268:	
  9428                           
  9429                           ;heibaiqi.c: 192: }
  9430                           ;heibaiqi.c: 193: }
  9431                           ;heibaiqi.c: 194: temp = temp >> 1;
  9432  078A  3652               	lsrf	choose_point@temp,w
  9433  078B  00C7               	movwf	??_choose_point
  9434  078C  0847               	movf	??_choose_point,w
  9435  078D  00D2               	movwf	choose_point@temp
  9436  078E  3001               	movlw	1
  9437  078F  00C7               	movwf	??_choose_point
  9438  0790  0847               	movf	??_choose_point,w
  9439  0791  07D5               	addwf	choose_point@i,f
  9440  0792  3008               	movlw	8
  9441  0793  0255               	subwf	choose_point@i,w
  9442  0794  1C03               	skipc
  9443  0795  2EAF               	goto	l115
  9444  0796                     l3272:	
  9445                           
  9446                           ;heibaiqi.c: 195: }
  9447                           ;heibaiqi.c: 196: set_point(row,col,screen[ply+3]);
  9448  0796  0845               	movf	choose_point@col,w
  9449  0797  00C7               	movwf	??_choose_point
  9450  0798  0847               	movf	??_choose_point,w
  9451  0799  00B9               	movwf	set_point@point_y
  9452  079A  0846               	movf	choose_point@ply,w
  9453  079B  00C8               	movwf	??_choose_point+1
  9454  079C  3002               	movlw	2
  9455  079D                     u4215:	
  9456  079D  35C8               	lslf	??_choose_point+1,f
  9457  079E  3EFF               	addlw	-1
  9458  079F  1D03               	skipz
  9459  07A0  2F9D               	goto	u4215
  9460  07A1  3548               	lslf	??_choose_point+1,w
  9461  07A2  3E18               	addlw	24
  9462  07A3  3E20               	addlw	(low (_screen| (0+256)))& (0+255)
  9463  07A4  00C9               	movwf	??_choose_point+2
  9464  07A5  0849               	movf	??_choose_point+2,w
  9465  07A6  00BA               	movwf	set_point@value
  9466  07A7  0856               	movf	choose_point@row,w
  9467  07A8  3196  267C  3186   	fcall	_set_point
  9468                           
  9469                           ;heibaiqi.c: 197: int2string(display_black,5,black_num);
  9470  07AB  3005               	movlw	5
  9471  07AC  0020               	movlb	0	; select bank0
  9472  07AD  00C7               	movwf	??_choose_point
  9473  07AE  0847               	movf	??_choose_point,w
  9474  07AF  00AC               	movwf	int2string@begin
  9475  07B0  0867               	movf	_black_num,w
  9476  07B1  00C8               	movwf	??_choose_point+1
  9477  07B2  0848               	movf	??_choose_point+1,w
  9478  07B3  00AD               	movwf	int2string@num
  9479  07B4  3050               	movlw	(low (_display_black| (0+256)))& (0+255)
  9480  07B5  3191  21B7  3186   	fcall	_int2string
  9481                           
  9482                           ;heibaiqi.c: 198: Display_Chars(2,display_black,5);
  9483  07B8  3050               	movlw	low _display_black
  9484  07B9  0020               	movlb	0	; select bank0
  9485  07BA  00B2               	movwf	Display_Chars@string
  9486  07BB  3001               	movlw	high _display_black
  9487  07BC  00B3               	movwf	Display_Chars@string+1
  9488  07BD  3005               	movlw	5
  9489  07BE  00C7               	movwf	??_choose_point
  9490  07BF  0847               	movf	??_choose_point,w
  9491  07C0  00B4               	movwf	Display_Chars@y
  9492  07C1  3002               	movlw	2
  9493  07C2  3192  22ED  3186   	fcall	_Display_Chars
  9494                           
  9495                           ;heibaiqi.c: 199: int2string(display_white,5,white_num);
  9496  07C5  3005               	movlw	5
  9497  07C6  0020               	movlb	0	; select bank0
  9498  07C7  00C7               	movwf	??_choose_point
  9499  07C8  0847               	movf	??_choose_point,w
  9500  07C9  00AC               	movwf	int2string@begin
  9501  07CA  086B               	movf	_white_num,w
  9502  07CB  00C8               	movwf	??_choose_point+1
  9503  07CC  0848               	movf	??_choose_point+1,w
  9504  07CD  00AD               	movwf	int2string@num
  9505  07CE  305A               	movlw	(low (_display_white| (0+256)))& (0+255)
  9506  07CF  3191  21B7  3186   	fcall	_int2string
  9507                           
  9508                           ;heibaiqi.c: 200: Display_Chars(3,display_white,5);
  9509  07D2  305A               	movlw	low _display_white
  9510  07D3  0020               	movlb	0	; select bank0
  9511  07D4  00B2               	movwf	Display_Chars@string
  9512  07D5  3001               	movlw	high _display_white
  9513  07D6  00B3               	movwf	Display_Chars@string+1
  9514  07D7  3005               	movlw	5
  9515  07D8  00C7               	movwf	??_choose_point
  9516  07D9  0847               	movf	??_choose_point,w
  9517  07DA  00B4               	movwf	Display_Chars@y
  9518  07DB  3003               	movlw	3
  9519  07DC  3192  22ED         	fcall	_Display_Chars
  9520                           
  9521                           ;heibaiqi.c: 201: return 1;
  9522  07DE  3001               	movlw	1
  9523  07DF  0008               	return
  9524  07E0                     __end_of_choose_point:	
  9525                           
  9526                           	psect	text26
  9527  167C                     __ptext26:	
  9528 ;; *************** function _set_point *****************
  9529 ;; Defined at:
  9530 ;;		line 206 in file "func.c"
  9531 ;; Parameters:    Size  Location     Type
  9532 ;;  point_x         1    wreg     unsigned char 
  9533 ;;  point_y         1   25[BANK0 ] unsigned char 
  9534 ;;  value           1   26[BANK0 ] PTR unsigned char 
  9535 ;;		 -> choose_second(8), choose_empty(8), empty(8), screen(48), 
  9536 ;;		 -> second_chess(8), first_chess(8), choose_first(8), 
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;  point_x         1   34[BANK0 ] unsigned char 
  9539 ;;  i               2   35[BANK0 ] int 
  9540 ;;  is_Offset_Po    2   30[BANK0 ] int 
  9541 ;;  j               2    0        int 
  9542 ;;  init_Y_Addr     1   33[BANK0 ] unsigned char 
  9543 ;;  init_X_Addr     1   32[BANK0 ] unsigned char 
  9544 ;; Return value:  Size  Location     Type
  9545 ;;                  1    wreg      void 
  9546 ;; Registers used:
  9547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9553 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;Total ram usage:       12 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    7
  9560 ;; This function calls:
  9561 ;;		_Write_Com
  9562 ;;		_Write_Data
  9563 ;;		_check_Pos
  9564 ;;		_get_X_Addr
  9565 ;;		_get_Y_Addr
  9566 ;;		_readFromTable
  9567 ;; This function is called by:
  9568 ;;		_init_heibaiqi
  9569 ;;		_choose_point
  9570 ;;		_heibaiqi
  9571 ;;		_set_menu
  9572 ;;		_run_game
  9573 ;;		_change_near
  9574 ;;		_choose
  9575 ;;		_choose_level2
  9576 ;;		_init_wayout
  9577 ;;		_wayout
  9578 ;;		_write_table_from_setPoint
  9579 ;;		_choose_level
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           
  9584                           ;psect for function _set_point
  9585  167C                     _set_point:	
  9586                           
  9587                           ;incstack = 0
  9588                           ; Regs used in _set_point: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9589                           ;set_point@point_x stored from wreg
  9590  167C  0020               	movlb	0	; select bank0
  9591  167D  00C2               	movwf	set_point@point_x
  9592                           
  9593                           ;func.c: 207: int i,j;
  9594                           ;func.c: 208: int is_Offset_Pos;
  9595                           ;func.c: 209: unsigned char init_X_Addr, init_Y_Addr;
  9596                           ;func.c: 210: init_X_Addr = get_X_Addr(point_x, point_y);
  9597  167E  0839               	movf	set_point@point_y,w
  9598  167F  00BB               	movwf	??_set_point
  9599  1680  083B               	movf	??_set_point,w
  9600  1681  00A3               	movwf	get_X_Addr@y
  9601  1682  0842               	movf	set_point@point_x,w
  9602  1683  3190  202C  3196   	fcall	_get_X_Addr
  9603  1686  0020               	movlb	0	; select bank0
  9604  1687  00BC               	movwf	??_set_point+1
  9605  1688  083C               	movf	??_set_point+1,w
  9606  1689  00C0               	movwf	set_point@init_X_Addr
  9607                           
  9608                           ;func.c: 211: init_Y_Addr = get_Y_Addr(point_x, point_y);
  9609  168A  0839               	movf	set_point@point_y,w
  9610  168B  00BB               	movwf	??_set_point
  9611  168C  083B               	movf	??_set_point,w
  9612  168D  00AC               	movwf	get_Y_Addr@y
  9613  168E  0842               	movf	set_point@point_x,w
  9614  168F  3191  212C  3196   	fcall	_get_Y_Addr
  9615  1692  0020               	movlb	0	; select bank0
  9616  1693  00BC               	movwf	??_set_point+1
  9617  1694  083C               	movf	??_set_point+1,w
  9618  1695  00C1               	movwf	set_point@init_Y_Addr
  9619                           
  9620                           ;func.c: 212: is_Offset_Pos = check_Pos(point_x, point_y);
  9621  1696  0839               	movf	set_point@point_y,w
  9622  1697  00BB               	movwf	??_set_point
  9623  1698  083B               	movf	??_set_point,w
  9624  1699  00A3               	movwf	check_Pos@y
  9625  169A  0842               	movf	set_point@point_x,w
  9626  169B  319E  2650  3196   	fcall	_check_Pos
  9627  169E  0020               	movlb	0	; select bank0
  9628  169F  0824               	movf	?_check_Pos+1,w
  9629  16A0  00BF               	movwf	set_point@is_Offset_Pos+1
  9630  16A1  0823               	movf	?_check_Pos,w
  9631  16A2  00BE               	movwf	set_point@is_Offset_Pos
  9632                           
  9633                           ;func.c: 214: Write_Com(0x34);
  9634  16A3  3034               	movlw	52
  9635  16A4  00B0               	movwf	Write_Com@com
  9636  16A5  3000               	movlw	0
  9637  16A6  00B1               	movwf	Write_Com@com+1
  9638  16A7  319E  265E  3196   	fcall	_Write_Com
  9639                           
  9640                           ;func.c: 216: for(i=0;i<8;i++){
  9641  16AA  0020               	movlb	0	; select bank0
  9642  16AB  01C3               	clrf	set_point@i
  9643  16AC  01C4               	clrf	set_point@i+1
  9644  16AD  0844               	movf	set_point@i+1,w
  9645  16AE  3A80               	xorlw	128
  9646  16AF  00BB               	movwf	??_set_point
  9647  16B0  3080               	movlw	128
  9648  16B1  023B               	subwf	??_set_point,w
  9649  16B2  3008               	movlw	8
  9650  16B3  1903               	btfsc	3,2
  9651  16B4  0243               	subwf	set_point@i,w
  9652  16B5  1803               	btfsc	3,0
  9653  16B6  2F0C               	goto	l2946
  9654  16B7                     l2932:	
  9655                           
  9656                           ;func.c: 217: Write_Com(init_X_Addr+i);
  9657  16B7  0020               	movlb	0	; select bank0
  9658  16B8  0840               	movf	set_point@init_X_Addr,w
  9659  16B9  0743               	addwf	set_point@i,w
  9660  16BA  00B0               	movwf	Write_Com@com
  9661  16BB  0844               	movf	set_point@i+1,w
  9662  16BC  1803               	skipnc
  9663  16BD  0A44               	incf	set_point@i+1,w
  9664  16BE  00B1               	movwf	Write_Com@com+1
  9665  16BF  319E  265E  3196   	fcall	_Write_Com
  9666                           
  9667                           ;func.c: 218: Write_Com(init_Y_Addr);
  9668  16C2  0020               	movlb	0	; select bank0
  9669  16C3  0841               	movf	set_point@init_Y_Addr,w
  9670  16C4  00BB               	movwf	??_set_point
  9671  16C5  01BC               	clrf	??_set_point+1
  9672  16C6  083B               	movf	??_set_point,w
  9673  16C7  00B0               	movwf	Write_Com@com
  9674  16C8  083C               	movf	??_set_point+1,w
  9675  16C9  00B1               	movwf	Write_Com@com+1
  9676  16CA  319E  265E  3196   	fcall	_Write_Com
  9677                           
  9678                           ;func.c: 220: if(is_Offset_Pos == 0) Write_Data(*value);
  9679  16CD  0020               	movlb	0	; select bank0
  9680  16CE  083E               	movf	set_point@is_Offset_Pos,w
  9681  16CF  043F               	iorwf	set_point@is_Offset_Pos+1,w
  9682  16D0  1903               	btfsc	3,2
  9683  16D1  2EEB               	goto	L6
  9684                           
  9685                           ;func.c: 221: else {
  9686                           ;func.c: 222: Write_Data(readFromTable(point_x,point_y-1,i));
  9687  16D2  0020               	movlb	0	; select bank0
  9688  16D3  0839               	movf	set_point@point_y,w
  9689  16D4  3EFF               	addlw	255
  9690  16D5  00BB               	movwf	??_set_point
  9691  16D6  083B               	movf	??_set_point,w
  9692  16D7  00A3               	movwf	readFromTable@y
  9693  16D8  0844               	movf	set_point@i+1,w
  9694  16D9  00A5               	movwf	readFromTable@offset+1
  9695  16DA  0843               	movf	set_point@i,w
  9696  16DB  00A4               	movwf	readFromTable@offset
  9697  16DC  0842               	movf	set_point@point_x,w
  9698  16DD  3193  2343  3196   	fcall	_readFromTable
  9699  16E0  0020               	movlb	0	; select bank0
  9700  16E1  00BC               	movwf	??_set_point+1
  9701  16E2  01BD               	clrf	??_set_point+2
  9702  16E3  083C               	movf	??_set_point+1,w
  9703  16E4  00B0               	movwf	Write_Data@dat
  9704  16E5  083D               	movf	??_set_point+2,w
  9705  16E6  00B1               	movwf	Write_Data@dat+1
  9706  16E7  319E  266D  3196   	fcall	_Write_Data
  9707                           
  9708                           ;func.c: 223: Write_Data(*value);
  9709  16EA  0020               	movlb	0	; select bank0
  9710  16EB                     L6:	
  9711  16EB  083A               	movf	set_point@value,w
  9712  16EC  0086               	movwf	6
  9713  16ED  3001               	movlw	1	; select bank2/3
  9714  16EE  0087               	movwf	7
  9715  16EF  0801               	movf	1,w
  9716  16F0  00BB               	movwf	??_set_point
  9717  16F1  01BC               	clrf	??_set_point+1
  9718  16F2  083B               	movf	??_set_point,w
  9719  16F3  00B0               	movwf	Write_Data@dat
  9720  16F4  083C               	movf	??_set_point+1,w
  9721  16F5  00B1               	movwf	Write_Data@dat+1
  9722  16F6  319E  266D  3196   	fcall	_Write_Data
  9723                           
  9724                           ;func.c: 224: }
  9725                           ;func.c: 225: value++;
  9726  16F9  3001               	movlw	1
  9727  16FA  0020               	movlb	0	; select bank0
  9728  16FB  00BB               	movwf	??_set_point
  9729  16FC  083B               	movf	??_set_point,w
  9730  16FD  07BA               	addwf	set_point@value,f
  9731  16FE  3001               	movlw	1
  9732  16FF  07C3               	addwf	set_point@i,f
  9733  1700  3000               	movlw	0
  9734  1701  3DC4               	addwfc	set_point@i+1,f
  9735  1702  0844               	movf	set_point@i+1,w
  9736  1703  3A80               	xorlw	128
  9737  1704  00BB               	movwf	??_set_point
  9738  1705  3080               	movlw	128
  9739  1706  023B               	subwf	??_set_point,w
  9740  1707  3008               	movlw	8
  9741  1708  1903               	btfsc	3,2
  9742  1709  0243               	subwf	set_point@i,w
  9743  170A  1C03               	skipc
  9744  170B  2EB7               	goto	l2932
  9745  170C                     l2946:	
  9746                           
  9747                           ;func.c: 226: }
  9748                           ;func.c: 227: Write_Com(0x36);
  9749  170C  3036               	movlw	54
  9750  170D  0020               	movlb	0	; select bank0
  9751  170E  00B0               	movwf	Write_Com@com
  9752  170F  3000               	movlw	0
  9753  1710  00B1               	movwf	Write_Com@com+1
  9754  1711  319E  265E  3196   	fcall	_Write_Com
  9755                           
  9756                           ;func.c: 228: Write_Com(0x30);
  9757  1714  3030               	movlw	48
  9758  1715  0020               	movlb	0	; select bank0
  9759  1716  00B0               	movwf	Write_Com@com
  9760  1717  3000               	movlw	0
  9761  1718  00B1               	movwf	Write_Com@com+1
  9762  1719  319E  265E         	fcall	_Write_Com
  9763  171B  0008               	return
  9764  171C                     __end_of_set_point:	
  9765                           
  9766                           	psect	text27
  9767  1343                     __ptext27:	
  9768 ;; *************** function _readFromTable *****************
  9769 ;; Defined at:
  9770 ;;		line 196 in file "func.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;  x               1    wreg     unsigned char 
  9773 ;;  y               1    3[BANK0 ] unsigned char 
  9774 ;;  offset          2    4[BANK0 ] int 
  9775 ;; Auto vars:     Size  Location     Type
  9776 ;;  x               1   13[BANK0 ] unsigned char 
  9777 ;; Return value:  Size  Location     Type
  9778 ;;                  1    wreg      unsigned char 
  9779 ;; Registers used:
  9780 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9786 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;Total ram usage:       11 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; Hardware stack levels required when called:    4
  9793 ;; This function calls:
  9794 ;;		Nothing
  9795 ;; This function is called by:
  9796 ;;		_set_point
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           
  9801                           ;psect for function _readFromTable
  9802  1343                     _readFromTable:	
  9803                           
  9804                           ;incstack = 0
  9805                           ; Regs used in _readFromTable: [wreg+fsr1l+fsr1h+status,2+status,0]
  9806                           ;readFromTable@x stored from wreg
  9807  1343  0020               	movlb	0	; select bank0
  9808  1344  00AD               	movwf	readFromTable@x
  9809                           
  9810                           ;func.c: 200: if(table[x][y] & 0x08)
  9811  1345  082D               	movf	readFromTable@x,w
  9812  1346  00A6               	movwf	??_readFromTable
  9813  1347  3003               	movlw	3
  9814  1348                     u3215:	
  9815  1348  35A6               	lslf	??_readFromTable,f
  9816  1349  0B89               	decfsz	9,f
  9817  134A  2B48               	goto	u3215
  9818  134B  30A5               	movlw	(low (_table| 0))& (0+255)
  9819  134C  0726               	addwf	??_readFromTable,w
  9820  134D  00A7               	movwf	??_readFromTable+1
  9821  134E  0823               	movf	readFromTable@y,w
  9822  134F  0727               	addwf	??_readFromTable+1,w
  9823  1350  00A8               	movwf	??_readFromTable+2
  9824  1351  0828               	movf	??_readFromTable+2,w
  9825  1352  0086               	movwf	6
  9826  1353  0187               	clrf	7
  9827  1354  1D81               	btfss	1,3
  9828  1355  2B7A               	goto	l2818
  9829                           
  9830                           ;func.c: 201: return screen[table[x][y]-5][offset];
  9831  1356  082D               	movf	readFromTable@x,w
  9832  1357  00A6               	movwf	??_readFromTable
  9833  1358  3003               	movlw	3
  9834  1359                     u3235:	
  9835  1359  35A6               	lslf	??_readFromTable,f
  9836  135A  0B89               	decfsz	9,f
  9837  135B  2B59               	goto	u3235
  9838  135C  30A5               	movlw	(low (_table| 0))& (0+255)
  9839  135D  0726               	addwf	??_readFromTable,w
  9840  135E  00A7               	movwf	??_readFromTable+1
  9841  135F  0823               	movf	readFromTable@y,w
  9842  1360  0727               	addwf	??_readFromTable+1,w
  9843  1361  00A8               	movwf	??_readFromTable+2
  9844  1362  0828               	movf	??_readFromTable+2,w
  9845  1363  0086               	movwf	6
  9846  1364  0187               	clrf	7
  9847  1365  0801               	movf	1,w
  9848  1366  00A9               	movwf	??_readFromTable+3
  9849  1367  3003               	movlw	3
  9850  1368                     u3245:	
  9851  1368  35A9               	lslf	??_readFromTable+3,f
  9852  1369  0B89               	decfsz	9,f
  9853  136A  2B68               	goto	u3245
  9854  136B  30D8               	movlw	216
  9855  136C  0729               	addwf	??_readFromTable+3,w
  9856  136D  00AA               	movwf	??_readFromTable+4
  9857  136E  3020               	movlw	(low (_screen| (0+256)))& (0+255)
  9858  136F  072A               	addwf	??_readFromTable+4,w
  9859  1370  00AB               	movwf	??_readFromTable+5
  9860  1371  0824               	movf	readFromTable@offset,w
  9861  1372  072B               	addwf	??_readFromTable+5,w
  9862  1373  00AC               	movwf	??_readFromTable+6
  9863  1374  082C               	movf	??_readFromTable+6,w
  9864  1375  0086               	movwf	6
  9865  1376  3001               	movlw	1	; select bank2/3
  9866  1377  0087               	movwf	7
  9867  1378  0801               	movf	1,w
  9868  1379  0008               	return
  9869  137A                     l2818:	
  9870                           
  9871                           ;func.c: 202: else
  9872                           ;func.c: 203: return screen[table[x][y]][offset];
  9873  137A  082D               	movf	readFromTable@x,w
  9874  137B  00A6               	movwf	??_readFromTable
  9875  137C  3003               	movlw	3
  9876  137D                     u3255:	
  9877  137D  35A6               	lslf	??_readFromTable,f
  9878  137E  0B89               	decfsz	9,f
  9879  137F  2B7D               	goto	u3255
  9880  1380  30A5               	movlw	(low (_table| 0))& (0+255)
  9881  1381  0726               	addwf	??_readFromTable,w
  9882  1382  00A7               	movwf	??_readFromTable+1
  9883  1383  0823               	movf	readFromTable@y,w
  9884  1384  0727               	addwf	??_readFromTable+1,w
  9885  1385  00A8               	movwf	??_readFromTable+2
  9886  1386  0828               	movf	??_readFromTable+2,w
  9887  1387  0086               	movwf	6
  9888  1388  0187               	clrf	7
  9889  1389  0801               	movf	1,w
  9890  138A  00A9               	movwf	??_readFromTable+3
  9891  138B  3003               	movlw	3
  9892  138C                     u3265:	
  9893  138C  35A9               	lslf	??_readFromTable+3,f
  9894  138D  0B89               	decfsz	9,f
  9895  138E  2B8C               	goto	u3265
  9896  138F  3020               	movlw	(low (_screen| (0+256)))& (0+255)
  9897  1390  0729               	addwf	??_readFromTable+3,w
  9898  1391  00AA               	movwf	??_readFromTable+4
  9899  1392  0824               	movf	readFromTable@offset,w
  9900  1393  072A               	addwf	??_readFromTable+4,w
  9901  1394  00AB               	movwf	??_readFromTable+5
  9902  1395  082B               	movf	??_readFromTable+5,w
  9903  1396  0086               	movwf	6
  9904  1397  3001               	movlw	1	; select bank2/3
  9905  1398  0087               	movwf	7
  9906  1399  0801               	movf	1,w
  9907  139A  0008               	return
  9908  139B                     __end_of_readFromTable:	
  9909                           
  9910                           	psect	text28
  9911  112C                     __ptext28:	
  9912 ;; *************** function _get_Y_Addr *****************
  9913 ;; Defined at:
  9914 ;;		line 171 in file "func.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;  x               1    wreg     unsigned char 
  9917 ;;  y               1   12[BANK0 ] unsigned char 
  9918 ;; Auto vars:     Size  Location     Type
  9919 ;;  x               1   17[BANK0 ] unsigned char 
  9920 ;;  addresses       2   15[BANK0 ] unsigned char [2]
  9921 ;;  addr_Offset     1   24[BANK0 ] unsigned char 
  9922 ;;  addr            1   23[BANK0 ] unsigned char 
  9923 ;;  init_Addr       1   22[BANK0 ] unsigned char 
  9924 ;; Return value:  Size  Location     Type
  9925 ;;                  1    wreg      unsigned char 
  9926 ;; Registers used:
  9927 ;;		wreg, status,2, status,0, pclath, cstack
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9933 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;Total ram usage:       13 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; Hardware stack levels required when called:    5
  9940 ;; This function calls:
  9941 ;;		___awdiv
  9942 ;; This function is called by:
  9943 ;;		_set_point
  9944 ;; This function uses a non-reentrant model
  9945 ;;
  9946                           
  9947                           
  9948                           ;psect for function _get_Y_Addr
  9949  112C                     _get_Y_Addr:	
  9950                           
  9951                           ;incstack = 0
  9952                           ; Regs used in _get_Y_Addr: [wreg+status,2+status,0+pclath+cstack]
  9953                           ;get_Y_Addr@x stored from wreg
  9954  112C  0020               	movlb	0	; select bank0
  9955  112D  00B1               	movwf	get_Y_Addr@x
  9956                           
  9957                           ;func.c: 172: unsigned char addresses[] = {0x80,0x88};
  9958  112E  0021               	movlb	1	; select bank1
  9959  112F  086A               	movf	(get_Y_Addr@F6419+1)^(0+128),w
  9960  1130  0020               	movlb	0	; select bank0
  9961  1131  00B0               	movwf	get_Y_Addr@addresses+1
  9962  1132  0021               	movlb	1	; select bank1
  9963  1133  0869               	movf	get_Y_Addr@F6419^(0+128),w
  9964  1134  0020               	movlb	0	; select bank0
  9965  1135  00AF               	movwf	get_Y_Addr@addresses
  9966                           
  9967                           ;func.c: 173: unsigned char init_Addr, addr, addr_Offset;
  9968                           ;func.c: 174: init_Addr = (x<4) ? addresses[0] : addresses[1];
  9969  1136  3004               	movlw	4
  9970  1137  0231               	subwf	get_Y_Addr@x,w
  9971  1138  1C03               	skipc
  9972  1139  293C               	goto	l2758
  9973  113A  0830               	movf	get_Y_Addr@addresses+1,w
  9974  113B  293D               	goto	L7
  9975  113C                     l2758:	
  9976  113C  082F               	movf	get_Y_Addr@addresses,w
  9977  113D                     L7:	
  9978  113D  00AD               	movwf	??_get_Y_Addr
  9979  113E  01AE               	clrf	??_get_Y_Addr+1
  9980  113F  082D               	movf	??_get_Y_Addr,w
  9981  1140  00B2               	movwf	_get_Y_Addr$438
  9982  1141  082E               	movf	??_get_Y_Addr+1,w
  9983  1142  00B3               	movwf	_get_Y_Addr$438+1
  9984  1143  0832               	movf	_get_Y_Addr$438,w
  9985  1144  00AD               	movwf	??_get_Y_Addr
  9986  1145  082D               	movf	??_get_Y_Addr,w
  9987  1146  00B6               	movwf	get_Y_Addr@init_Addr
  9988                           
  9989                           ;func.c: 175: addr_Offset = (y%2 == 0) ? y/2 : (y-1)/2;
  9990  1147  1C2C               	btfss	get_Y_Addr@y,0
  9991  1148  2954               	goto	l2764
  9992  1149  3002               	movlw	2
  9993  114A  00A3               	movwf	___awdiv@divisor
  9994  114B  3000               	movlw	0
  9995  114C  00A4               	movwf	___awdiv@divisor+1
  9996  114D  082C               	movf	get_Y_Addr@y,w
  9997  114E  3EFF               	addlw	255
  9998  114F  00A5               	movwf	___awdiv@dividend
  9999  1150  30FF               	movlw	255
 10000  1151  1803               	skipnc
 10001  1152  3000               	movlw	0
 10002  1153  295E               	goto	L9
 10003  1154                     l2764:	
 10004  1154  3002               	movlw	2
 10005  1155  00A3               	movwf	___awdiv@divisor
 10006  1156  3000               	movlw	0
 10007  1157  00A4               	movwf	___awdiv@divisor+1
 10008  1158  082C               	movf	get_Y_Addr@y,w
 10009  1159  00AD               	movwf	??_get_Y_Addr
 10010  115A  01AE               	clrf	??_get_Y_Addr+1
 10011  115B  082D               	movf	??_get_Y_Addr,w
 10012  115C  00A5               	movwf	___awdiv@dividend
 10013  115D  082E               	movf	??_get_Y_Addr+1,w
 10014  115E                     L9:	
 10015  115E  00A6               	movwf	___awdiv@dividend+1
 10016  115F  3192  229B         	fcall	___awdiv
 10017  1161  0020               	movlb	0	; select bank0
 10018  1162  0824               	movf	?___awdiv+1,w
 10019  1163  00B5               	movwf	_get_Y_Addr$439+1
 10020  1164  0823               	movf	?___awdiv,w
 10021  1165  00B4               	movwf	_get_Y_Addr$439
 10022  1166  0834               	movf	_get_Y_Addr$439,w
 10023  1167  00AD               	movwf	??_get_Y_Addr
 10024  1168  082D               	movf	??_get_Y_Addr,w
 10025  1169  00B8               	movwf	get_Y_Addr@addr_Offset
 10026                           
 10027                           ;func.c: 176: addr = init_Addr + addr_Offset;
 10028  116A  0836               	movf	get_Y_Addr@init_Addr,w
 10029  116B  0738               	addwf	get_Y_Addr@addr_Offset,w
 10030  116C  00AD               	movwf	??_get_Y_Addr
 10031  116D  082D               	movf	??_get_Y_Addr,w
 10032  116E  00B7               	movwf	get_Y_Addr@addr
 10033                           
 10034                           ;func.c: 178: return addr;
 10035  116F  0837               	movf	get_Y_Addr@addr,w
 10036  1170  0008               	return
 10037  1171                     __end_of_get_Y_Addr:	
 10038                           
 10039                           	psect	text29
 10040  102C                     __ptext29:	
 10041 ;; *************** function _get_X_Addr *****************
 10042 ;; Defined at:
 10043 ;;		line 181 in file "func.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;  x               1    wreg     unsigned char 
 10046 ;;  y               1    3[BANK0 ] unsigned char 
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;  x               1    6[BANK0 ] unsigned char 
 10049 ;;  addr            1    5[BANK0 ] unsigned char 
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  1    wreg      unsigned char 
 10052 ;; Registers used:
 10053 ;;		wreg, status,2, status,0
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10059 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;Total ram usage:        4 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    4
 10066 ;; This function calls:
 10067 ;;		Nothing
 10068 ;; This function is called by:
 10069 ;;		_set_point
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           
 10074                           ;psect for function _get_X_Addr
 10075  102C                     _get_X_Addr:	
 10076                           
 10077                           ;incstack = 0
 10078                           ; Regs used in _get_X_Addr: [wreg+status,2+status,0]
 10079                           ;get_X_Addr@x stored from wreg
 10080  102C  0020               	movlb	0	; select bank0
 10081  102D  00A6               	movwf	get_X_Addr@x
 10082                           
 10083                           ;func.c: 182: unsigned char addr;
 10084                           ;func.c: 183: if(x == 0 || x == 4) addr = 0x80;
 10085  102E  0826               	movf	get_X_Addr@x,w
 10086  102F  1903               	btfsc	3,2
 10087  1030  2835               	goto	l2778
 10088  1031  3004               	movlw	4
 10089  1032  0626               	xorwf	get_X_Addr@x,w
 10090  1033  1D03               	btfss	3,2
 10091  1034  2837               	goto	l2780
 10092  1035                     l2778:	
 10093  1035  3080               	movlw	128
 10094  1036  2853               	goto	L12
 10095  1037                     l2780:	
 10096                           
 10097                           ;func.c: 184: else if(x == 1 || x == 5) addr = 0x88;
 10098  1037  0326               	decf	get_X_Addr@x,w
 10099  1038  1903               	btfsc	3,2
 10100  1039  283E               	goto	l2784
 10101  103A  3005               	movlw	5
 10102  103B  0626               	xorwf	get_X_Addr@x,w
 10103  103C  1D03               	btfss	3,2
 10104  103D  2840               	goto	l2786
 10105  103E                     l2784:	
 10106  103E  3088               	movlw	136
 10107  103F  2853               	goto	L12
 10108  1040                     l2786:	
 10109                           
 10110                           ;func.c: 185: else if(x == 2 || x == 6) addr = 0x90;
 10111  1040  3002               	movlw	2
 10112  1041  0626               	xorwf	get_X_Addr@x,w
 10113  1042  1903               	btfsc	3,2
 10114  1043  2848               	goto	l2790
 10115  1044  3006               	movlw	6
 10116  1045  0626               	xorwf	get_X_Addr@x,w
 10117  1046  1D03               	btfss	3,2
 10118  1047  284A               	goto	l2792
 10119  1048                     l2790:	
 10120  1048  3090               	movlw	144
 10121  1049  2853               	goto	L12
 10122  104A                     l2792:	
 10123                           
 10124                           ;func.c: 186: else if(x == 3 || x == 7) addr = 0x98;
 10125  104A  3003               	movlw	3
 10126  104B  0626               	xorwf	get_X_Addr@x,w
 10127  104C  1903               	btfsc	3,2
 10128  104D  2852               	goto	l2796
 10129  104E  3007               	movlw	7
 10130  104F  0626               	xorwf	get_X_Addr@x,w
 10131  1050  1D03               	btfss	3,2
 10132  1051  2856               	goto	l358
 10133  1052                     l2796:	
 10134  1052  3098               	movlw	152
 10135  1053                     L12:	
 10136  1053  00A4               	movwf	??_get_X_Addr
 10137  1054  0824               	movf	??_get_X_Addr,w
 10138  1055  00A5               	movwf	get_X_Addr@addr
 10139  1056                     l358:	
 10140                           
 10141                           ;func.c: 187: return addr;
 10142  1056  0825               	movf	get_X_Addr@addr,w
 10143  1057  0008               	return
 10144  1058                     __end_of_get_X_Addr:	
 10145                           
 10146                           	psect	text30
 10147  1E50                     __ptext30:	
 10148 ;; *************** function _check_Pos *****************
 10149 ;; Defined at:
 10150 ;;		line 190 in file "func.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;  x               1    wreg     unsigned char 
 10153 ;;  y               1    3[BANK0 ] unsigned char 
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;  x               1    0[COMMON] unsigned char 
 10156 ;;  result          2    6[BANK0 ] int 
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  2    3[BANK0 ] int 
 10159 ;; Registers used:
 10160 ;;		wreg, status,2
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10166 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;Total ram usage:        5 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    4
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		_set_point
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           
 10181                           ;psect for function _check_Pos
 10182  1E50                     _check_Pos:	
 10183                           
 10184                           ;func.c: 191: int result = 0;
 10185                           
 10186                           ;incstack = 0
 10187                           ; Regs used in _check_Pos: [wreg+status,2]
 10188  1E50  0020               	movlb	0	; select bank0
 10189  1E51  01A6               	clrf	check_Pos@result
 10190  1E52  01A7               	clrf	check_Pos@result+1
 10191                           
 10192                           ;func.c: 192: if(y%2 != 0) result = 1;
 10193  1E53  1C23               	btfss	check_Pos@y,0
 10194  1E54  2E59               	goto	l2806
 10195  1E55  3001               	movlw	1
 10196  1E56  00A6               	movwf	check_Pos@result
 10197  1E57  3000               	movlw	0
 10198  1E58  00A7               	movwf	check_Pos@result+1
 10199  1E59                     l2806:	
 10200                           
 10201                           ;func.c: 193: return result;
 10202  1E59  0827               	movf	check_Pos@result+1,w
 10203  1E5A  00A4               	movwf	?_check_Pos+1
 10204  1E5B  0826               	movf	check_Pos@result,w
 10205  1E5C  00A3               	movwf	?_check_Pos
 10206  1E5D  0008               	return
 10207  1E5E                     __end_of_check_Pos:	
 10208                           
 10209                           	psect	text31
 10210  11B7                     __ptext31:	
 10211 ;; *************** function _int2string *****************
 10212 ;; Defined at:
 10213 ;;		line 3 in file "func.c"
 10214 ;; Parameters:    Size  Location     Type
 10215 ;;  a               1    wreg     PTR unsigned char 
 10216 ;;		 -> display_step(10), display_white(10), display_black(10), 
 10217 ;;  begin           1   12[BANK0 ] unsigned char 
 10218 ;;  num             1   13[BANK0 ] unsigned char 
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;  a               1   20[BANK0 ] PTR unsigned char 
 10221 ;;		 -> display_step(10), display_white(10), display_black(10), 
 10222 ;;  i               2   18[BANK0 ] int 
 10223 ;; Return value:  Size  Location     Type
 10224 ;;                  1    wreg      void 
 10225 ;; Registers used:
 10226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10227 ;; Tracked objects:
 10228 ;;		On entry : 0/0
 10229 ;;		On exit  : 0/0
 10230 ;;		Unchanged: 0/0
 10231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10232 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;Total ram usage:        9 bytes
 10237 ;; Hardware stack levels used:    1
 10238 ;; Hardware stack levels required when called:    5
 10239 ;; This function calls:
 10240 ;;		___awdiv
 10241 ;;		___awmod
 10242 ;; This function is called by:
 10243 ;;		_draw_heibaiqi_right
 10244 ;;		_choose_point
 10245 ;;		_draw_wayout_right
 10246 ;;		_wayout
 10247 ;; This function uses a non-reentrant model
 10248 ;;
 10249                           
 10250                           
 10251                           ;psect for function _int2string
 10252  11B7                     _int2string:	
 10253                           
 10254                           ;incstack = 0
 10255                           ; Regs used in _int2string: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10256                           ;int2string@a stored from wreg
 10257  11B7  0020               	movlb	0	; select bank0
 10258  11B8  00B4               	movwf	int2string@a
 10259                           
 10260                           ;func.c: 5: int i=begin;
 10261  11B9  082C               	movf	int2string@begin,w
 10262  11BA  00AE               	movwf	??_int2string
 10263  11BB  01AF               	clrf	??_int2string+1
 10264  11BC  082E               	movf	??_int2string,w
 10265  11BD  00B2               	movwf	int2string@i
 10266  11BE  082F               	movf	??_int2string+1,w
 10267  11BF  00B3               	movwf	int2string@i+1
 10268                           
 10269                           ;func.c: 6: a[i]=num/10+'0';
 10270  11C0  300A               	movlw	10
 10271  11C1  00A3               	movwf	___awdiv@divisor
 10272  11C2  3000               	movlw	0
 10273  11C3  00A4               	movwf	___awdiv@divisor+1
 10274  11C4  082D               	movf	int2string@num,w
 10275  11C5  00AE               	movwf	??_int2string
 10276  11C6  01AF               	clrf	??_int2string+1
 10277  11C7  082E               	movf	??_int2string,w
 10278  11C8  00A5               	movwf	___awdiv@dividend
 10279  11C9  082F               	movf	??_int2string+1,w
 10280  11CA  00A6               	movwf	___awdiv@dividend+1
 10281  11CB  3192  229B  3191   	fcall	___awdiv
 10282  11CE  0020               	movlb	0	; select bank0
 10283  11CF  0823               	movf	?___awdiv,w
 10284  11D0  3E30               	addlw	48
 10285  11D1  00B0               	movwf	??_int2string+2
 10286  11D2  0832               	movf	int2string@i,w
 10287  11D3  0734               	addwf	int2string@a,w
 10288  11D4  00B1               	movwf	??_int2string+3
 10289  11D5  0831               	movf	??_int2string+3,w
 10290  11D6  0086               	movwf	6
 10291  11D7  3001               	movlw	1	; select bank2/3
 10292  11D8  0087               	movwf	7
 10293  11D9  0830               	movf	??_int2string+2,w
 10294  11DA  0081               	movwf	1
 10295                           
 10296                           ;func.c: 7: a[i+1]=num%10+'0';
 10297  11DB  300A               	movlw	10
 10298  11DC  00A3               	movwf	___awmod@divisor
 10299  11DD  3000               	movlw	0
 10300  11DE  00A4               	movwf	___awmod@divisor+1
 10301  11DF  082D               	movf	int2string@num,w
 10302  11E0  00AE               	movwf	??_int2string
 10303  11E1  01AF               	clrf	??_int2string+1
 10304  11E2  082E               	movf	??_int2string,w
 10305  11E3  00A5               	movwf	___awmod@dividend
 10306  11E4  082F               	movf	??_int2string+1,w
 10307  11E5  00A6               	movwf	___awmod@dividend+1
 10308  11E6  3191  2171         	fcall	___awmod
 10309  11E8  0020               	movlb	0	; select bank0
 10310  11E9  0823               	movf	?___awmod,w
 10311  11EA  3E30               	addlw	48
 10312  11EB  00B0               	movwf	??_int2string+2
 10313  11EC  0832               	movf	int2string@i,w
 10314  11ED  3E01               	addlw	1
 10315  11EE  0734               	addwf	int2string@a,w
 10316  11EF  00B1               	movwf	??_int2string+3
 10317  11F0  0831               	movf	??_int2string+3,w
 10318  11F1  0086               	movwf	6
 10319  11F2  3001               	movlw	1	; select bank2/3
 10320  11F3  0087               	movwf	7
 10321  11F4  0830               	movf	??_int2string+2,w
 10322  11F5  0081               	movwf	1
 10323                           
 10324                           ;func.c: 8: a[i+2]='\0';
 10325  11F6  0832               	movf	int2string@i,w
 10326  11F7  3E02               	addlw	2
 10327  11F8  0734               	addwf	int2string@a,w
 10328  11F9  00AE               	movwf	??_int2string
 10329  11FA  082E               	movf	??_int2string,w
 10330  11FB  0086               	movwf	6
 10331  11FC  3001               	movlw	1	; select bank2/3
 10332  11FD  0087               	movwf	7
 10333  11FE  0181               	clrf	1
 10334  11FF  0008               	return
 10335  1200                     __end_of_int2string:	
 10336                           
 10337                           	psect	text32
 10338  1171                     __ptext32:	
 10339 ;; *************** function ___awmod *****************
 10340 ;; Defined at:
 10341 ;;		line 6 in file "E:\xCB\sources\common\awmod.c"
 10342 ;; Parameters:    Size  Location     Type
 10343 ;;  divisor         2    3[BANK0 ] int 
 10344 ;;  dividend        2    5[BANK0 ] int 
 10345 ;; Auto vars:     Size  Location     Type
 10346 ;;  sign            1    9[BANK0 ] unsigned char 
 10347 ;;  counter         1    8[BANK0 ] unsigned char 
 10348 ;; Return value:  Size  Location     Type
 10349 ;;                  2    3[BANK0 ] int 
 10350 ;; Registers used:
 10351 ;;		wreg, status,2, status,0
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 0/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10357 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10358 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;Total ram usage:        7 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:    4
 10364 ;; This function calls:
 10365 ;;		Nothing
 10366 ;; This function is called by:
 10367 ;;		_int2string
 10368 ;;		_choose_level2
 10369 ;;		_choose_level
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           
 10374                           ;psect for function ___awmod
 10375  1171                     ___awmod:	
 10376                           
 10377                           ;incstack = 0
 10378                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10379  1171  0020               	movlb	0	; select bank0
 10380  1172  01A9               	clrf	___awmod@sign
 10381  1173  1FA6               	btfss	___awmod@dividend+1,7
 10382  1174  297C               	goto	l2830
 10383  1175  09A5               	comf	___awmod@dividend,f
 10384  1176  09A6               	comf	___awmod@dividend+1,f
 10385  1177  0AA5               	incf	___awmod@dividend,f
 10386  1178  1903               	skipnz
 10387  1179  0AA6               	incf	___awmod@dividend+1,f
 10388  117A  01A9               	clrf	___awmod@sign
 10389  117B  0AA9               	incf	___awmod@sign,f
 10390  117C                     l2830:	
 10391  117C  1FA4               	btfss	___awmod@divisor+1,7
 10392  117D  2983               	goto	l2834
 10393  117E  09A3               	comf	___awmod@divisor,f
 10394  117F  09A4               	comf	___awmod@divisor+1,f
 10395  1180  0AA3               	incf	___awmod@divisor,f
 10396  1181  1903               	skipnz
 10397  1182  0AA4               	incf	___awmod@divisor+1,f
 10398  1183                     l2834:	
 10399  1183  0823               	movf	___awmod@divisor,w
 10400  1184  0424               	iorwf	___awmod@divisor+1,w
 10401  1185  1903               	btfsc	3,2
 10402  1186  29AA               	goto	l2852
 10403  1187  01A8               	clrf	___awmod@counter
 10404  1188  0AA8               	incf	___awmod@counter,f
 10405  1189                     l2842:	
 10406  1189  1BA4               	btfsc	___awmod@divisor+1,7
 10407  118A  2995               	goto	l2844
 10408  118B  3001               	movlw	1
 10409  118C                     u3305:	
 10410  118C  35A3               	lslf	___awmod@divisor,f
 10411  118D  0DA4               	rlf	___awmod@divisor+1,f
 10412  118E  0B89               	decfsz	9,f
 10413  118F  298C               	goto	u3305
 10414  1190  3001               	movlw	1
 10415  1191  00A7               	movwf	??___awmod
 10416  1192  0827               	movf	??___awmod,w
 10417  1193  07A8               	addwf	___awmod@counter,f
 10418  1194  2989               	goto	l2842
 10419  1195                     l2844:	
 10420  1195  0824               	movf	___awmod@divisor+1,w
 10421  1196  0226               	subwf	___awmod@dividend+1,w
 10422  1197  1D03               	skipz
 10423  1198  299B               	goto	u3325
 10424  1199  0823               	movf	___awmod@divisor,w
 10425  119A  0225               	subwf	___awmod@dividend,w
 10426  119B                     u3325:	
 10427  119B  1C03               	skipc
 10428  119C  29A1               	goto	l2848
 10429  119D  0823               	movf	___awmod@divisor,w
 10430  119E  02A5               	subwf	___awmod@dividend,f
 10431  119F  0824               	movf	___awmod@divisor+1,w
 10432  11A0  3BA6               	subwfb	___awmod@dividend+1,f
 10433  11A1                     l2848:	
 10434  11A1  3001               	movlw	1
 10435  11A2                     u3335:	
 10436  11A2  36A4               	lsrf	___awmod@divisor+1,f
 10437  11A3  0CA3               	rrf	___awmod@divisor,f
 10438  11A4  0B89               	decfsz	9,f
 10439  11A5  29A2               	goto	u3335
 10440  11A6  3001               	movlw	1
 10441  11A7  02A8               	subwf	___awmod@counter,f
 10442  11A8  1D03               	btfss	3,2
 10443  11A9  2995               	goto	l2844
 10444  11AA                     l2852:	
 10445  11AA  0829               	movf	___awmod@sign,w
 10446  11AB  1903               	btfsc	3,2
 10447  11AC  29B2               	goto	l2856
 10448  11AD  09A5               	comf	___awmod@dividend,f
 10449  11AE  09A6               	comf	___awmod@dividend+1,f
 10450  11AF  0AA5               	incf	___awmod@dividend,f
 10451  11B0  1903               	skipnz
 10452  11B1  0AA6               	incf	___awmod@dividend+1,f
 10453  11B2                     l2856:	
 10454  11B2  0826               	movf	___awmod@dividend+1,w
 10455  11B3  00A4               	movwf	?___awmod+1
 10456  11B4  0825               	movf	___awmod@dividend,w
 10457  11B5  00A3               	movwf	?___awmod
 10458  11B6  0008               	return
 10459  11B7                     __end_of___awmod:	
 10460                           
 10461                           	psect	text33
 10462  129B                     __ptext33:	
 10463 ;; *************** function ___awdiv *****************
 10464 ;; Defined at:
 10465 ;;		line 6 in file "E:\xCB\sources\common\awdiv.c"
 10466 ;; Parameters:    Size  Location     Type
 10467 ;;  divisor         2    3[BANK0 ] int 
 10468 ;;  dividend        2    5[BANK0 ] int 
 10469 ;; Auto vars:     Size  Location     Type
 10470 ;;  quotient        2   10[BANK0 ] int 
 10471 ;;  sign            1    9[BANK0 ] unsigned char 
 10472 ;;  counter         1    8[BANK0 ] unsigned char 
 10473 ;; Return value:  Size  Location     Type
 10474 ;;                  2    3[BANK0 ] int 
 10475 ;; Registers used:
 10476 ;;		wreg, status,2, status,0
 10477 ;; Tracked objects:
 10478 ;;		On entry : 0/0
 10479 ;;		On exit  : 0/0
 10480 ;;		Unchanged: 0/0
 10481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10482 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;Total ram usage:        9 bytes
 10487 ;; Hardware stack levels used:    1
 10488 ;; Hardware stack levels required when called:    4
 10489 ;; This function calls:
 10490 ;;		Nothing
 10491 ;; This function is called by:
 10492 ;;		_int2string
 10493 ;;		_get_Y_Addr
 10494 ;;		_music_delay
 10495 ;;		_music
 10496 ;;		_choose_level2
 10497 ;; This function uses a non-reentrant model
 10498 ;;
 10499                           
 10500                           
 10501                           ;psect for function ___awdiv
 10502  129B                     ___awdiv:	
 10503                           
 10504                           ;incstack = 0
 10505                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10506  129B  0020               	movlb	0	; select bank0
 10507  129C  01A9               	clrf	___awdiv@sign
 10508  129D  1FA4               	btfss	___awdiv@divisor+1,7
 10509  129E  2AA6               	goto	l2702
 10510  129F  09A3               	comf	___awdiv@divisor,f
 10511  12A0  09A4               	comf	___awdiv@divisor+1,f
 10512  12A1  0AA3               	incf	___awdiv@divisor,f
 10513  12A2  1903               	skipnz
 10514  12A3  0AA4               	incf	___awdiv@divisor+1,f
 10515  12A4  01A9               	clrf	___awdiv@sign
 10516  12A5  0AA9               	incf	___awdiv@sign,f
 10517  12A6                     l2702:	
 10518  12A6  1FA6               	btfss	___awdiv@dividend+1,7
 10519  12A7  2AB1               	goto	l2708
 10520  12A8  09A5               	comf	___awdiv@dividend,f
 10521  12A9  09A6               	comf	___awdiv@dividend+1,f
 10522  12AA  0AA5               	incf	___awdiv@dividend,f
 10523  12AB  1903               	skipnz
 10524  12AC  0AA6               	incf	___awdiv@dividend+1,f
 10525  12AD  3001               	movlw	1
 10526  12AE  00A7               	movwf	??___awdiv
 10527  12AF  0827               	movf	??___awdiv,w
 10528  12B0  06A9               	xorwf	___awdiv@sign,f
 10529  12B1                     l2708:	
 10530  12B1  01AA               	clrf	___awdiv@quotient
 10531  12B2  01AB               	clrf	___awdiv@quotient+1
 10532  12B3  0823               	movf	___awdiv@divisor,w
 10533  12B4  0424               	iorwf	___awdiv@divisor+1,w
 10534  12B5  1903               	btfsc	3,2
 10535  12B6  2AE0               	goto	l2730
 10536  12B7  01A8               	clrf	___awdiv@counter
 10537  12B8  0AA8               	incf	___awdiv@counter,f
 10538  12B9                     l2718:	
 10539  12B9  1BA4               	btfsc	___awdiv@divisor+1,7
 10540  12BA  2AC5               	goto	l2720
 10541  12BB  3001               	movlw	1
 10542  12BC                     u3035:	
 10543  12BC  35A3               	lslf	___awdiv@divisor,f
 10544  12BD  0DA4               	rlf	___awdiv@divisor+1,f
 10545  12BE  0B89               	decfsz	9,f
 10546  12BF  2ABC               	goto	u3035
 10547  12C0  3001               	movlw	1
 10548  12C1  00A7               	movwf	??___awdiv
 10549  12C2  0827               	movf	??___awdiv,w
 10550  12C3  07A8               	addwf	___awdiv@counter,f
 10551  12C4  2AB9               	goto	l2718
 10552  12C5                     l2720:	
 10553  12C5  3001               	movlw	1
 10554  12C6                     u3055:	
 10555  12C6  35AA               	lslf	___awdiv@quotient,f
 10556  12C7  0DAB               	rlf	___awdiv@quotient+1,f
 10557  12C8  0B89               	decfsz	9,f
 10558  12C9  2AC6               	goto	u3055
 10559  12CA  0824               	movf	___awdiv@divisor+1,w
 10560  12CB  0226               	subwf	___awdiv@dividend+1,w
 10561  12CC  1D03               	skipz
 10562  12CD  2AD0               	goto	u3065
 10563  12CE  0823               	movf	___awdiv@divisor,w
 10564  12CF  0225               	subwf	___awdiv@dividend,w
 10565  12D0                     u3065:	
 10566  12D0  1C03               	skipc
 10567  12D1  2AD7               	goto	l2726
 10568  12D2  0823               	movf	___awdiv@divisor,w
 10569  12D3  02A5               	subwf	___awdiv@dividend,f
 10570  12D4  0824               	movf	___awdiv@divisor+1,w
 10571  12D5  3BA6               	subwfb	___awdiv@dividend+1,f
 10572  12D6  142A               	bsf	___awdiv@quotient,0
 10573  12D7                     l2726:	
 10574  12D7  3001               	movlw	1
 10575  12D8                     u3075:	
 10576  12D8  36A4               	lsrf	___awdiv@divisor+1,f
 10577  12D9  0CA3               	rrf	___awdiv@divisor,f
 10578  12DA  0B89               	decfsz	9,f
 10579  12DB  2AD8               	goto	u3075
 10580  12DC  3001               	movlw	1
 10581  12DD  02A8               	subwf	___awdiv@counter,f
 10582  12DE  1D03               	btfss	3,2
 10583  12DF  2AC5               	goto	l2720
 10584  12E0                     l2730:	
 10585  12E0  0829               	movf	___awdiv@sign,w
 10586  12E1  1903               	btfsc	3,2
 10587  12E2  2AE8               	goto	l2734
 10588  12E3  09AA               	comf	___awdiv@quotient,f
 10589  12E4  09AB               	comf	___awdiv@quotient+1,f
 10590  12E5  0AAA               	incf	___awdiv@quotient,f
 10591  12E6  1903               	skipnz
 10592  12E7  0AAB               	incf	___awdiv@quotient+1,f
 10593  12E8                     l2734:	
 10594  12E8  082B               	movf	___awdiv@quotient+1,w
 10595  12E9  00A4               	movwf	?___awdiv+1
 10596  12EA  082A               	movf	___awdiv@quotient,w
 10597  12EB  00A3               	movwf	?___awdiv
 10598  12EC  0008               	return
 10599  12ED                     __end_of___awdiv:	
 10600                           
 10601                           	psect	text34
 10602  09CA                     __ptext34:	
 10603 ;; *************** function _check_point *****************
 10604 ;; Defined at:
 10605 ;;		line 85 in file "heibaiqi.c"
 10606 ;; Parameters:    Size  Location     Type
 10607 ;;  row             1    wreg     unsigned char 
 10608 ;;  col             1    9[BANK0 ] unsigned char 
 10609 ;;  ply             1   10[BANK0 ] unsigned char 
 10610 ;; Auto vars:     Size  Location     Type
 10611 ;;  row             1   23[BANK0 ] unsigned char 
 10612 ;;  i               1   28[BANK0 ] unsigned char 
 10613 ;;  flag            1   27[BANK0 ] unsigned char 
 10614 ;;  j               1   26[BANK0 ] unsigned char 
 10615 ;;  add_col         1   25[BANK0 ] unsigned char 
 10616 ;;  add_row         1   24[BANK0 ] unsigned char 
 10617 ;;  temp            1   22[BANK0 ] unsigned char 
 10618 ;;  oppo            1   21[BANK0 ] unsigned char 
 10619 ;;  result          1   20[BANK0 ] unsigned char 
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  1    wreg      unsigned char 
 10622 ;; Registers used:
 10623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;Total ram usage:       20 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; Hardware stack levels required when called:    5
 10636 ;; This function calls:
 10637 ;;		___bmul
 10638 ;;		___wmul
 10639 ;; This function is called by:
 10640 ;;		_choose_point
 10641 ;; This function uses a non-reentrant model
 10642 ;;
 10643                           
 10644                           
 10645                           ;psect for function _check_point
 10646  09CA                     _check_point:	
 10647                           
 10648                           ;incstack = 0
 10649                           ; Regs used in _check_point: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10650                           ;check_point@row stored from wreg
 10651  09CA  0020               	movlb	0	; select bank0
 10652  09CB  00B7               	movwf	check_point@row
 10653                           
 10654                           ;heibaiqi.c: 87: unsigned char result = 0;
 10655  09CC  01B4               	clrf	check_point@result
 10656                           
 10657                           ;heibaiqi.c: 88: char add_row, add_col;
 10658                           ;heibaiqi.c: 89: unsigned char oppo = 3- ply;
 10659  09CD  032A               	decf	check_point@ply,w
 10660  09CE  3AFF               	xorlw	255
 10661  09CF  3E03               	addlw	3
 10662  09D0  00AB               	movwf	??_check_point
 10663  09D1  082B               	movf	??_check_point,w
 10664  09D2  00B5               	movwf	check_point@oppo
 10665                           
 10666                           ;heibaiqi.c: 90: unsigned char temp = 0b10000000;
 10667  09D3  3080               	movlw	128
 10668  09D4  00AB               	movwf	??_check_point
 10669  09D5  082B               	movf	??_check_point,w
 10670  09D6  00B6               	movwf	check_point@temp
 10671                           
 10672                           ;heibaiqi.c: 93: for(unsigned char j=0; j<8; j++){
 10673  09D7  01BA               	clrf	check_point@j
 10674  09D8  3008               	movlw	8
 10675  09D9  023A               	subwf	check_point@j,w
 10676  09DA  1803               	btfsc	3,0
 10677  09DB  2ACF               	goto	l3030
 10678  09DC                     l2990:	
 10679                           
 10680                           ;heibaiqi.c: 94: add_row = towards[j][0];
 10681  09DC  353A               	lslf	check_point@j,w
 10682  09DD  3EA0               	addlw	(low (_towards| (0+256)))& (0+255)
 10683  09DE  0086               	movwf	6
 10684  09DF  3001               	movlw	1	; select bank3/4
 10685  09E0  0087               	movwf	7
 10686  09E1  0801               	movf	1,w
 10687  09E2  00AB               	movwf	??_check_point
 10688  09E3  082B               	movf	??_check_point,w
 10689  09E4  00B8               	movwf	check_point@add_row
 10690                           
 10691                           ;heibaiqi.c: 95: add_col = towards[j][1];
 10692  09E5  1403               	setc
 10693  09E6  0D3A               	rlf	check_point@j,w
 10694  09E7  3EA0               	addlw	(low (_towards| (0+256)))& (0+255)
 10695  09E8  0086               	movwf	6
 10696  09E9  3001               	movlw	1	; select bank3/4
 10697  09EA  0087               	movwf	7
 10698  09EB  0801               	movf	1,w
 10699  09EC  00AB               	movwf	??_check_point
 10700  09ED  082B               	movf	??_check_point,w
 10701  09EE  00B9               	movwf	check_point@add_col
 10702                           
 10703                           ;heibaiqi.c: 96: unsigned char flag=0;
 10704  09EF  01BB               	clrf	check_point@flag
 10705                           
 10706                           ;heibaiqi.c: 97: char i=1;
 10707  09F0  01BC               	clrf	check_point@i
 10708  09F1  0ABC               	incf	check_point@i,f
 10709                           
 10710                           ;heibaiqi.c: 111: while(0 <= (char)(row+i*add_row) && (char)(row+i*add_row) < 8 && 0 <= 
      +                          (char)(col+i*add_col) && (char)(col+i*add_col) < 8){
 10711  09F2  2A9D               	goto	l3020
 10712  09F3                     l2996:	
 10713                           
 10714                           ;heibaiqi.c: 112: if(flag == 0){
 10715  09F3  083B               	movf	check_point@flag,w
 10716  09F4  1D03               	btfss	3,2
 10717  09F5  2A29               	goto	l3004
 10718                           
 10719                           ;heibaiqi.c: 113: if(table[row+i*add_row][col+i*add_col] == oppo)
 10720  09F6  0839               	movf	check_point@add_col,w
 10721  09F7  00AB               	movwf	??_check_point
 10722  09F8  082B               	movf	??_check_point,w
 10723  09F9  00A3               	movwf	___bmul@multiplicand
 10724  09FA  083C               	movf	check_point@i,w
 10725  09FB  319E  268C  3189   	fcall	___bmul
 10726  09FE  0020               	movlb	0	; select bank0
 10727  09FF  0729               	addwf	check_point@col,w
 10728  0A00  00AC               	movwf	??_check_point+1
 10729  0A01  30A5               	movlw	(low (_table| 0))& (0+255)
 10730  0A02  072C               	addwf	??_check_point+1,w
 10731  0A03  00AD               	movwf	??_check_point+2
 10732  0A04  083C               	movf	check_point@i,w
 10733  0A05  00AE               	movwf	??_check_point+3
 10734  0A06  01AF               	clrf	??_check_point+4
 10735  0A07  082E               	movf	??_check_point+3,w
 10736  0A08  00A3               	movwf	___wmul@multiplier
 10737  0A09  082F               	movf	??_check_point+4,w
 10738  0A0A  00A4               	movwf	___wmul@multiplier+1
 10739  0A0B  0838               	movf	check_point@add_row,w
 10740  0A0C  00B0               	movwf	??_check_point+5
 10741  0A0D  01B1               	clrf	??_check_point+6
 10742  0A0E  0830               	movf	??_check_point+5,w
 10743  0A0F  00A5               	movwf	___wmul@multiplicand
 10744  0A10  0831               	movf	??_check_point+6,w
 10745  0A11  00A6               	movwf	___wmul@multiplicand+1
 10746  0A12  319E  26EC  3189   	fcall	___wmul
 10747  0A15  0020               	movlb	0	; select bank0
 10748  0A16  0823               	movf	?___wmul,w
 10749  0A17  0737               	addwf	check_point@row,w
 10750  0A18  00B2               	movwf	??_check_point+7
 10751  0A19  3002               	movlw	2
 10752  0A1A                     u3535:	
 10753  0A1A  35B2               	lslf	??_check_point+7,f
 10754  0A1B  3EFF               	addlw	-1
 10755  0A1C  1D03               	skipz
 10756  0A1D  2A1A               	goto	u3535
 10757  0A1E  3532               	lslf	??_check_point+7,w
 10758  0A1F  072D               	addwf	??_check_point+2,w
 10759  0A20  00B3               	movwf	??_check_point+8
 10760  0A21  0833               	movf	??_check_point+8,w
 10761  0A22  0086               	movwf	6
 10762  0A23  0187               	clrf	7
 10763  0A24  0801               	movf	1,w
 10764  0A25  0635               	xorwf	check_point@oppo,w
 10765  0A26  1D03               	skipz
 10766  0A27  2A92               	goto	l3012
 10767  0A28  2A5E               	goto	l3008
 10768  0A29                     l3004:	
 10769                           ;heibaiqi.c: 118: }
 10770                           ;heibaiqi.c: 119: }
 10771                           
 10772                           ;heibaiqi.c: 117: break;
 10773                           
 10774                           ;heibaiqi.c: 115: else{
 10775                           ;heibaiqi.c: 116: flag = 0;
 10776                           
 10777                           ;heibaiqi.c: 114: flag = 1;
 10778                           
 10779                           
 10780                           ;heibaiqi.c: 120: else if(flag == 1){
 10781  0A29  033B               	decf	check_point@flag,w
 10782  0A2A  1D03               	btfss	3,2
 10783  0A2B  2A99               	goto	l3018
 10784                           
 10785                           ;heibaiqi.c: 121: if(table[row+i*add_row][col+i*add_col] == oppo)
 10786  0A2C  0839               	movf	check_point@add_col,w
 10787  0A2D  00AB               	movwf	??_check_point
 10788  0A2E  082B               	movf	??_check_point,w
 10789  0A2F  00A3               	movwf	___bmul@multiplicand
 10790  0A30  083C               	movf	check_point@i,w
 10791  0A31  319E  268C  3189   	fcall	___bmul
 10792  0A34  0020               	movlb	0	; select bank0
 10793  0A35  0729               	addwf	check_point@col,w
 10794  0A36  00AC               	movwf	??_check_point+1
 10795  0A37  30A5               	movlw	(low (_table| 0))& (0+255)
 10796  0A38  072C               	addwf	??_check_point+1,w
 10797  0A39  00AD               	movwf	??_check_point+2
 10798  0A3A  083C               	movf	check_point@i,w
 10799  0A3B  00AE               	movwf	??_check_point+3
 10800  0A3C  01AF               	clrf	??_check_point+4
 10801  0A3D  082E               	movf	??_check_point+3,w
 10802  0A3E  00A3               	movwf	___wmul@multiplier
 10803  0A3F  082F               	movf	??_check_point+4,w
 10804  0A40  00A4               	movwf	___wmul@multiplier+1
 10805  0A41  0838               	movf	check_point@add_row,w
 10806  0A42  00B0               	movwf	??_check_point+5
 10807  0A43  01B1               	clrf	??_check_point+6
 10808  0A44  0830               	movf	??_check_point+5,w
 10809  0A45  00A5               	movwf	___wmul@multiplicand
 10810  0A46  0831               	movf	??_check_point+6,w
 10811  0A47  00A6               	movwf	___wmul@multiplicand+1
 10812  0A48  319E  26EC  3189   	fcall	___wmul
 10813  0A4B  0020               	movlb	0	; select bank0
 10814  0A4C  0823               	movf	?___wmul,w
 10815  0A4D  0737               	addwf	check_point@row,w
 10816  0A4E  00B2               	movwf	??_check_point+7
 10817  0A4F  3002               	movlw	2
 10818  0A50                     u3565:	
 10819  0A50  35B2               	lslf	??_check_point+7,f
 10820  0A51  3EFF               	addlw	-1
 10821  0A52  1D03               	skipz
 10822  0A53  2A50               	goto	u3565
 10823  0A54  3532               	lslf	??_check_point+7,w
 10824  0A55  072D               	addwf	??_check_point+2,w
 10825  0A56  00B3               	movwf	??_check_point+8
 10826  0A57  0833               	movf	??_check_point+8,w
 10827  0A58  0086               	movwf	6
 10828  0A59  0187               	clrf	7
 10829  0A5A  0801               	movf	1,w
 10830  0A5B  0635               	xorwf	check_point@oppo,w
 10831  0A5C  1D03               	skipz
 10832  0A5D  2A61               	goto	l3010
 10833  0A5E                     l3008:	
 10834                           
 10835                           ;heibaiqi.c: 122: flag = 1;
 10836  0A5E  01BB               	clrf	check_point@flag
 10837  0A5F  0ABB               	incf	check_point@flag,f
 10838  0A60  2A99               	goto	l3018
 10839  0A61                     l3010:	
 10840                           
 10841                           ;heibaiqi.c: 123: else if(table[row+i*add_row][col+i*add_col] == 0){
 10842  0A61  0839               	movf	check_point@add_col,w
 10843  0A62  00AB               	movwf	??_check_point
 10844  0A63  082B               	movf	??_check_point,w
 10845  0A64  00A3               	movwf	___bmul@multiplicand
 10846  0A65  083C               	movf	check_point@i,w
 10847  0A66  319E  268C  3189   	fcall	___bmul
 10848  0A69  0020               	movlb	0	; select bank0
 10849  0A6A  0729               	addwf	check_point@col,w
 10850  0A6B  00AC               	movwf	??_check_point+1
 10851  0A6C  30A5               	movlw	(low (_table| 0))& (0+255)
 10852  0A6D  072C               	addwf	??_check_point+1,w
 10853  0A6E  00AD               	movwf	??_check_point+2
 10854  0A6F  083C               	movf	check_point@i,w
 10855  0A70  00AE               	movwf	??_check_point+3
 10856  0A71  01AF               	clrf	??_check_point+4
 10857  0A72  082E               	movf	??_check_point+3,w
 10858  0A73  00A3               	movwf	___wmul@multiplier
 10859  0A74  082F               	movf	??_check_point+4,w
 10860  0A75  00A4               	movwf	___wmul@multiplier+1
 10861  0A76  0838               	movf	check_point@add_row,w
 10862  0A77  00B0               	movwf	??_check_point+5
 10863  0A78  01B1               	clrf	??_check_point+6
 10864  0A79  0830               	movf	??_check_point+5,w
 10865  0A7A  00A5               	movwf	___wmul@multiplicand
 10866  0A7B  0831               	movf	??_check_point+6,w
 10867  0A7C  00A6               	movwf	___wmul@multiplicand+1
 10868  0A7D  319E  26EC  3189   	fcall	___wmul
 10869  0A80  0020               	movlb	0	; select bank0
 10870  0A81  0823               	movf	?___wmul,w
 10871  0A82  0737               	addwf	check_point@row,w
 10872  0A83  00B2               	movwf	??_check_point+7
 10873  0A84  3002               	movlw	2
 10874  0A85                     u3585:	
 10875  0A85  35B2               	lslf	??_check_point+7,f
 10876  0A86  3EFF               	addlw	-1
 10877  0A87  1D03               	skipz
 10878  0A88  2A85               	goto	u3585
 10879  0A89  3532               	lslf	??_check_point+7,w
 10880  0A8A  072D               	addwf	??_check_point+2,w
 10881  0A8B  00B3               	movwf	??_check_point+8
 10882  0A8C  0833               	movf	??_check_point+8,w
 10883  0A8D  0086               	movwf	6
 10884  0A8E  0187               	clrf	7
 10885  0A8F  0801               	movf	1,w
 10886  0A90  1D03               	btfss	3,2
 10887  0A91  2A94               	goto	l3016
 10888  0A92                     l3012:	
 10889                           
 10890                           ;heibaiqi.c: 124: flag = 0;
 10891  0A92  01BB               	clrf	check_point@flag
 10892                           
 10893                           ;heibaiqi.c: 125: break;
 10894  0A93  2ABB               	goto	l3024
 10895  0A94                     l3016:	
 10896                           ;heibaiqi.c: 126: }
 10897                           
 10898                           
 10899                           ;heibaiqi.c: 127: else{
 10900                           ;heibaiqi.c: 128: flag = 2;
 10901  0A94  3002               	movlw	2
 10902  0A95  00AB               	movwf	??_check_point
 10903  0A96  082B               	movf	??_check_point,w
 10904  0A97  00BB               	movwf	check_point@flag
 10905                           
 10906                           ;heibaiqi.c: 129: break;
 10907  0A98  2ABB               	goto	l3024
 10908  0A99                     l3018:	
 10909                           
 10910                           ;heibaiqi.c: 130: }
 10911                           ;heibaiqi.c: 131: }
 10912                           ;heibaiqi.c: 132: i += 1;
 10913  0A99  3001               	movlw	1
 10914  0A9A  00AB               	movwf	??_check_point
 10915  0A9B  082B               	movf	??_check_point,w
 10916  0A9C  07BC               	addwf	check_point@i,f
 10917  0A9D                     l3020:	
 10918  0A9D  0838               	movf	check_point@add_row,w
 10919  0A9E  00AB               	movwf	??_check_point
 10920  0A9F  082B               	movf	??_check_point,w
 10921  0AA0  00A3               	movwf	___bmul@multiplicand
 10922  0AA1  083C               	movf	check_point@i,w
 10923  0AA2  319E  268C  3189   	fcall	___bmul
 10924  0AA5  0020               	movlb	0	; select bank0
 10925  0AA6  0737               	addwf	check_point@row,w
 10926  0AA7  00AC               	movwf	??_check_point+1
 10927  0AA8  3008               	movlw	8
 10928  0AA9  022C               	subwf	??_check_point+1,w
 10929  0AAA  1803               	skipnc
 10930  0AAB  2ABB               	goto	l3024
 10931  0AAC  0839               	movf	check_point@add_col,w
 10932  0AAD  00AB               	movwf	??_check_point
 10933  0AAE  082B               	movf	??_check_point,w
 10934  0AAF  00A3               	movwf	___bmul@multiplicand
 10935  0AB0  083C               	movf	check_point@i,w
 10936  0AB1  319E  268C  3189   	fcall	___bmul
 10937  0AB4  0020               	movlb	0	; select bank0
 10938  0AB5  0729               	addwf	check_point@col,w
 10939  0AB6  00AC               	movwf	??_check_point+1
 10940  0AB7  3008               	movlw	8
 10941  0AB8  022C               	subwf	??_check_point+1,w
 10942  0AB9  1C03               	skipc
 10943  0ABA  29F3               	goto	l2996
 10944  0ABB                     l3024:	
 10945                           
 10946                           ;heibaiqi.c: 133: }
 10947                           ;heibaiqi.c: 134: if(flag == 2){
 10948  0ABB  3002               	movlw	2
 10949  0ABC  063B               	xorwf	check_point@flag,w
 10950  0ABD  1D03               	btfss	3,2
 10951  0ABE  2AC3               	goto	l105
 10952                           
 10953                           ;heibaiqi.c: 135: result |= temp;
 10954  0ABF  0836               	movf	check_point@temp,w
 10955  0AC0  00AB               	movwf	??_check_point
 10956  0AC1  082B               	movf	??_check_point,w
 10957  0AC2  04B4               	iorwf	check_point@result,f
 10958  0AC3                     l105:	
 10959                           
 10960                           ;heibaiqi.c: 136: }
 10961                           ;heibaiqi.c: 137: temp = temp >> 1;
 10962  0AC3  3636               	lsrf	check_point@temp,w
 10963  0AC4  00AB               	movwf	??_check_point
 10964  0AC5  082B               	movf	??_check_point,w
 10965  0AC6  00B6               	movwf	check_point@temp
 10966  0AC7  3001               	movlw	1
 10967  0AC8  00AB               	movwf	??_check_point
 10968  0AC9  082B               	movf	??_check_point,w
 10969  0ACA  07BA               	addwf	check_point@j,f
 10970  0ACB  3008               	movlw	8
 10971  0ACC  023A               	subwf	check_point@j,w
 10972  0ACD  1C03               	skipc
 10973  0ACE  29DC               	goto	l2990
 10974  0ACF                     l3030:	
 10975                           
 10976                           ;heibaiqi.c: 138: }
 10977                           ;heibaiqi.c: 139: return result;
 10978  0ACF  0834               	movf	check_point@result,w
 10979  0AD0  0008               	return
 10980  0AD1                     __end_of_check_point:	
 10981                           
 10982                           	psect	text35
 10983  1E8C                     __ptext35:	
 10984 ;; *************** function ___bmul *****************
 10985 ;; Defined at:
 10986 ;;		line 4 in file "E:\xCB\sources\common\Umul8.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;  multiplier      1    wreg     unsigned char 
 10989 ;;  multiplicand    1    3[BANK0 ] unsigned char 
 10990 ;; Auto vars:     Size  Location     Type
 10991 ;;  multiplier      1    6[BANK0 ] unsigned char 
 10992 ;;  product         1    5[BANK0 ] unsigned char 
 10993 ;; Return value:  Size  Location     Type
 10994 ;;                  1    wreg      unsigned char 
 10995 ;; Registers used:
 10996 ;;		wreg, status,2, status,0
 10997 ;; Tracked objects:
 10998 ;;		On entry : 0/0
 10999 ;;		On exit  : 0/0
 11000 ;;		Unchanged: 0/0
 11001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11002 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11005 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11006 ;;Total ram usage:        4 bytes
 11007 ;; Hardware stack levels used:    1
 11008 ;; Hardware stack levels required when called:    4
 11009 ;; This function calls:
 11010 ;;		Nothing
 11011 ;; This function is called by:
 11012 ;;		_check_point
 11013 ;;		_choose_point
 11014 ;; This function uses a non-reentrant model
 11015 ;;
 11016                           
 11017                           
 11018                           ;psect for function ___bmul
 11019  1E8C                     ___bmul:	
 11020                           
 11021                           ;incstack = 0
 11022                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11023                           ;___bmul@multiplier stored from wreg
 11024  1E8C  0020               	movlb	0	; select bank0
 11025  1E8D  00A6               	movwf	___bmul@multiplier
 11026  1E8E  01A5               	clrf	___bmul@product
 11027  1E8F                     l2966:	
 11028  1E8F  1C26               	btfss	___bmul@multiplier,0
 11029  1E90  2E95               	goto	l2970
 11030  1E91  0823               	movf	___bmul@multiplicand,w
 11031  1E92  00A4               	movwf	??___bmul
 11032  1E93  0824               	movf	??___bmul,w
 11033  1E94  07A5               	addwf	___bmul@product,f
 11034  1E95                     l2970:	
 11035  1E95  1003               	clrc
 11036  1E96  0DA3               	rlf	___bmul@multiplicand,f
 11037  1E97  1003               	clrc
 11038  1E98  0CA6               	rrf	___bmul@multiplier,f
 11039  1E99  0826               	movf	___bmul@multiplier,w
 11040  1E9A  1D03               	btfss	3,2
 11041  1E9B  2E8F               	goto	l2966
 11042  1E9C  0825               	movf	___bmul@product,w
 11043  1E9D  0008               	return
 11044  1E9E                     __end_of___bmul:	
 11045                           
 11046                           	psect	text36
 11047  12ED                     __ptext36:	
 11048 ;; *************** function _Display_Chars *****************
 11049 ;; Defined at:
 11050 ;;		line 149 in file "func.c"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;  x               1    wreg     unsigned char 
 11053 ;;  string          2   18[BANK0 ] PTR unsigned char 
 11054 ;;		 -> STR_27(19), STR_26(8), STR_25(8), STR_24(8), 
 11055 ;;		 -> STR_23(8), STR_22(5), STR_21(4), STR_20(8), 
 11056 ;;		 -> STR_19(8), STR_18(8), STR_17(8), STR_16(8), 
 11057 ;;		 -> STR_15(8), STR_14(8), STR_13(8), STR_12(8), 
 11058 ;;		 -> display_step(10), STR_11(7), STR_10(9), STR_9(13), 
 11059 ;;		 -> STR_8(11), STR_7(11), STR_6(19), STR_5(8), 
 11060 ;;		 -> STR_4(19), STR_3(10), STR_2(19), STR_1(10), 
 11061 ;;		 -> display_white(10), display_black(10), 
 11062 ;;  y               1   20[BANK0 ] unsigned char 
 11063 ;; Auto vars:     Size  Location     Type
 11064 ;;  x               1   29[BANK0 ] unsigned char 
 11065 ;;  addresses       4   23[BANK0 ] unsigned char [4]
 11066 ;;  i               2   27[BANK0 ] int 
 11067 ;; Return value:  Size  Location     Type
 11068 ;;                  1    wreg      void 
 11069 ;; Registers used:
 11070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 0/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11076 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11077 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;Total ram usage:       12 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; Hardware stack levels required when called:    7
 11083 ;; This function calls:
 11084 ;;		_Write_Com
 11085 ;;		_Write_Data
 11086 ;; This function is called by:
 11087 ;;		_draw_heibaiqi_right
 11088 ;;		_choose_point
 11089 ;;		_heibaiqi
 11090 ;;		_start_video
 11091 ;;		_set_menu
 11092 ;;		_draw_wayout_right
 11093 ;;		_wayout_display1
 11094 ;;		_wayout_display2
 11095 ;;		_wayout
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           
 11100                           ;psect for function _Display_Chars
 11101  12ED                     _Display_Chars:	
 11102                           
 11103                           ;incstack = 0
 11104                           ; Regs used in _Display_Chars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11105                           ;Display_Chars@x stored from wreg
 11106  12ED  0020               	movlb	0	; select bank0
 11107  12EE  00BD               	movwf	Display_Chars@x
 11108                           
 11109                           ;func.c: 150: unsigned char addresses[] = {0x80,0x90,0x88,0x98};
 11110  12EF  0021               	movlb	1	; select bank1
 11111  12F0  0868               	movf	(Display_Chars@F6414+3)^(0+128),w
 11112  12F1  0020               	movlb	0	; select bank0
 11113  12F2  00BA               	movwf	Display_Chars@addresses+3
 11114  12F3  0021               	movlb	1	; select bank1
 11115  12F4  0867               	movf	(Display_Chars@F6414+2)^(0+128),w
 11116  12F5  0020               	movlb	0	; select bank0
 11117  12F6  00B9               	movwf	Display_Chars@addresses+2
 11118  12F7  0021               	movlb	1	; select bank1
 11119  12F8  0866               	movf	(Display_Chars@F6414+1)^(0+128),w
 11120  12F9  0020               	movlb	0	; select bank0
 11121  12FA  00B8               	movwf	Display_Chars@addresses+1
 11122  12FB  0021               	movlb	1	; select bank1
 11123  12FC  0865               	movf	Display_Chars@F6414^(0+128),w
 11124  12FD  0020               	movlb	0	; select bank0
 11125  12FE  00B7               	movwf	Display_Chars@addresses
 11126                           
 11127                           ;func.c: 151: int i = 0;
 11128  12FF  01BB               	clrf	Display_Chars@i
 11129  1300  01BC               	clrf	Display_Chars@i+1
 11130                           
 11131                           ;func.c: 152: Write_Com(0x30);
 11132  1301  3030               	movlw	48
 11133  1302  00B0               	movwf	Write_Com@com
 11134  1303  3000               	movlw	0
 11135  1304  00B1               	movwf	Write_Com@com+1
 11136  1305  319E  265E  3192   	fcall	_Write_Com
 11137                           
 11138                           ;func.c: 153: Write_Com(0x06);
 11139  1308  3006               	movlw	6
 11140  1309  0020               	movlb	0	; select bank0
 11141  130A  00B0               	movwf	Write_Com@com
 11142  130B  3000               	movlw	0
 11143  130C  00B1               	movwf	Write_Com@com+1
 11144  130D  319E  265E  3192   	fcall	_Write_Com
 11145                           
 11146                           ;func.c: 156: Write_Com(addresses[x-1]+(y-1));
 11147  1310  0020               	movlb	0	; select bank0
 11148  1311  083D               	movf	Display_Chars@x,w
 11149  1312  3EFF               	addlw	255
 11150  1313  3E37               	addlw	(low (Display_Chars@addresses| 0))& (0+255)
 11151  1314  0086               	movwf	6
 11152  1315  0187               	clrf	7
 11153  1316  0834               	movf	Display_Chars@y,w
 11154  1317  0701               	addwf	1,w
 11155  1318  00B5               	movwf	??_Display_Chars
 11156  1319  01B6               	clrf	??_Display_Chars+1
 11157  131A  0DB6               	rlf	??_Display_Chars+1,f
 11158  131B  0835               	movf	??_Display_Chars,w
 11159  131C  3EFF               	addlw	255
 11160  131D  00B0               	movwf	Write_Com@com
 11161  131E  30FF               	movlw	255
 11162  131F  3D36               	addwfc	??_Display_Chars+1,w
 11163  1320  00B1               	movwf	Write_Com@com+1
 11164  1321  319E  265E  3192   	fcall	_Write_Com
 11165  1324                     l2882:	
 11166                           ;func.c: 159: while(string[i] != '\0'){
 11167                           
 11168  1324  0020               	movlb	0	; select bank0
 11169  1325  0832               	movf	Display_Chars@string,w
 11170  1326  073B               	addwf	Display_Chars@i,w
 11171  1327  0084               	movwf	4
 11172  1328  0833               	movf	Display_Chars@string+1,w
 11173  1329  3D3C               	addwfc	Display_Chars@i+1,w
 11174  132A  0085               	movwf	5
 11175  132B  0012               	moviw fsr0++
 11176  132C  1903               	btfsc	3,2
 11177  132D  0008               	return
 11178                           
 11179                           ;func.c: 160: Write_Data(*string);
 11180  132E  0020               	movlb	0	; select bank0
 11181  132F  0832               	movf	Display_Chars@string,w
 11182  1330  0084               	movwf	4
 11183  1331  0833               	movf	Display_Chars@string+1,w
 11184  1332  0085               	movwf	5
 11185  1333  0800               	movf	0,w	;code access
 11186  1334  00B5               	movwf	??_Display_Chars
 11187  1335  01B6               	clrf	??_Display_Chars+1
 11188  1336  0835               	movf	??_Display_Chars,w
 11189  1337  00B0               	movwf	Write_Data@dat
 11190  1338  0836               	movf	??_Display_Chars+1,w
 11191  1339  00B1               	movwf	Write_Data@dat+1
 11192  133A  319E  266D  3192   	fcall	_Write_Data
 11193                           
 11194                           ;func.c: 161: string++;
 11195  133D  3001               	movlw	1
 11196  133E  0020               	movlb	0	; select bank0
 11197  133F  07B2               	addwf	Display_Chars@string,f
 11198  1340  3000               	movlw	0
 11199  1341  3DB3               	addwfc	Display_Chars@string+1,f
 11200  1342  2B24               	goto	l2882
 11201  1343                     __end_of_Display_Chars:	
 11202                           
 11203                           	psect	text37
 11204  1E6D                     __ptext37:	
 11205 ;; *************** function _Write_Data *****************
 11206 ;; Defined at:
 11207 ;;		line 47 in file "func.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;  dat             2   16[BANK0 ] int 
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;		None
 11212 ;; Return value:  Size  Location     Type
 11213 ;;                  1    wreg      void 
 11214 ;; Registers used:
 11215 ;;		wreg, status,2, status,0, pclath, cstack
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11221 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;Total ram usage:        2 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    6
 11228 ;; This function calls:
 11229 ;;		_delay_100us
 11230 ;; This function is called by:
 11231 ;;		_draw_heibaiqi_right
 11232 ;;		_Clear_Screen
 11233 ;;		_Display_Chars
 11234 ;;		_set_point
 11235 ;;		_draw_wayout_right
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           
 11240                           ;psect for function _Write_Data
 11241  1E6D                     _Write_Data:	
 11242                           
 11243                           ;func.c: 49: RB1 = 0;
 11244                           
 11245                           ;incstack = 0
 11246                           ; Regs used in _Write_Data: [wreg+status,2+status,0+pclath+cstack]
 11247  1E6D  0020               	movlb	0	; select bank0
 11248  1E6E  108D               	bcf	13,1	;volatile
 11249                           
 11250                           ;func.c: 50: RB2 = 0;
 11251  1E6F  110D               	bcf	13,2	;volatile
 11252                           
 11253                           ;func.c: 51: RB3 = 1;
 11254  1E70  158D               	bsf	13,3	;volatile
 11255                           
 11256                           ;func.c: 53: RB1 = 1;
 11257  1E71  148D               	bsf	13,1	;volatile
 11258                           
 11259                           ;func.c: 54: PORTA = dat;
 11260  1E72  0830               	movf	Write_Data@dat,w
 11261  1E73  008C               	movwf	12	;volatile
 11262                           
 11263                           ;func.c: 55: RB1 = 0;
 11264  1E74  108D               	bcf	13,1	;volatile
 11265                           
 11266                           ;func.c: 56: delay_100us(1);
 11267  1E75  3001               	movlw	1
 11268  1E76  00A9               	movwf	delay_100us@cnt
 11269  1E77  3000               	movlw	0
 11270  1E78  00AA               	movwf	delay_100us@cnt+1
 11271  1E79  319F  27B4         	fcall	_delay_100us
 11272  1E7B  0008               	return
 11273  1E7C                     __end_of_Write_Data:	
 11274                           
 11275                           	psect	text38
 11276  13F8                     __ptext38:	
 11277 ;; *************** function _init_cfg *****************
 11278 ;; Defined at:
 11279 ;;		line 87 in file "func.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;		None
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;		None
 11284 ;; Return value:  Size  Location     Type
 11285 ;;                  1    wreg      void 
 11286 ;; Registers used:
 11287 ;;		wreg, status,2, status,0, pclath, cstack
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;Total ram usage:        0 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; Hardware stack levels required when called:    7
 11300 ;; This function calls:
 11301 ;;		_Write_Com
 11302 ;;		_delay_100us
 11303 ;; This function is called by:
 11304 ;;		_main
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           
 11309                           ;psect for function _init_cfg
 11310  13F8                     _init_cfg:	
 11311                           
 11312                           ;func.c: 90: TRISA = 0b00000000;
 11313                           
 11314                           ;incstack = 0
 11315                           ; Regs used in _init_cfg: [wreg+status,2+status,0+pclath+cstack]
 11316  13F8  0021               	movlb	1	; select bank1
 11317  13F9  018C               	clrf	12	;volatile
 11318                           
 11319                           ;func.c: 91: LATA=0;
 11320  13FA  0022               	movlb	2	; select bank2
 11321  13FB  018C               	clrf	12	;volatile
 11322                           
 11323                           ;func.c: 92: ANSELA=0;
 11324  13FC  0023               	movlb	3	; select bank3
 11325  13FD  018C               	clrf	12	;volatile
 11326                           
 11327                           ;func.c: 93: TRISB = 0b00000000;
 11328  13FE  0021               	movlb	1	; select bank1
 11329  13FF  018D               	clrf	13	;volatile
 11330                           
 11331                           ;func.c: 94: ANSELB=0;
 11332  1400  0023               	movlb	3	; select bank3
 11333  1401  018D               	clrf	13	;volatile
 11334                           
 11335                           ;func.c: 95: TRISC = 0b00000000;
 11336  1402  0021               	movlb	1	; select bank1
 11337  1403  018E               	clrf	14	;volatile
 11338                           
 11339                           ;func.c: 96: LATC=0;
 11340  1404  0022               	movlb	2	; select bank2
 11341  1405  018E               	clrf	14	;volatile
 11342                           
 11343                           ;func.c: 97: OSCCON = 0b01111010;
 11344  1406  307A               	movlw	122
 11345  1407  0021               	movlb	1	; select bank1
 11346  1408  0099               	movwf	25	;volatile
 11347                           
 11348                           ;func.c: 100: INTCONbits.GIE = 1;
 11349  1409  178B               	bsf	11,7	;volatile
 11350                           
 11351                           ;func.c: 101: INTCONbits.PEIE = 1;
 11352  140A  170B               	bsf	11,6	;volatile
 11353                           
 11354                           ;func.c: 108: PIE1 = 2;
 11355  140B  3002               	movlw	2
 11356  140C  0091               	movwf	17	;volatile
 11357                           
 11358                           ;func.c: 109: PIR1 = 0;
 11359  140D  0020               	movlb	0	; select bank0
 11360  140E  0191               	clrf	17	;volatile
 11361                           
 11362                           ;func.c: 110: PR2 = 0b01111111;
 11363  140F  307F               	movlw	127
 11364  1410  009B               	movwf	27	;volatile
 11365                           
 11366                           ;func.c: 111: T2CONbits.T2OUTPS = 0b1111;
 11367  1411  3078               	movlw	120
 11368  1412  049C               	iorwf	28,f	;volatile
 11369                           
 11370                           ;func.c: 112: T2CONbits.TMR2ON = 1;
 11371  1413  151C               	bsf	28,2	;volatile
 11372                           
 11373                           ;func.c: 113: T2CONbits.T2CKPS = 0b11;
 11374  1414  3003               	movlw	3
 11375  1415  049C               	iorwf	28,f	;volatile
 11376                           
 11377                           ;func.c: 116: RB0 = 0;
 11378  1416  100D               	bcf	13,0	;volatile
 11379                           
 11380                           ;func.c: 117: delay_100us(20);
 11381  1417  3014               	movlw	20
 11382  1418  00A9               	movwf	delay_100us@cnt
 11383  1419  3000               	movlw	0
 11384  141A  00AA               	movwf	delay_100us@cnt+1
 11385  141B  319F  27B4  3193   	fcall	_delay_100us
 11386                           
 11387                           ;func.c: 118: RB0 = 1;
 11388  141E  0020               	movlb	0	; select bank0
 11389  141F  140D               	bsf	13,0	;volatile
 11390                           
 11391                           ;func.c: 119: delay_100us(20);
 11392  1420  3014               	movlw	20
 11393  1421  00A9               	movwf	delay_100us@cnt
 11394  1422  3000               	movlw	0
 11395  1423  00AA               	movwf	delay_100us@cnt+1
 11396  1424  319F  27B4  3193   	fcall	_delay_100us
 11397                           
 11398                           ;func.c: 121: Write_Com(0x30);
 11399  1427  3030               	movlw	48
 11400  1428  0020               	movlb	0	; select bank0
 11401  1429  00B0               	movwf	Write_Com@com
 11402  142A  3000               	movlw	0
 11403  142B  00B1               	movwf	Write_Com@com+1
 11404  142C  319E  265E  3193   	fcall	_Write_Com
 11405                           
 11406                           ;func.c: 122: delay_100us(100);
 11407  142F  3064               	movlw	100
 11408  1430  0020               	movlb	0	; select bank0
 11409  1431  00A9               	movwf	delay_100us@cnt
 11410  1432  3000               	movlw	0
 11411  1433  00AA               	movwf	delay_100us@cnt+1
 11412  1434  319F  27B4  3193   	fcall	_delay_100us
 11413                           
 11414                           ;func.c: 123: Write_Com(0x30);
 11415  1437  3030               	movlw	48
 11416  1438  0020               	movlb	0	; select bank0
 11417  1439  00B0               	movwf	Write_Com@com
 11418  143A  3000               	movlw	0
 11419  143B  00B1               	movwf	Write_Com@com+1
 11420  143C  319E  265E  3193   	fcall	_Write_Com
 11421                           
 11422                           ;func.c: 124: delay_100us(100);
 11423  143F  3064               	movlw	100
 11424  1440  0020               	movlb	0	; select bank0
 11425  1441  00A9               	movwf	delay_100us@cnt
 11426  1442  3000               	movlw	0
 11427  1443  00AA               	movwf	delay_100us@cnt+1
 11428  1444  319F  27B4  3193   	fcall	_delay_100us
 11429                           
 11430                           ;func.c: 125: Write_Com(0x0c);
 11431  1447  300C               	movlw	12
 11432  1448  0020               	movlb	0	; select bank0
 11433  1449  00B0               	movwf	Write_Com@com
 11434  144A  3000               	movlw	0
 11435  144B  00B1               	movwf	Write_Com@com+1
 11436  144C  319E  265E  3193   	fcall	_Write_Com
 11437                           
 11438                           ;func.c: 126: delay_100us(100);
 11439  144F  3064               	movlw	100
 11440  1450  0020               	movlb	0	; select bank0
 11441  1451  00A9               	movwf	delay_100us@cnt
 11442  1452  3000               	movlw	0
 11443  1453  00AA               	movwf	delay_100us@cnt+1
 11444  1454  319F  27B4  3193   	fcall	_delay_100us
 11445                           
 11446                           ;func.c: 127: Write_Com(0x01);
 11447  1457  3001               	movlw	1
 11448  1458  0020               	movlb	0	; select bank0
 11449  1459  00B0               	movwf	Write_Com@com
 11450  145A  3000               	movlw	0
 11451  145B  00B1               	movwf	Write_Com@com+1
 11452  145C  319E  265E  3193   	fcall	_Write_Com
 11453                           
 11454                           ;func.c: 128: delay_100us(100);
 11455  145F  3064               	movlw	100
 11456  1460  0020               	movlb	0	; select bank0
 11457  1461  00A9               	movwf	delay_100us@cnt
 11458  1462  3000               	movlw	0
 11459  1463  00AA               	movwf	delay_100us@cnt+1
 11460  1464  319F  27B4         	fcall	_delay_100us
 11461  1466  0008               	return
 11462  1467                     __end_of_init_cfg:	
 11463                           
 11464                           	psect	text39
 11465  1E5E                     __ptext39:	
 11466 ;; *************** function _Write_Com *****************
 11467 ;; Defined at:
 11468 ;;		line 59 in file "func.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;  com             2   16[BANK0 ] int 
 11471 ;; Auto vars:     Size  Location     Type
 11472 ;;		None
 11473 ;; Return value:  Size  Location     Type
 11474 ;;                  1    wreg      void 
 11475 ;; Registers used:
 11476 ;;		wreg, status,2, status,0, pclath, cstack
 11477 ;; Tracked objects:
 11478 ;;		On entry : 0/0
 11479 ;;		On exit  : 0/0
 11480 ;;		Unchanged: 0/0
 11481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11482 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;Total ram usage:        2 bytes
 11487 ;; Hardware stack levels used:    1
 11488 ;; Hardware stack levels required when called:    6
 11489 ;; This function calls:
 11490 ;;		_delay_100us
 11491 ;; This function is called by:
 11492 ;;		_draw_heibaiqi_right
 11493 ;;		_init_cfg
 11494 ;;		_Clear_Screen
 11495 ;;		_Display_Chars
 11496 ;;		_set_point
 11497 ;;		_draw_wayout_right
 11498 ;; This function uses a non-reentrant model
 11499 ;;
 11500                           
 11501                           
 11502                           ;psect for function _Write_Com
 11503  1E5E                     _Write_Com:	
 11504                           
 11505                           ;func.c: 61: RB1 = 0;
 11506                           
 11507                           ;incstack = 0
 11508                           ; Regs used in _Write_Com: [wreg+status,2+status,0+pclath+cstack]
 11509  1E5E  0020               	movlb	0	; select bank0
 11510  1E5F  108D               	bcf	13,1	;volatile
 11511                           
 11512                           ;func.c: 62: RB2 = 0;
 11513  1E60  110D               	bcf	13,2	;volatile
 11514                           
 11515                           ;func.c: 63: RB3 = 0;
 11516  1E61  118D               	bcf	13,3	;volatile
 11517                           
 11518                           ;func.c: 65: RB1 = 1;
 11519  1E62  148D               	bsf	13,1	;volatile
 11520                           
 11521                           ;func.c: 66: PORTA = com;
 11522  1E63  0830               	movf	Write_Com@com,w
 11523  1E64  008C               	movwf	12	;volatile
 11524                           
 11525                           ;func.c: 67: RB1 = 0;
 11526  1E65  108D               	bcf	13,1	;volatile
 11527                           
 11528                           ;func.c: 68: delay_100us(1);
 11529  1E66  3001               	movlw	1
 11530  1E67  00A9               	movwf	delay_100us@cnt
 11531  1E68  3000               	movlw	0
 11532  1E69  00AA               	movwf	delay_100us@cnt+1
 11533  1E6A  319F  27B4         	fcall	_delay_100us
 11534  1E6C  0008               	return
 11535  1E6D                     __end_of_Write_Com:	
 11536                           
 11537                           	psect	text40
 11538  1FB4                     __ptext40:	
 11539 ;; *************** function _delay_100us *****************
 11540 ;; Defined at:
 11541 ;;		line 11 in file "func.c"
 11542 ;; Parameters:    Size  Location     Type
 11543 ;;  cnt             2    9[BANK0 ] int 
 11544 ;; Auto vars:     Size  Location     Type
 11545 ;;  h               2   14[BANK0 ] int 
 11546 ;;  i               2   12[BANK0 ] int 
 11547 ;; Return value:  Size  Location     Type
 11548 ;;                  1    wreg      void 
 11549 ;; Registers used:
 11550 ;;		wreg, status,2, status,0, pclath, cstack
 11551 ;; Tracked objects:
 11552 ;;		On entry : 0/0
 11553 ;;		On exit  : 0/0
 11554 ;;		Unchanged: 0/0
 11555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11556 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;Total ram usage:        7 bytes
 11561 ;; Hardware stack levels used:    1
 11562 ;; Hardware stack levels required when called:    5
 11563 ;; This function calls:
 11564 ;;		___wmul
 11565 ;; This function is called by:
 11566 ;;		_draw_heibaiqi_right
 11567 ;;		_Write_Data
 11568 ;;		_Write_Com
 11569 ;;		_init_cfg
 11570 ;;		_Clear_Screen
 11571 ;;		_music_delay
 11572 ;;		_little_star
 11573 ;;		_music
 11574 ;;		_draw_wayout_right
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           
 11579                           ;psect for function _delay_100us
 11580  1FB4                     _delay_100us:	
 11581                           
 11582                           ;func.c: 12: int i,h;
 11583                           ;func.c: 13: for(h=0;h<6*cnt;h++) {
 11584                           
 11585                           ;incstack = 0
 11586                           ; Regs used in _delay_100us: [wreg+status,2+status,0+pclath+cstack]
 11587  1FB4  0020               	movlb	0	; select bank0
 11588  1FB5  01AE               	clrf	delay_100us@h
 11589  1FB6  01AF               	clrf	delay_100us@h+1
 11590  1FB7                     l2692:	
 11591  1FB7  082A               	movf	delay_100us@cnt+1,w
 11592  1FB8  00A4               	movwf	___wmul@multiplier+1
 11593  1FB9  0829               	movf	delay_100us@cnt,w
 11594  1FBA  00A3               	movwf	___wmul@multiplier
 11595  1FBB  3006               	movlw	6
 11596  1FBC  00A5               	movwf	___wmul@multiplicand
 11597  1FBD  3000               	movlw	0
 11598  1FBE  00A6               	movwf	___wmul@multiplicand+1
 11599  1FBF  319E  26EC  319F   	fcall	___wmul
 11600  1FC2  0020               	movlb	0	; select bank0
 11601  1FC3  082F               	movf	delay_100us@h+1,w
 11602  1FC4  3A80               	xorlw	128
 11603  1FC5  00AB               	movwf	??_delay_100us
 11604  1FC6  0824               	movf	?___wmul+1,w
 11605  1FC7  3A80               	xorlw	128
 11606  1FC8  022B               	subwf	??_delay_100us,w
 11607  1FC9  1D03               	skipz
 11608  1FCA  2FCD               	goto	u2995
 11609  1FCB  0823               	movf	?___wmul,w
 11610  1FCC  022E               	subwf	delay_100us@h,w
 11611  1FCD                     u2995:	
 11612  1FCD  1803               	btfsc	3,0
 11613  1FCE  0008               	return
 11614                           
 11615                           ;func.c: 14: i++;
 11616  1FCF  3001               	movlw	1
 11617  1FD0  0020               	movlb	0	; select bank0
 11618  1FD1  07AC               	addwf	delay_100us@i,f
 11619  1FD2  3000               	movlw	0
 11620  1FD3  3DAD               	addwfc	delay_100us@i+1,f
 11621  1FD4  3001               	movlw	1
 11622  1FD5  07AE               	addwf	delay_100us@h,f
 11623  1FD6  3000               	movlw	0
 11624  1FD7  3DAF               	addwfc	delay_100us@h+1,f
 11625  1FD8  2FB7               	goto	l2692
 11626  1FD9                     __end_of_delay_100us:	
 11627                           
 11628                           	psect	text41
 11629  1EEC                     __ptext41:	
 11630 ;; *************** function ___wmul *****************
 11631 ;; Defined at:
 11632 ;;		line 15 in file "E:\xCB\sources\common\Umul16.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  multiplier      2    3[BANK0 ] unsigned int 
 11635 ;;  multiplicand    2    5[BANK0 ] unsigned int 
 11636 ;; Auto vars:     Size  Location     Type
 11637 ;;  product         2    7[BANK0 ] unsigned int 
 11638 ;; Return value:  Size  Location     Type
 11639 ;;                  2    3[BANK0 ] unsigned int 
 11640 ;; Registers used:
 11641 ;;		wreg, status,2, status,0
 11642 ;; Tracked objects:
 11643 ;;		On entry : 0/0
 11644 ;;		On exit  : 0/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11647 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;Total ram usage:        6 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; Hardware stack levels required when called:    4
 11654 ;; This function calls:
 11655 ;;		Nothing
 11656 ;; This function is called by:
 11657 ;;		_check_point
 11658 ;;		_choose_point
 11659 ;;		_delay_100us
 11660 ;; This function uses a non-reentrant model
 11661 ;;
 11662                           
 11663                           
 11664                           ;psect for function ___wmul
 11665  1EEC                     ___wmul:	
 11666                           
 11667                           ;incstack = 0
 11668                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11669  1EEC  0020               	movlb	0	; select bank0
 11670  1EED  01A7               	clrf	___wmul@product
 11671  1EEE  01A8               	clrf	___wmul@product+1
 11672  1EEF                     l2676:	
 11673  1EEF  1C23               	btfss	___wmul@multiplier,0
 11674  1EF0  2EF5               	goto	l830
 11675  1EF1  0825               	movf	___wmul@multiplicand,w
 11676  1EF2  07A7               	addwf	___wmul@product,f
 11677  1EF3  0826               	movf	___wmul@multiplicand+1,w
 11678  1EF4  3DA8               	addwfc	___wmul@product+1,f
 11679  1EF5                     l830:	
 11680  1EF5  3001               	movlw	1
 11681  1EF6                     u2965:	
 11682  1EF6  35A5               	lslf	___wmul@multiplicand,f
 11683  1EF7  0DA6               	rlf	___wmul@multiplicand+1,f
 11684  1EF8  0B89               	decfsz	9,f
 11685  1EF9  2EF6               	goto	u2965
 11686  1EFA  3001               	movlw	1
 11687  1EFB                     u2975:	
 11688  1EFB  36A4               	lsrf	___wmul@multiplier+1,f
 11689  1EFC  0CA3               	rrf	___wmul@multiplier,f
 11690  1EFD  0B89               	decfsz	9,f
 11691  1EFE  2EFB               	goto	u2975
 11692  1EFF  0823               	movf	___wmul@multiplier,w
 11693  1F00  0424               	iorwf	___wmul@multiplier+1,w
 11694  1F01  1D03               	btfss	3,2
 11695  1F02  2EEF               	goto	l2676
 11696  1F03  0828               	movf	___wmul@product+1,w
 11697  1F04  00A4               	movwf	?___wmul+1
 11698  1F05  0827               	movf	___wmul@product,w
 11699  1F06  00A3               	movwf	?___wmul
 11700  1F07  0008               	return
 11701  1F08                     __end_of___wmul:	
 11702                           
 11703                           	psect	intentry
 11704  0004                     __pintentry:	
 11705 ;; *************** function _ISR *****************
 11706 ;; Defined at:
 11707 ;;		line 9 in file "main.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;		None
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;		None
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      void 
 11714 ;; Registers used:
 11715 ;;		wreg, status,2, status,0, pclath, cstack
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;Total ram usage:        2 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    3
 11728 ;; This function calls:
 11729 ;;		_get_key
 11730 ;;		i1_delay_100us
 11731 ;; This function is called by:
 11732 ;;		Interrupt level 1
 11733 ;; This function uses a non-reentrant model
 11734 ;;
 11735                           
 11736  0004                     _ISR:	
 11737                           
 11738                           ;incstack = 0
 11739  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11740                           
 11741                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
 11742  0005  3180               	pagesel	$
 11743  0006  0020               	movlb	0	; select bank0
 11744  0007  087F               	movf	127,w
 11745  0008  00A2               	movwf	??_ISR+1
 11746                           
 11747                           ;main.c: 11: if(1==TMR2IF)
 11748  0009  1C91               	btfss	17,1	;volatile
 11749  000A  281E               	goto	i1l551
 11750                           
 11751                           ;main.c: 12: {
 11752                           ;main.c: 15: key=get_key();
 11753  000B  319F  278F  3180   	fcall	_get_key
 11754  000E  0020               	movlb	0	; select bank0
 11755  000F  00A1               	movwf	??_ISR
 11756  0010  0821               	movf	??_ISR,w
 11757  0011  00E8               	movwf	_key
 11758                           
 11759                           ;main.c: 16: if(key != 0) {
 11760  0012  0868               	movf	_key,w
 11761  0013  1903               	btfsc	3,2
 11762  0014  281B               	goto	i1l4036
 11763                           
 11764                           ;main.c: 17: delay_100us(1000);
 11765  0015  30E8               	movlw	232
 11766  0016  00F6               	movwf	i1delay_100us@cnt
 11767  0017  3003               	movlw	3
 11768  0018  00F7               	movwf	i1delay_100us@cnt+1
 11769  0019  319F  2725         	fcall	i1_delay_100us
 11770  001B                     i1l4036:	
 11771                           
 11772                           ;main.c: 18: }
 11773                           ;main.c: 20: TMR2=0;
 11774  001B  0020               	movlb	0	; select bank0
 11775  001C  019A               	clrf	26	;volatile
 11776                           
 11777                           ;main.c: 21: TMR2IF=0;
 11778  001D  1091               	bcf	17,1	;volatile
 11779  001E                     i1l551:	
 11780  001E  0822               	movf	??_ISR+1,w
 11781  001F  00FF               	movwf	127
 11782  0020  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11783  0021  0009               	retfie
 11784  0022                     __end_of_ISR:	
 11785                           
 11786                           	psect	text43
 11787  1F8F                     __ptext43:	
 11788 ;; *************** function _get_key *****************
 11789 ;; Defined at:
 11790 ;;		line 375 in file "func.c"
 11791 ;; Parameters:    Size  Location     Type
 11792 ;;		None
 11793 ;; Auto vars:     Size  Location     Type
 11794 ;;  last_key        1    0[BANK0 ] unsigned char 
 11795 ;; Return value:  Size  Location     Type
 11796 ;;                  1    wreg      unsigned char 
 11797 ;; Registers used:
 11798 ;;		wreg, status,2, status,0, pclath, cstack
 11799 ;; Tracked objects:
 11800 ;;		On entry : 0/0
 11801 ;;		On exit  : 0/0
 11802 ;;		Unchanged: 0/0
 11803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;Total ram usage:        2 bytes
 11809 ;; Hardware stack levels used:    1
 11810 ;; Hardware stack levels required when called:    2
 11811 ;; This function calls:
 11812 ;;		_read_key
 11813 ;;		i1_delay_100us
 11814 ;; This function is called by:
 11815 ;;		_ISR
 11816 ;; This function uses a non-reentrant model
 11817 ;;
 11818                           
 11819                           
 11820                           ;psect for function _get_key
 11821  1F8F                     _get_key:	
 11822                           
 11823                           ;func.c: 377: unsigned char last_key = temp_key;
 11824                           
 11825                           ;incstack = 0
 11826                           ; Regs used in _get_key: [wreg+status,2+status,0+pclath+cstack]
 11827  1F8F  0020               	movlb	0	; select bank0
 11828  1F90  086A               	movf	_temp_key,w
 11829  1F91  00FD               	movwf	??_get_key
 11830  1F92  087D               	movf	??_get_key,w
 11831  1F93  00A0               	movwf	get_key@last_key
 11832                           
 11833                           ;func.c: 378: temp_key = read_key();
 11834  1F94  319F  27D9  319F   	fcall	_read_key
 11835  1F97  00FD               	movwf	??_get_key
 11836  1F98  087D               	movf	??_get_key,w
 11837  1F99  0020               	movlb	0	; select bank0
 11838  1F9A  00EA               	movwf	_temp_key
 11839                           
 11840                           ;func.c: 379: if(temp_key == 0)
 11841  1F9B  086A               	movf	_temp_key,w
 11842  1F9C  1903               	btfsc	3,2
 11843                           
 11844                           ;func.c: 380: last_key = 0;
 11845  1F9D  01A0               	clrf	get_key@last_key
 11846                           
 11847                           ;func.c: 381: if(last_key == temp_key && temp_key != 0) {
 11848  1F9E  0820               	movf	get_key@last_key,w
 11849  1F9F  066A               	xorwf	_temp_key,w
 11850  1FA0  1D03               	skipz
 11851  1FA1  2FB2               	goto	i1l3934
 11852  1FA2  086A               	movf	_temp_key,w
 11853  1FA3  1903               	btfsc	3,2
 11854  1FA4  2FB2               	goto	i1l3934
 11855                           
 11856                           ;func.c: 382: delay_100us(200);
 11857  1FA5  30C8               	movlw	200
 11858  1FA6  00F6               	movwf	i1delay_100us@cnt
 11859  1FA7  3000               	movlw	0
 11860  1FA8  00F7               	movwf	i1delay_100us@cnt+1
 11861  1FA9  319F  2725  319F   	fcall	i1_delay_100us
 11862                           
 11863                           ;func.c: 383: if(temp_key != 0) return temp_key;
 11864  1FAC  0020               	movlb	0	; select bank0
 11865  1FAD  086A               	movf	_temp_key,w
 11866  1FAE  1903               	btfsc	3,2
 11867  1FAF  2FB2               	goto	i1l3934
 11868  1FB0  086A               	movf	_temp_key,w
 11869  1FB1  0008               	return
 11870  1FB2                     i1l3934:	
 11871                           
 11872                           ;func.c: 384: }
 11873                           ;func.c: 385: return 0;
 11874  1FB2  3000               	movlw	0
 11875  1FB3  0008               	return
 11876  1FB4                     __end_of_get_key:	
 11877                           
 11878                           	psect	text44
 11879  1F25                     __ptext44:	
 11880 ;; *************** function i1_delay_100us *****************
 11881 ;; Defined at:
 11882 ;;		line 11 in file "func.c"
 11883 ;; Parameters:    Size  Location     Type
 11884 ;;  cnt             2    6[COMMON] int 
 11885 ;; Auto vars:     Size  Location     Type
 11886 ;;  delay_100us     2   11[COMMON] int 
 11887 ;;  delay_100us     2    9[COMMON] int 
 11888 ;; Return value:  Size  Location     Type
 11889 ;;                  1    wreg      void 
 11890 ;; Registers used:
 11891 ;;		wreg, status,2, status,0, pclath, cstack
 11892 ;; Tracked objects:
 11893 ;;		On entry : 0/0
 11894 ;;		On exit  : 0/0
 11895 ;;		Unchanged: 0/0
 11896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11897 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11898 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;Total ram usage:        7 bytes
 11902 ;; Hardware stack levels used:    1
 11903 ;; Hardware stack levels required when called:    1
 11904 ;; This function calls:
 11905 ;;		i1___wmul
 11906 ;; This function is called by:
 11907 ;;		_get_key
 11908 ;;		_ISR
 11909 ;; This function uses a non-reentrant model
 11910 ;;
 11911                           
 11912                           
 11913                           ;psect for function i1_delay_100us
 11914  1F25                     i1_delay_100us:	
 11915                           
 11916                           ;func.c: 12: int i,h;
 11917                           ;func.c: 13: for(h=0;h<6*cnt;h++) {
 11918                           
 11919                           ;incstack = 0
 11920                           ; Regs used in i1_delay_100us: [wreg+status,2+status,0+pclath+cstack]
 11921  1F25  01FB               	clrf	i1delay_100us@h
 11922  1F26  01FC               	clrf	i1delay_100us@h+1
 11923  1F27                     i1l3864:	
 11924  1F27  0877               	movf	i1delay_100us@cnt+1,w
 11925  1F28  00F1               	movwf	i1___wmul@multiplier+1
 11926  1F29  0876               	movf	i1delay_100us@cnt,w
 11927  1F2A  00F0               	movwf	i1___wmul@multiplier
 11928  1F2B  3006               	movlw	6
 11929  1F2C  00F2               	movwf	i1___wmul@multiplicand
 11930  1F2D  3000               	movlw	0
 11931  1F2E  00F3               	movwf	i1___wmul@multiplicand+1
 11932  1F2F  319E  26B6  319F   	fcall	i1___wmul
 11933  1F32  087C               	movf	i1delay_100us@h+1,w
 11934  1F33  3A80               	xorlw	128
 11935  1F34  00F8               	movwf	??i1_delay_100us
 11936  1F35  0871               	movf	?i1___wmul+1,w
 11937  1F36  3A80               	xorlw	128
 11938  1F37  0278               	subwf	??i1_delay_100us,w
 11939  1F38  1D03               	skipz
 11940  1F39  2F3C               	goto	u555_25
 11941  1F3A  0870               	movf	?i1___wmul,w
 11942  1F3B  027B               	subwf	i1delay_100us@h,w
 11943  1F3C                     u555_25:	
 11944  1F3C  1803               	btfsc	3,0
 11945  1F3D  0008               	return
 11946                           
 11947                           ;func.c: 14: i++;
 11948  1F3E  3001               	movlw	1
 11949  1F3F  07F9               	addwf	i1delay_100us@i,f
 11950  1F40  3000               	movlw	0
 11951  1F41  3DFA               	addwfc	i1delay_100us@i+1,f
 11952  1F42  3001               	movlw	1
 11953  1F43  07FB               	addwf	i1delay_100us@h,f
 11954  1F44  3000               	movlw	0
 11955  1F45  3DFC               	addwfc	i1delay_100us@h+1,f
 11956  1F46  2F27               	goto	i1l3864
 11957  1F47                     __end_ofi1_delay_100us:	
 11958                           
 11959                           	psect	text45
 11960  1EB6                     __ptext45:	
 11961 ;; *************** function i1___wmul *****************
 11962 ;; Defined at:
 11963 ;;		line 15 in file "E:\xCB\sources\common\Umul16.c"
 11964 ;; Parameters:    Size  Location     Type
 11965 ;;  multiplier      2    0[COMMON] unsigned int 
 11966 ;;  multiplicand    2    2[COMMON] unsigned int 
 11967 ;; Auto vars:     Size  Location     Type
 11968 ;;  __wmul          2    4[COMMON] unsigned int 
 11969 ;; Return value:  Size  Location     Type
 11970 ;;                  2    0[COMMON] unsigned int 
 11971 ;; Registers used:
 11972 ;;		wreg, status,2, status,0
 11973 ;; Tracked objects:
 11974 ;;		On entry : 0/0
 11975 ;;		On exit  : 0/0
 11976 ;;		Unchanged: 0/0
 11977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11978 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11979 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;Total ram usage:        6 bytes
 11983 ;; Hardware stack levels used:    1
 11984 ;; This function calls:
 11985 ;;		Nothing
 11986 ;; This function is called by:
 11987 ;;		i1_delay_100us
 11988 ;; This function uses a non-reentrant model
 11989 ;;
 11990                           
 11991                           
 11992                           ;psect for function i1___wmul
 11993  1EB6                     i1___wmul:	
 11994                           
 11995                           ;incstack = 0
 11996                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 11997  1EB6  01F4               	clrf	i1___wmul@product
 11998  1EB7  01F5               	clrf	i1___wmul@product+1
 11999  1EB8                     i1l3578:	
 12000  1EB8  1C70               	btfss	i1___wmul@multiplier,0
 12001  1EB9  2EBE               	goto	i1l830
 12002  1EBA  0872               	movf	i1___wmul@multiplicand,w
 12003  1EBB  07F4               	addwf	i1___wmul@product,f
 12004  1EBC  0873               	movf	i1___wmul@multiplicand+1,w
 12005  1EBD  3DF5               	addwfc	i1___wmul@product+1,f
 12006  1EBE                     i1l830:	
 12007  1EBE  3001               	movlw	1
 12008  1EBF                     u471_25:	
 12009  1EBF  35F2               	lslf	i1___wmul@multiplicand,f
 12010  1EC0  0DF3               	rlf	i1___wmul@multiplicand+1,f
 12011  1EC1  0B89               	decfsz	9,f
 12012  1EC2  2EBF               	goto	u471_25
 12013  1EC3  3001               	movlw	1
 12014  1EC4                     u472_25:	
 12015  1EC4  36F1               	lsrf	i1___wmul@multiplier+1,f
 12016  1EC5  0CF0               	rrf	i1___wmul@multiplier,f
 12017  1EC6  0B89               	decfsz	9,f
 12018  1EC7  2EC4               	goto	u472_25
 12019  1EC8  0870               	movf	i1___wmul@multiplier,w
 12020  1EC9  0471               	iorwf	i1___wmul@multiplier+1,w
 12021  1ECA  1D03               	btfss	3,2
 12022  1ECB  2EB8               	goto	i1l3578
 12023  1ECC  0875               	movf	i1___wmul@product+1,w
 12024  1ECD  00F1               	movwf	?i1___wmul+1
 12025  1ECE  0874               	movf	i1___wmul@product,w
 12026  1ECF  00F0               	movwf	?i1___wmul
 12027  1ED0  0008               	return
 12028  1ED1                     __end_ofi1___wmul:	
 12029                           
 12030                           	psect	text46
 12031  1FD9                     __ptext46:	
 12032 ;; *************** function _read_key *****************
 12033 ;; Defined at:
 12034 ;;		line 348 in file "func.c"
 12035 ;; Parameters:    Size  Location     Type
 12036 ;;		None
 12037 ;; Auto vars:     Size  Location     Type
 12038 ;;		None
 12039 ;; Return value:  Size  Location     Type
 12040 ;;                  1    wreg      unsigned char 
 12041 ;; Registers used:
 12042 ;;		wreg
 12043 ;; Tracked objects:
 12044 ;;		On entry : 0/0
 12045 ;;		On exit  : 0/0
 12046 ;;		Unchanged: 0/0
 12047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;Total ram usage:        0 bytes
 12053 ;; Hardware stack levels used:    1
 12054 ;; This function calls:
 12055 ;;		Nothing
 12056 ;; This function is called by:
 12057 ;;		_get_key
 12058 ;; This function uses a non-reentrant model
 12059 ;;
 12060                           
 12061                           
 12062                           ;psect for function _read_key
 12063  1FD9                     _read_key:	
 12064                           
 12065                           ;func.c: 353: TRISBbits.TRISB5 = 1;
 12066                           
 12067                           ;incstack = 0
 12068                           ; Regs used in _read_key: [wreg]
 12069  1FD9  0021               	movlb	1	; select bank1
 12070  1FDA  168D               	bsf	13,5	;volatile
 12071                           
 12072                           ;func.c: 354: WPUBbits.WPUB5 = 1;
 12073  1FDB  0024               	movlb	4	; select bank4
 12074  1FDC  168D               	bsf	13,5	;volatile
 12075                           
 12076                           ;func.c: 355: TRISC = 0b00101111;
 12077  1FDD  302F               	movlw	47
 12078  1FDE  0021               	movlb	1	; select bank1
 12079  1FDF  008E               	movwf	14	;volatile
 12080                           
 12081                           ;func.c: 356: WPUC = 0b00101111;
 12082  1FE0  302F               	movlw	47
 12083  1FE1  0024               	movlb	4	; select bank4
 12084  1FE2  008E               	movwf	14	;volatile
 12085                           
 12086                           ;func.c: 357: OPTION_REGbits.nWPUEN = 0;
 12087  1FE3  0021               	movlb	1	; select bank1
 12088  1FE4  1395               	bcf	21,7	;volatile
 12089                           
 12090                           ;func.c: 358: if(RC3==0)
 12091  1FE5  0020               	movlb	0	; select bank0
 12092  1FE6  198E               	btfsc	14,3	;volatile
 12093  1FE7  2FEA               	goto	i1l443
 12094                           
 12095                           ;func.c: 359: return 1;
 12096  1FE8  3001               	movlw	1
 12097  1FE9  0008               	return
 12098  1FEA                     i1l443:	
 12099                           
 12100                           ;func.c: 360: else if(RC0==0)
 12101  1FEA  180E               	btfsc	14,0	;volatile
 12102  1FEB  2FEE               	goto	i1l446
 12103                           
 12104                           ;func.c: 361: return 2;
 12105  1FEC  3002               	movlw	2
 12106  1FED  0008               	return
 12107  1FEE                     i1l446:	
 12108                           
 12109                           ;func.c: 362: else if(RC2==0)
 12110  1FEE  190E               	btfsc	14,2	;volatile
 12111  1FEF  2FF2               	goto	i1l448
 12112                           
 12113                           ;func.c: 363: return 3;
 12114  1FF0  3003               	movlw	3
 12115  1FF1  0008               	return
 12116  1FF2                     i1l448:	
 12117                           
 12118                           ;func.c: 364: else if(RC1==0)
 12119  1FF2  188E               	btfsc	14,1	;volatile
 12120  1FF3  2FF6               	goto	i1l450
 12121                           
 12122                           ;func.c: 365: return 4;
 12123  1FF4  3004               	movlw	4
 12124  1FF5  0008               	return
 12125  1FF6                     i1l450:	
 12126                           
 12127                           ;func.c: 366: else if(RB5==0)
 12128  1FF6  1A8D               	btfsc	13,5	;volatile
 12129  1FF7  2FFA               	goto	i1l452
 12130                           
 12131                           ;func.c: 367: return 5;
 12132  1FF8  3005               	movlw	5
 12133  1FF9  0008               	return
 12134  1FFA                     i1l452:	
 12135                           
 12136                           ;func.c: 368: else if(RC5==0)
 12137  1FFA  1A8E               	btfsc	14,5	;volatile
 12138  1FFB  2FFE               	goto	i1l3758
 12139                           
 12140                           ;func.c: 369: return 6;
 12141  1FFC  3006               	movlw	6
 12142  1FFD  0008               	return
 12143  1FFE                     i1l3758:	
 12144                           
 12145                           ;func.c: 370: else
 12146                           ;func.c: 371: return 0;
 12147  1FFE  3000               	movlw	0
 12148  1FFF  0008               	return
 12149  2000                     __end_of_read_key:	
 12150  007E                     btemp	set	126	;btemp
 12151  007E                     int$flags	set	126
 12152  007E                     wtemp	set	126
 12153  007E                     wtemp0	set	126
 12154  0080                     wtemp1	set	128
 12155  0082                     wtemp2	set	130
 12156  0084                     wtemp3	set	132
 12157  0086                     wtemp4	set	134
 12158  0088                     wtemp5	set	136
 12159  007F                     wtemp6	set	127
 12160  007E                     ttemp	set	126
 12161  007E                     ttemp0	set	126
 12162  0081                     ttemp1	set	129
 12163  0084                     ttemp2	set	132
 12164  0087                     ttemp3	set	135
 12165  007F                     ttemp4	set	127
 12166  007E                     ltemp	set	126
 12167  007E                     ltemp0	set	126
 12168  0082                     ltemp1	set	130
 12169  0086                     ltemp2	set	134
 12170  0080                     ltemp3	set	128


Data Sizes:
    Strings     207
    Constant    0
    Data        524
    BSS         149
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     68      76
    BANK1            80      4      79
    BANK2            80      0      76
    BANK3            80      0      66
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            64      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(1) Largest target is 64
		 -> table(BANK1[64]), 

    memset@p	PTR unsigned char  size(1) Largest target is 64
		 -> table(BANK1[64]), 

    set_point@value	PTR unsigned char  size(1) Largest target is 48
		 -> choose_second(BANK3[8]), choose_empty(BANK3[8]), empty(BANK3[8]), screen(BANK2[48]), 
		 -> second_chess(BANK2[8]), first_chess(BANK3[8]), choose_first(BANK3[8]), 

    Display_Chars@string	PTR unsigned char  size(2) Largest target is 19
		 -> STR_27(CODE[19]), STR_26(CODE[8]), STR_25(CODE[8]), STR_24(CODE[8]), 
		 -> STR_23(CODE[8]), STR_22(CODE[5]), STR_21(CODE[4]), STR_20(CODE[8]), 
		 -> STR_19(CODE[8]), STR_18(CODE[8]), STR_17(CODE[8]), STR_16(CODE[8]), 
		 -> STR_15(CODE[8]), STR_14(CODE[8]), STR_13(CODE[8]), STR_12(CODE[8]), 
		 -> display_step(BANK3[10]), STR_11(CODE[7]), STR_10(CODE[9]), STR_9(CODE[13]), 
		 -> STR_8(CODE[11]), STR_7(CODE[11]), STR_6(CODE[19]), STR_5(CODE[8]), 
		 -> STR_4(CODE[19]), STR_3(CODE[10]), STR_2(CODE[19]), STR_1(CODE[10]), 
		 -> display_white(BANK2[10]), display_black(BANK2[10]), 

    int2string@a	PTR unsigned char  size(1) Largest target is 10
		 -> display_step(BANK3[10]), display_white(BANK2[10]), display_black(BANK2[10]), 

    sp__memset	PTR void  size(1) Largest target is 64
		 -> table(BANK1[64]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_get_key
    _get_key->i1_delay_100us
    i1_delay_100us->i1___wmul

Critical Paths under _main in BANK0

    _main->_run_game
    _start_video->_Display_Chars
    _little_star->_music_delay
    _music_delay->_delay_100us
    _music->_delay_100us
    _run_game->_wayout
    _wayout->_choose
    _init_wayout->_set_point
    _draw_wayout_right->_Display_Chars
    _choose_level2->_set_menu
    _wayout_display2->_Display_Chars
    _wayout_display1->_Display_Chars
    _choose->_change_near
    _change_near->_set_point
    _init_heibaiqi->_set_point
    _draw_heibaiqi_right->_Display_Chars
    _heibaiqi->_choose_point
    _set_menu->_set_point
    _init_environment->_Clear_Screen
    _Clear_Screen->_Write_Com
    _Clear_Screen->_Write_Data
    _choose_point->_set_point
    _set_point->_get_Y_Addr
    _get_Y_Addr->___awdiv
    _int2string->___awdiv
    _check_point->___wmul
    _Display_Chars->_Write_Com
    _Display_Chars->_Write_Data
    _Write_Data->_delay_100us
    _init_cfg->_Write_Com
    _Write_Com->_delay_100us
    _delay_100us->___wmul

Critical Paths under _ISR in BANK0

    _ISR->_get_key

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  570266
                                              0 BANK1      4     0      4
                           _init_cfg
                   _init_environment
                           _run_game
                           _set_menu
                        _start_video
 ---------------------------------------------------------------------------------
 (1) _start_video                                          0     0      0   31463
                       _Clear_Screen
                      _Display_Chars
                        _little_star
 ---------------------------------------------------------------------------------
 (2) _little_star                                          0     0      0   10874
                        _delay_100us
                              _music
                        _music_delay
 ---------------------------------------------------------------------------------
 (3) _music_delay                                          9     7      2    3952
                                             16 BANK0      9     7      2
                            ___awdiv
                        _delay_100us
                        _delay_music
 ---------------------------------------------------------------------------------
 (3) _music                                                7     5      2    4922
                                             16 BANK0      7     5      2
                            ___awdiv
                        _delay_100us
                        _delay_music
 ---------------------------------------------------------------------------------
 (4) _delay_music                                          7     5      2     366
                                              3 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) _run_game                                             2     2      0  496559
                                             66 BANK0      2     2      0
                      _choose_level2
                           _heibaiqi
                      _init_heibaiqi
                        _init_wayout
                          _set_point
                             _wayout
 ---------------------------------------------------------------------------------
 (2) _wayout                                               7     7      0  203971
                                             59 BANK0      7     7      0
                       _Clear_Screen
                      _Display_Chars
                  _check_if_complete
                             _choose
                      _choose_level2
                        _init_wayout
                         _int2string
                          _set_point
 ---------------------------------------------------------------------------------
 (3) _init_wayout                                         21    21      0   48653
                                             37 BANK0     21    21      0
                       _Clear_Screen
                  _draw_wayout_right
                          _set_point
 ---------------------------------------------------------------------------------
 (4) _draw_wayout_right                                    6     4      2   23468
                                             30 BANK0      6     4      2
                      _Display_Chars
                          _Write_Com
                         _Write_Data
                        _delay_100us
                         _int2string
 ---------------------------------------------------------------------------------
 (3) _choose_level2                                        9     9      0   84521
                                             38 BANK0      9     9      0
                       _Clear_Screen
                            ___awdiv
                            ___awmod
                   _init_environment
                           _set_menu
                          _set_point
                    _wayout_display1
                    _wayout_display2
 ---------------------------------------------------------------------------------
 (4) _wayout_display2                                      1     1      0   10805
                                             30 BANK0      1     1      0
                      _Display_Chars
 ---------------------------------------------------------------------------------
 (4) _wayout_display1                                      1     1      0   10805
                                             30 BANK0      1     1      0
                      _Display_Chars
 ---------------------------------------------------------------------------------
 (3) _choose                                              11     7      4   32056
                                             48 BANK0     11     7      4
                        _change_near
                        _if_in_table
                          _set_point
 ---------------------------------------------------------------------------------
 (4) _change_near                                         11     7      4   16121
                                             37 BANK0     11     7      4
                        _if_in_table
                          _set_point
 ---------------------------------------------------------------------------------
 (4) _if_in_table                                          5     1      4     300
                                              3 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _check_if_complete                                    5     5      0     136
                                              3 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _init_heibaiqi                                        2     2      0   48474
                                             37 BANK0      2     2      0
                       _Clear_Screen
                _draw_heibaiqi_right
                             _memset
                          _set_point
 ---------------------------------------------------------------------------------
 (3) _draw_heibaiqi_right                                  4     4      0   23283
                                             30 BANK0      4     4      0
                      _Display_Chars
                          _Write_Com
                         _Write_Data
                        _delay_100us
                         _int2string
 ---------------------------------------------------------------------------------
 (2) _heibaiqi                                             7     7      0   95895
                                             56 BANK0      7     7      0
                      _Display_Chars
                       _choose_point
                   _init_environment
                       _judge_result
                           _set_menu
                          _set_point
 ---------------------------------------------------------------------------------
 (1) _set_menu                                             1     1      0   25850
                                             37 BANK0      1     1      0
                      _Display_Chars
                          _set_point
 ---------------------------------------------------------------------------------
 (3) _judge_result                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _init_environment                                     0     0      0   10146
                       _Clear_Screen
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               7     3      4     362
                                              3 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _Clear_Screen                                         5     3      2    9784
                                             18 BANK0      5     3      2
                          _Write_Com
                         _Write_Data
                        _delay_100us
 ---------------------------------------------------------------------------------
 (3) _choose_point                                        19    17      2   34049
                                             37 BANK0     19    17      2
                      _Display_Chars
                             ___bmul
                             ___wmul
                        _check_point
                         _int2string
                          _set_point
 ---------------------------------------------------------------------------------
 (2) _set_point                                           14    12      2   15045
                                             25 BANK0     12    10      2
                          _Write_Com
                         _Write_Data
                             ___bmul (ARG)
                          _check_Pos
                         _get_X_Addr
                         _get_Y_Addr
                      _readFromTable
 ---------------------------------------------------------------------------------
 (3) _readFromTable                                       11     8      3     282
                                              3 BANK0     11     8      3
 ---------------------------------------------------------------------------------
 (3) _get_Y_Addr                                          13    12      1    1452
                                             12 BANK0     13    12      1
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _get_X_Addr                                           4     3      1     255
                                              3 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _check_Pos                                            6     3      3      99
                                              3 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _int2string                                           9     7      2    2971
                                             12 BANK0      9     7      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     826
                                              3 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1148
                                              3 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _check_point                                         20    18      2    2475
                                              9 BANK0     20    18      2
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     540
                                              3 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Display_Chars                                       12     9      3   10805
                                             18 BANK0     12     9      3
                          _Write_Com
                         _Write_Data
 ---------------------------------------------------------------------------------
 (3) _Write_Data                                           2     0      2    2923
                                             16 BANK0      2     0      2
                        _delay_100us
                      _readFromTable (ARG)
 ---------------------------------------------------------------------------------
 (1) _init_cfg                                             0     0      0    6248
                          _Write_Com
                        _delay_100us
 ---------------------------------------------------------------------------------
 (3) _Write_Com                                            2     0      2    4248
                                             16 BANK0      2     0      2
                        _delay_100us
 ---------------------------------------------------------------------------------
 (4) _delay_100us                                          7     5      2    2000
                                              9 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     998
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  2     2      0     510
                                              1 BANK0      2     2      0
                            _get_key
                      i1_delay_100us
 ---------------------------------------------------------------------------------
 (10) _get_key                                             2     2      0     267
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                           _read_key
                      i1_delay_100us
 ---------------------------------------------------------------------------------
 (10) i1_delay_100us                                       7     5      2     243
                                              6 COMMON     7     5      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (11) _read_key                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_cfg
     _Write_Com
       _delay_100us
         ___wmul
     _delay_100us
       ___wmul
   _init_environment
     _Clear_Screen
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
       _delay_100us
         ___wmul
     _memset
   _run_game
     _choose_level2
       _Clear_Screen
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
       ___awdiv
       ___awmod
       _init_environment
         _Clear_Screen
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           _delay_100us
             ___wmul
         _memset
       _set_menu
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         _set_point
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           ___bmul (ARG)
           _check_Pos (ARG)
           _get_X_Addr (ARG)
           _get_Y_Addr (ARG)
             ___awdiv
           _readFromTable (ARG)
       _set_point
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         ___bmul (ARG)
         _check_Pos (ARG)
         _get_X_Addr (ARG)
         _get_Y_Addr (ARG)
           ___awdiv
         _readFromTable (ARG)
       _wayout_display1
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
       _wayout_display2
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
     _heibaiqi
       _Display_Chars
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
       _choose_point
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         ___bmul
         ___wmul
         _check_point
           ___bmul
           ___wmul
         _int2string
           ___awdiv
           ___awmod
         _set_point
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           ___bmul (ARG)
           _check_Pos (ARG)
           _get_X_Addr (ARG)
           _get_Y_Addr (ARG)
             ___awdiv
           _readFromTable (ARG)
       _init_environment
         _Clear_Screen
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           _delay_100us
             ___wmul
         _memset
       _judge_result
       _set_menu
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         _set_point
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           ___bmul (ARG)
           _check_Pos (ARG)
           _get_X_Addr (ARG)
           _get_Y_Addr (ARG)
             ___awdiv
           _readFromTable (ARG)
       _set_point
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         ___bmul (ARG)
         _check_Pos (ARG)
         _get_X_Addr (ARG)
         _get_Y_Addr (ARG)
           ___awdiv
         _readFromTable (ARG)
     _init_heibaiqi
       _Clear_Screen
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
       _draw_heibaiqi_right
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
         _int2string
           ___awdiv
           ___awmod
       _memset
       _set_point
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         ___bmul (ARG)
         _check_Pos (ARG)
         _get_X_Addr (ARG)
         _get_Y_Addr (ARG)
           ___awdiv
         _readFromTable (ARG)
     _init_wayout
       _Clear_Screen
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
       _draw_wayout_right
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
         _int2string
           ___awdiv
           ___awmod
       _set_point
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         ___bmul (ARG)
         _check_Pos (ARG)
         _get_X_Addr (ARG)
         _get_Y_Addr (ARG)
           ___awdiv
         _readFromTable (ARG)
     _set_point
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
       ___bmul (ARG)
       _check_Pos (ARG)
       _get_X_Addr (ARG)
       _get_Y_Addr (ARG)
         ___awdiv
       _readFromTable (ARG)
     _wayout
       _Clear_Screen
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
       _Display_Chars
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
       _check_if_complete
       _choose
         _change_near
           _if_in_table
           _set_point
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
             ___bmul (ARG)
             _check_Pos (ARG)
             _get_X_Addr (ARG)
             _get_Y_Addr (ARG)
               ___awdiv
             _readFromTable (ARG)
         _if_in_table
         _set_point
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           ___bmul (ARG)
           _check_Pos (ARG)
           _get_X_Addr (ARG)
           _get_Y_Addr (ARG)
             ___awdiv
           _readFromTable (ARG)
       _choose_level2
         _Clear_Screen
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           _delay_100us
             ___wmul
         ___awdiv
         ___awmod
         _init_environment
           _Clear_Screen
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
             _delay_100us
               ___wmul
           _memset
         _set_menu
           _Display_Chars
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
           _set_point
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
             ___bmul (ARG)
             _check_Pos (ARG)
             _get_X_Addr (ARG)
             _get_Y_Addr (ARG)
               ___awdiv
             _readFromTable (ARG)
         _set_point
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           ___bmul (ARG)
           _check_Pos (ARG)
           _get_X_Addr (ARG)
           _get_Y_Addr (ARG)
             ___awdiv
           _readFromTable (ARG)
         _wayout_display1
           _Display_Chars
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
         _wayout_display2
           _Display_Chars
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
       _init_wayout
         _Clear_Screen
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           _delay_100us
             ___wmul
         _draw_wayout_right
           _Display_Chars
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           _delay_100us
             ___wmul
           _int2string
             ___awdiv
             ___awmod
         _set_point
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           ___bmul (ARG)
           _check_Pos (ARG)
           _get_X_Addr (ARG)
           _get_Y_Addr (ARG)
             ___awdiv
           _readFromTable (ARG)
       _int2string
         ___awdiv
         ___awmod
       _set_point
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         ___bmul (ARG)
         _check_Pos (ARG)
         _get_X_Addr (ARG)
         _get_Y_Addr (ARG)
           ___awdiv
         _readFromTable (ARG)
   _set_menu
     _Display_Chars
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
     _set_point
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
       ___bmul (ARG)
       _check_Pos (ARG)
       _get_X_Addr (ARG)
       _get_Y_Addr (ARG)
         ___awdiv
       _readFromTable (ARG)
   _start_video
     _Clear_Screen
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
       _delay_100us
         ___wmul
     _Display_Chars
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
     _little_star
       _delay_100us
         ___wmul
       _music
         ___awdiv
         _delay_100us
           ___wmul
         _delay_music
       _music_delay
         ___awdiv
         _delay_100us
           ___wmul
         _delay_music

 _ISR (ROOT)
   _get_key
     _read_key
     i1_delay_100us
       i1___wmul
   i1_delay_100us
     i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               40      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     177      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     177      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Jun 16 16:13:35 2019

              ??_choose_point 0047                ___bmul@product 0025               ??_choose_level2 0046  
                 __CFG_CP$OFF 0000                  music_delay@i 0033                  ___awdiv@sign 0029  
         ___wmul@multiplicand 0025              i1___wmul@product 0074                   __CFG_LVP$ON 0000  
                         l105 0AC3                           l113 06A6                           l122 0768  
                         l115 06AF                           l163 0651                           l409 1F0F  
                         l358 1056                           l468 15DC                           l830 1EF5  
                         l746 0383                           _RB0 0068                           _RB1 0069  
                         _RC0 0070                           _RB2 006A                           _RC1 0071  
                         _RB3 006B                           _RC2 0072                           _RC3 0073  
                         _RB5 006D                           _RC4 0074                           _RC5 0075  
                         _PR2 001B                           _ISR 0004                           _key 0068  
                 _start_video 1001                  ___awmod@sign 0029                  __CFG_BORV$LO 0000  
                         wreg 0009                  __CFG_IESO$ON 0000                          ?_ISR 0070  
                        l3010 0A61                          l3012 0A92                          l3004 0A29  
                        l3020 0A9D                          l3100 0DE1                          l3030 0ACF  
                        l3016 0A94                          l3008 0A5E                          l3024 0ABB  
                        l3104 0DEA                          l3018 0A99                          l3202 0B9A  
                        l3130 0E6E                          l3122 0E4A                          l3114 0E26  
                        l3230 067E                          l3222 0669                          l3206 0BA3  
                        l3126 0E5C                          l3118 0E38                          l3160 0AEF  
                        l3144 1635                          l3400 0C07                          l3080 0D8B  
                        l3322 1F69                          l3410 0C29                          l3074 0D68  
                        l3058 0D36                          l3260 075E                          l3252 06C9  
                        l3316 1F63                          l3308 1F5D                          l3420 0C49  
                        l3500 17C4                          l2702 12A6                          l3238 069E  
                        l3182 0B44                          l3094 0DD1                          l3086 0DAF  
                        l3502 17D3                          l3350 1545                          l2720 12C5  
                        l3264 076C                          l3272 0796                          l3176 0B21  
                        l3520 0818                          l3440 0CAB                          l3424 0C79  
                        l3336 14E2                          l2730 12E0                          l3290 1F4D  
                        l3338 1512                          l2708 12B1                          l3268 078A  
                        l2900 13D1                          l3196 0B8A                          l3188 0B68  
                        l3524 0844                          l3460 0CF8                          l3444 0CBD  
                        l3372 124F                          l3348 1515                          l2734 12E8  
                        l2726 12D7                          l2718 12B9                          l2830 117C  
                        l2806 1E59                          l2910 13E9                          l3702 0631  
                        l3710 063C                          l3542 08C8                          l3374 127F  
                        l3704 0636                          l3640 041B                          l3552 105E  
                        l3464 0D09                          l3448 0CDF                          l3800 0249  
                        l4088 1E88                          l2842 1189                          l2834 1183  
                        l2818 137A                          l2906 13E1                          l3298 1F52  
                        l2676 1EEF                          l2692 1FB7                          l2844 1195  
                        l2852 11AA                          l2780 1037                          l2764 1154  
                        l2932 16B7                          l3652 04B1                          l3628 0385  
                        l3564 1078                          l3572 1088                          l3476 0D15  
                        l3492 173E                          l3812 02DF                          l2790 1048  
                        l2758 113C                          l2918 1ED7                          l3558 1063  
                        l3486 1731                          l3830 033A                          l2856 11B2  
                        l2848 11A1                          l2792 104A                          l2784 103E  
                        l3664 0547                          l3568 1080                          l2960 07FE  
                        l3496 17B5                          l2882 1324                          l2970 1E95  
                        l2786 1040                          l2778 1035                          l2946 170C  
                        l3690 0604                          l3842 0354                          l2796 1052  
                        l2892 13B9                          l3676 05DD                          l3844 0356  
                        l3764 0087                          l2966 1E8F                          l2990 09DC  
                        l3694 060C                          l3854 036B                          l3950 158A  
                        l3776 011D                          l3960 15B0                          l3698 0616  
                        l3858 036E                          l2996 09F3                          l3788 01B3  
                        l3982 15DA                          l3974 15C6                          l3984 15DF  
                        l3988 15E6                          STR_1 1840                          STR_2 1800  
                        STR_3 1836                          STR_4 1800                          STR_5 18BB  
                        STR_6 1800                          STR_7 182B                          STR_8 1820  
                        STR_9 1813                          _LATA 010C                          _LATC 010E  
                        u3035 12BC                          u3055 12C6                          u3215 1348  
                        u3065 12D0                          u3305 118C                          u3075 12D8  
                        u3235 1359                          u3325 119B                          u3245 1368  
                        u4125 06ED                          u4045 0657                          u5005 0573  
                        u3335 11A2                          u3255 137D                          u4215 079D  
                        u5015 0582                          _PIE1 0091                          u3265 138C  
                        u4145 0721                          u5025 0599                          u4305 1551  
                        u4155 073D                          u4075 0688                          u5035 05AB  
                        u5045 05C0                          u5205 00B3                          u4325 1265  
                        u3535 0A1A                          u5055 05CF                          u5215 00C2  
                        u4335 128B                          u3465 07EC                          u4505 1799  
                        u5305 016F                          u5225 00D9                          u4515 17A8  
                        u5315 0181                          u5235 00EB                          u3565 0A50  
                        u3485 07FA                          u4605 0847                          u5405 022C  
                        u5325 0196                          u5245 0100                          u3645 1F19  
                        u4285 14F8                          u4615 085D                          u5415 023B  
                        u5335 01A5                          u5255 010F                          u4295 152B  
                        u3585 0A85                          u3905 164B                          u4625 0872  
                        u4545 17E5                          u4465 174D                          u5425 024E  
                        u5345 01B8                          u5265 0122                          u5185 008C  
                        u3915 1660                          u3835 1601                          u4635 0881  
                        u4475 1772                          u5435 0260                          u5355 01CA  
                        u5275 0134                          u5195 009E                          u2965 1EF6  
                        u4805 03FE                          u3925 166F                          u4565 081C  
                        u4485 1783                          u5445 0275                          u5365 01DF  
                        u5285 0149                          u2975 1EFB                          u4815 040D  
                        u3855 1613                          u5455 0284                          u5375 01EE  
                        u5295 0158                          u4905 04B6                          u4825 0420  
                        u4745 038A                          u4665 1066                          u4585 0831  
                        u5465 029B                          u5385 0205                          _PIR1 0011  
                        u2995 1FCD                          u4915 04C8                          u4835 0432  
                        u4755 039C                          u3875 1625                          u5475 02AD  
                        u5395 0217                          u4925 04DD                          u4845 0447  
                        u4765 03B1                          u5485 02C2                          u4935 04EC  
                        u4855 0456                          u4775 03C0                          u3895 1638  
                        u5495 02D1                          u4945 0503                          u4865 046D  
                        u4785 03D7                          u4955 0515                          u4875 047F  
                        u4795 03E9                          u4965 052A                          u4885 0494  
                        u4975 0539                          u4895 04A3                          u4985 054C  
                        u4995 055E                          _TMR2 001A                          _WPUC 020E  
                __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000                          _main 1E7C  
                        fsr0h 0005                          fsr1h 0007                          fsr0l 0004  
                        indf0 0000                          indf1 0001                          fsr1l 0006  
                        btemp 007E                 __CFG_BOREN$ON 0000                          ltemp 007E  
                        start 0022                          ttemp 007E                          wtemp 007E  
           ___bmul@multiplier 0026                 __CFG_MCLRE$ON 0000        __size_ofi1_delay_100us 0022  
                       ??_ISR 0021             check_point@result 0034                 __CFG_PLLEN$ON 0000  
                       ?_main 00EB               __end_of___awdiv 12ED                         STR_10 184A  
                       STR_11 18C3                         STR_20 1873                         STR_12 185B  
                       STR_21 18CB                         STR_13 186B                         STR_22 18CA  
                       STR_14 187B                         STR_15 189B                         STR_23 1883  
                       STR_16 18AB                         STR_24 1893                         STR_25 18A3  
                       STR_17 188B                 __CFG_WDTE$OFF 0000                         STR_26 18B3  
                       STR_18 1853                         STR_27 1800                         STR_19 1863  
             __end_of___awmod 11B7            Display_Chars@F6414 00E5               ___awdiv@divisor 0023  
                       i1l450 1FF6                         i1l443 1FEA                         i1l452 1FFA  
                       i1l446 1FEE                         i1l551 001E                         i1l448 1FF2  
                       i1l830 1EBE                   int2string@a 0034               ___awdiv@counter 0028  
                 int2string@i 0032                         _PORTA 000C                         _PORTC 000E  
                       _TRISA 008C                         _TRISB 008D                         _TRISC 008E  
                ?_init_wayout 0070               __end_of_get_key 1FB4                         _empty 01DA  
        __size_of_change_near 008E          __size_of_check_point 0107                         _level 2270  
                       _table 00A5                         _music 124C          __size_of_delay_100us 0025  
                       _start 00A3              __end_ofi1___wmul 1ED1                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
         i1___wmul@multiplier 0070                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F            check_point@add_col 0039  
          check_point@add_row 0038               __initialization 0024             _check_if_complete 1058  
                __end_of_main 1E8C          __size_of_delay_music 001D            ?_check_if_complete 0070  
              __CFG_LPBOR$OFF 0000                        ??_main 0064        __size_of_readFromTable 0058  
                ?_little_star 0070           ??_check_if_complete 0023             delay_music@mclass 0023  
            music_delay@i_482 0035              music_delay@i_483 0037                 i1_delay_100us 1F25  
            ___awdiv@dividend 0025                        ?_music 0030                        _ANSELA 018C  
                      _ANSELB 018D          __end_of_choose_point 07E0                        i1l4036 001B  
        __size_of_if_in_table 0020                        i1l3578 1EB8                        i1l3758 1FFE  
                      i1l3934 1FB2                        i1l3864 1F27                        u471_25 1EBF  
                      u472_25 1EC4            check_if_complete@i 0026            check_if_complete@j 0027  
                      _OSCCON 0099                        u555_25 1F3C                        _TMR2IF 0089  
       __size_of_Clear_Screen 005D      __size_of_wayout_display1 0034      __size_of_wayout_display2 0034  
   __end_of_check_if_complete 108A                __CFG_PWRTE$OFF 0000        __size_of_init_heibaiqi 0078  
            __end_of_heibaiqi 0652            draw_wayout_right@i 0043            draw_wayout_right@j 0042  
                      ___bmul 1E8C                        ___wmul 1EEC                     ??___awdiv 0027  
              __CFG_STVREN$ON 0000                     ??___awmod 0027                 Clear_Screen@i 0036  
               Clear_Screen@j 0035                        _choose 0807              __end_of_init_cfg 1467  
      draw_wayout_right@level 003E                        _memset 1ED1              __end_of_read_key 2000  
            ___awdiv@quotient 002A               ___awmod@divisor 0023                        _player 00A1  
                      _screen 0120                        _result 00A2               ___awmod@counter 0028  
                      _wayout 0086                     ??_get_key 007D                  __pdataBIGRAM 2270  
            __end_of_set_menu 1F8F           Display_Chars@string 0032                        music@i 0033  
              ?i1_delay_100us 0076                  _Clear_Screen 139B                  ?_music_delay 0030  
            __end_of_run_game 15EE                 ?_judge_result 0070       __end_of__initialization 0082  
               _readFromTable 1343            __size_of_Write_Com 000F   __end_of_draw_heibaiqi_right 0BE6  
         ___bmul@multiplicand 0023               check_point@flag 003B                __pcstackCOMMON 0070  
             check_point@temp 0036               check_point@oppo 0035                  __pidataBANK1 0801  
                __pidataBANK2 1200                  __pidataBANK3 10F2                    _Write_Data 1E6D  
          __size_of_check_Pos 000E     __size_of_init_environment 0018                 __end_of_music 129B  
             get_Y_Addr@F6419 00E9                     ?i1___wmul 0070                _OPTION_REGbits 0095  
                ?_start_video 0070                 _init_heibaiqi 1467                       ??_music 0032  
        __size_of_init_wayout 00E4                ??_judge_result 0023                    __pbssBANK0 0064  
                  __pbssBANK1 00A0                    __pbssBANK3 01DA                    __pbssBANK4 0220  
              ?_readFromTable 0023                  Write_Com@com 0030             Clear_Screen@value 0032  
  __size_of_check_if_complete 0032                    __pmaintext 1E7C         __end_of_Display_Chars 1343  
                     ?___bmul 0023             ??_wayout_display1 003E             ??_wayout_display2 003E  
                     ?___wmul 0023                    __pintentry 0004                       ?_choose 0050  
                  _get_X_Addr 102C                       ?_memset 0023                    _get_Y_Addr 112C  
       __end_of_choose_level2 0D18                       ?_wayout 0070             music_delay@mclass 0030  
                  ??i1___wmul 0074            __size_of_set_point 00A0             __end_of_Write_Com 1E6D  
              ?_init_heibaiqi 0070               ??i1_delay_100us 0078         get_Y_Addr@addr_Offset 0038  
            choose_point@temp 0052         __size_of_choose_point 018E                 int2string@num 002D  
             get_key@last_key 0020          __size_of_little_star 0100                     ?_heibaiqi 0070  
           __end_of_check_Pos 1E5E                    _int2string 11B7                     ?_init_cfg 0070  
                   ?_read_key 0070             _draw_wayout_right 0D18            ?_draw_wayout_right 003E  
                   ?_set_menu 0070                    check_Pos@x 0070                    check_Pos@y 0023  
             __size_of___bmul 0012                   ?_Write_Data 0030                    _last_table 0220  
                     ___awdiv 129B                       ___awmod 1171               __size_of___wmul 001C  
                _choose_first 01C2                  _choose_empty 01BA                     ?_run_game 0070  
             __size_of_choose 00C3                  _choose_point 0652           ??_draw_wayout_right 0040  
             __size_of_memset 001B                       __ptext1 1001                       __ptext2 08CA  
                     __ptext3 14DF                       __ptext4 124C                       __ptext5 1F08  
                     __ptext6 1561                       __ptext7 0086                       __ptext8 171C  
                     __ptext9 0D18                       _get_key 1F8F               __size_of_wayout 02FE  
                __size_of_ISR 001E                     _T2CONbits 001C                 ??_change_near 0049  
               ??_check_point 002B              ___awmod@dividend 0025                 ??_delay_100us 002B  
                     choose@i 0050                       choose@j 0052                    ??_heibaiqi 0058  
                     clrloop0 1E39                       _towards 01A0               ??_readFromTable 0026  
        end_of_initialization 0082          __size_of_music_delay 0082            choose_point@result 0051  
   __end_of_draw_wayout_right 0E80                       init_ram 1E44                       memset@c 0023  
                     memset@n 0025                       memset@p 0028                    ??_init_cfg 0032  
                     initloop 1E45                    ??_read_key 0070             __end_of_set_point 171C  
             int2string@begin 002C                 ??_delay_music 0025                    ??_set_menu 0045  
                init_wayout@i 0056                  init_wayout@j 0058                  __pstringtext 1800  
                  ??_run_game 0062                   music@mclass 0030              _init_environment 1E9E  
       i1___wmul@multiplicand 0072          __end_of_judge_result 1F6B                   ?_get_X_Addr 0023  
                 ?_get_Y_Addr 002C               ??_init_heibaiqi 0045              set_point@point_x 0042  
            set_point@point_y 0039                  _display_step 01B0              __CFG_FOSC$INTOSC 0000  
                   _TRISBbits 008D                 ??_if_in_table 0027          __size_of_start_video 002B  
         __size_of_Write_Data 000F           __end_of_change_near 167C           __end_of_check_point 0AD1  
                 ?_int2string 002C           __end_of_delay_100us 1FD9                    _total_step 00A4  
      set_point@is_Offset_Pos 003E                __end_of___bmul 1E9E           __end_of_delay_music 1F25  
               __pidataBIGRAM 0E80                __end_of___wmul 1F08                _get_Y_Addr$438 0032  
              _get_Y_Addr$439 0034                __end_of_choose 08CA                readFromTable@x 002D  
              readFromTable@y 0023                __end_of_memset 1EEC                __end_of_wayout 0384  
         start_initialization 0024             __size_ofi1___wmul 001B                   __end_of_ISR 0022  
           choose_level2@step 004D               _wayout_display1 108A               _wayout_display2 10BE  
  __size_of_draw_wayout_right 0168           __size_of_get_X_Addr 002C           __size_of_get_Y_Addr 0045  
         __end_of_if_in_table 0800           readFromTable@offset 0024                      ??___bmul 0024  
                    ??___wmul 0027                      ??_choose 0054                   __pdataBANK1 00E5  
                 __pdataBANK2 0120                   __pdataBANK3 01A0  __size_of_draw_heibaiqi_right 0115  
                    ??_memset 0027           __size_of_int2string 0049                      ??_wayout 005B  
              set_point@value 003A                     ___latbits 0002                   _change_near 15EE  
                 _check_point 09CA                 Write_Data@dat 0030                 ??_init_wayout 0045  
               __pcstackBANK0 0020                 __pcstackBANK1 00EB                check_point@col 0029  
                 _delay_100us 1FB4                get_X_Addr@addr 0025                check_point@ply 002A  
              check_point@row 0037                     _Write_Com 1E5E             __size_of_heibaiqi 02CE  
              get_Y_Addr@addr 0037                     _check_Pos 1E50                     _black_num 0067  
                change_near@k 0045                  change_near@l 0047                  check_point@i 003C  
                check_point@j 003A             __size_of_init_cfg 006F                   _delay_music 1F08  
           __size_of_read_key 0027         __size_of_judge_result 0024                  delay_100us@h 002E  
                delay_100us@i 002C                  ??_Write_Data 0032                      ?___awdiv 0023  
                    ?___awmod 0023             __size_of_set_menu 0024               choose_point@col 0045  
             choose_point@ply 0046               choose_point@row 0056          set_point@init_X_Addr 0040  
        set_point@init_Y_Addr 0041                delay_100us@cnt 0029             __size_of_run_game 008D  
                    ?_get_key 0070                 ??_little_star 0039          init_wayout@level_num 0055  
     __end_of_wayout_display1 10BE       __end_of_wayout_display2 10F2         __end_ofi1_delay_100us 1F47  
                   _empty_num 00A0                    ?_Write_Com 0030                   _if_in_table 07E0  
      __size_of_Display_Chars 0056                     _level_num 0069                __size_of_music 004F  
    __end_of_init_environment 1EB6            __end_of_Write_Data 1E7C                  _judge_result 1F47  
         __end_of_init_wayout 1800                ___wmul@product 0027             choose_point@right 0053  
      Display_Chars@addresses 0037        __size_of_choose_level2 0132                    ?_check_Pos 0023  
                   clear_ram0 1E38                    set_point@i 0043                    music@i_489 0035  
                   _set_point 167C                i1delay_100us@h 007B                i1delay_100us@i 0079  
                ??_get_X_Addr 0024                  ??_get_Y_Addr 002D             ___wmul@multiplier 0023  
                   _white_num 006B                      i1___wmul 1EB6                Display_Chars@i 003B  
              Display_Chars@x 003D                Display_Chars@y 0034                      _WPUBbits 020D  
               ?_Clear_Screen 0032                 ??_music_delay 0032           __end_of_little_star 09CA  
                ??_int2string 002E         __end_of_readFromTable 139B                   _first_chess 01D2  
                _second_chess 0164                  delay_music@a 0026                  delay_music@i 0028  
          __end_of_get_X_Addr 1058            __end_of_get_Y_Addr 1171                    ?_set_point 0039  
               _Display_Chars 12ED              __size_of___awdiv 0052              __size_of___awmod 0046  
               _choose_level2 0BE6            __end_of_int2string 1200                 _choose_second 01CA  
       __end_of_init_heibaiqi 14DF                 ??_start_video 003E              __size_of_get_key 0025  
              ??_Clear_Screen 0034              ?_wayout_display1 0070              ?_wayout_display2 0070  
                 _init_wayout 171C                   ??_Write_Com 0032                      __ptext10 0BE6  
                    __ptext11 10BE                      __ptext20 1F6B                      __ptext12 108A  
                    __ptext21 1F47                      __ptext13 0807                      __ptext30 1E50  
                    __ptext22 1E9E                      __ptext14 15EE                      __ptext31 11B7  
                    __ptext23 1ED1                      __ptext15 07E0                      _heibaiqi 0384  
                    __ptext40 1FB4                      __ptext32 1171                      __ptext24 139B  
                    __ptext16 1058                      __ptext41 1EEC                      __ptext33 129B  
                    __ptext25 0652                      __ptext17 1467                      __ptext34 09CA  
                    __ptext26 167C                      __ptext18 0AD1                      __ptext43 1F8F  
                    __ptext35 1E8C                      __ptext27 1343                      __ptext19 0384  
                    __ptext44 1F25                      __ptext36 12ED                      __ptext28 112C  
                    __ptext45 1EB6                      __ptext37 1E6D                      __ptext29 102C  
                    __ptext46 1FD9                      __ptext38 13F8                      __ptext39 1E5E  
              choose_point@up 0054           _draw_heibaiqi_right 0AD1           get_Y_Addr@addresses 002F  
         __end_of_music_delay 1561                      _init_cfg 13F8                 __size_of_main 0010  
                    _read_key 1FD9                   ??_check_Pos 0026                      _set_menu 1F6B  
              ?_Display_Chars 0032                      _temp_key 006A                      int$flags 007E  
                    _run_game 1561          ?_draw_heibaiqi_right 0070                      main@argc 00EB  
                    main@argv 00ED                ?_choose_level2 0070                   _little_star 08CA  
                  _INTCONbits 000B                  ?_change_near 0045                  ?_check_point 0029  
         get_Y_Addr@init_Addr 0036                  ?_delay_100us 0029       choose_level2@max_level3 004E  
                    memset@p1 0029           __end_of_start_video 102C                      intlevel1 0000  
               choose_point@i 0055                 choose_point@j 0057             __CFG_CLKOUTEN$OFF 0000  
                ?_delay_music 0023                   ??_set_point 003B         ??_draw_heibaiqi_right 003E  
               ?_choose_point 0045                   _temp_cursor 0064                  if_in_table@i 0023  
                if_in_table@j 0025                   get_X_Addr@x 0026                   get_X_Addr@y 0023  
                 get_Y_Addr@x 0031                   get_Y_Addr@y 002C          draw_heibaiqi_right@i 0041  
        draw_heibaiqi_right@j 0040                   _music_delay 14DF                  ?_if_in_table 0023  
               _display_black 0150               check_Pos@result 0026              i1delay_100us@cnt 0076  
           ?_init_environment 0070                 _display_white 015A            ??_init_environment 0037  
             ??_Display_Chars 0035          __end_of_Clear_Screen 13F8  
