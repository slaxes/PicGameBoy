

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Jun 17 20:18:38 2019

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1786
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBIGRAM,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	dabs	1,0x620,48
    67                           	dabs	1,0x5A0,80
    68                           	dabs	1,0x520,80
    69                           	dabs	1,0x4A0,80
    70                           	dabs	1,0x420,80
    71                           	dabs	1,0x3E0,16
    72                           	dabs	1,0x2270,0,_level
    73                           	dabs	1,0x7E,2
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  0111                     	;# 
   127  0112                     	;# 
   128  0113                     	;# 
   129  0114                     	;# 
   130  0115                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  0118                     	;# 
   134  0119                     	;# 
   135  011A                     	;# 
   136  011B                     	;# 
   137  011C                     	;# 
   138  011D                     	;# 
   139  011D                     	;# 
   140  011D                     	;# 
   141  011E                     	;# 
   142  011F                     	;# 
   143  018C                     	;# 
   144  018D                     	;# 
   145  0191                     	;# 
   146  0191                     	;# 
   147  0192                     	;# 
   148  0193                     	;# 
   149  0193                     	;# 
   150  0193                     	;# 
   151  0194                     	;# 
   152  0195                     	;# 
   153  0196                     	;# 
   154  0197                     	;# 
   155  0199                     	;# 
   156  0199                     	;# 
   157  0199                     	;# 
   158  019A                     	;# 
   159  019A                     	;# 
   160  019A                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019B                     	;# 
   165  019B                     	;# 
   166  019C                     	;# 
   167  019C                     	;# 
   168  019C                     	;# 
   169  019D                     	;# 
   170  019D                     	;# 
   171  019D                     	;# 
   172  019E                     	;# 
   173  019E                     	;# 
   174  019E                     	;# 
   175  019F                     	;# 
   176  019F                     	;# 
   177  019F                     	;# 
   178  019F                     	;# 
   179  019F                     	;# 
   180  020C                     	;# 
   181  020D                     	;# 
   182  020E                     	;# 
   183  0210                     	;# 
   184  0211                     	;# 
   185  0211                     	;# 
   186  0212                     	;# 
   187  0212                     	;# 
   188  0213                     	;# 
   189  0213                     	;# 
   190  0214                     	;# 
   191  0214                     	;# 
   192  0215                     	;# 
   193  0215                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0216                     	;# 
   197  0216                     	;# 
   198  0217                     	;# 
   199  0217                     	;# 
   200  028C                     	;# 
   201  028D                     	;# 
   202  028E                     	;# 
   203  0291                     	;# 
   204  0291                     	;# 
   205  0292                     	;# 
   206  0293                     	;# 
   207  0298                     	;# 
   208  0298                     	;# 
   209  0299                     	;# 
   210  029A                     	;# 
   211  030C                     	;# 
   212  030D                     	;# 
   213  030E                     	;# 
   214  0311                     	;# 
   215  0311                     	;# 
   216  0312                     	;# 
   217  0313                     	;# 
   218  038C                     	;# 
   219  038D                     	;# 
   220  038E                     	;# 
   221  0390                     	;# 
   222  0391                     	;# 
   223  0392                     	;# 
   224  0393                     	;# 
   225  0394                     	;# 
   226  0395                     	;# 
   227  0396                     	;# 
   228  0397                     	;# 
   229  0398                     	;# 
   230  0399                     	;# 
   231  039D                     	;# 
   232  039E                     	;# 
   233  039F                     	;# 
   234  0511                     	;# 
   235  0513                     	;# 
   236  051A                     	;# 
   237  0811                     	;# 
   238  0812                     	;# 
   239  0813                     	;# 
   240  0814                     	;# 
   241  0815                     	;# 
   242  0816                     	;# 
   243  0817                     	;# 
   244  0818                     	;# 
   245  0819                     	;# 
   246  081A                     	;# 
   247  081B                     	;# 
   248  081C                     	;# 
   249  081D                     	;# 
   250  081E                     	;# 
   251  081F                     	;# 
   252  0820                     	;# 
   253  0821                     	;# 
   254  0821                     	;# 
   255  0822                     	;# 
   256  0823                     	;# 
   257  0823                     	;# 
   258  0824                     	;# 
   259  0825                     	;# 
   260  0825                     	;# 
   261  0826                     	;# 
   262  0827                     	;# 
   263  0827                     	;# 
   264  0828                     	;# 
   265  0829                     	;# 
   266  082A                     	;# 
   267  082B                     	;# 
   268  082C                     	;# 
   269  082D                     	;# 
   270  082E                     	;# 
   271  082F                     	;# 
   272  0831                     	;# 
   273  0832                     	;# 
   274  0833                     	;# 
   275  0834                     	;# 
   276  0835                     	;# 
   277  0836                     	;# 
   278  0837                     	;# 
   279  0838                     	;# 
   280  0839                     	;# 
   281  083A                     	;# 
   282  083B                     	;# 
   283  083C                     	;# 
   284  083D                     	;# 
   285  083E                     	;# 
   286  083F                     	;# 
   287  0840                     	;# 
   288  0841                     	;# 
   289  0841                     	;# 
   290  0842                     	;# 
   291  0843                     	;# 
   292  0843                     	;# 
   293  0844                     	;# 
   294  0845                     	;# 
   295  0845                     	;# 
   296  0846                     	;# 
   297  0847                     	;# 
   298  0847                     	;# 
   299  0848                     	;# 
   300  0849                     	;# 
   301  084A                     	;# 
   302  084B                     	;# 
   303  084C                     	;# 
   304  084D                     	;# 
   305  084E                     	;# 
   306  084F                     	;# 
   307  0851                     	;# 
   308  0852                     	;# 
   309  0853                     	;# 
   310  0854                     	;# 
   311  0855                     	;# 
   312  0856                     	;# 
   313  0857                     	;# 
   314  0858                     	;# 
   315  0859                     	;# 
   316  085A                     	;# 
   317  085B                     	;# 
   318  085C                     	;# 
   319  085D                     	;# 
   320  085E                     	;# 
   321  085F                     	;# 
   322  0860                     	;# 
   323  0861                     	;# 
   324  0861                     	;# 
   325  0862                     	;# 
   326  0863                     	;# 
   327  0863                     	;# 
   328  0864                     	;# 
   329  0865                     	;# 
   330  0865                     	;# 
   331  0866                     	;# 
   332  0867                     	;# 
   333  0867                     	;# 
   334  0868                     	;# 
   335  0869                     	;# 
   336  086A                     	;# 
   337  086B                     	;# 
   338  086C                     	;# 
   339  086D                     	;# 
   340  086E                     	;# 
   341  086F                     	;# 
   342  0FE4                     	;# 
   343  0FE5                     	;# 
   344  0FE6                     	;# 
   345  0FE7                     	;# 
   346  0FE8                     	;# 
   347  0FE9                     	;# 
   348  0FEA                     	;# 
   349  0FEB                     	;# 
   350  0FED                     	;# 
   351  0FEE                     	;# 
   352  0FEF                     	;# 
   353  0000                     	;# 
   354  0001                     	;# 
   355  0002                     	;# 
   356  0003                     	;# 
   357  0004                     	;# 
   358  0005                     	;# 
   359  0006                     	;# 
   360  0007                     	;# 
   361  0008                     	;# 
   362  0009                     	;# 
   363  000A                     	;# 
   364  000B                     	;# 
   365  000C                     	;# 
   366  000D                     	;# 
   367  000E                     	;# 
   368  0010                     	;# 
   369  0011                     	;# 
   370  0012                     	;# 
   371  0013                     	;# 
   372  0014                     	;# 
   373  0015                     	;# 
   374  0016                     	;# 
   375  0016                     	;# 
   376  0017                     	;# 
   377  0018                     	;# 
   378  0019                     	;# 
   379  001A                     	;# 
   380  001B                     	;# 
   381  001C                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  0090                     	;# 
   386  0091                     	;# 
   387  0092                     	;# 
   388  0093                     	;# 
   389  0094                     	;# 
   390  0095                     	;# 
   391  0096                     	;# 
   392  0097                     	;# 
   393  0098                     	;# 
   394  0099                     	;# 
   395  009A                     	;# 
   396  009B                     	;# 
   397  009B                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  009F                     	;# 
   402  010C                     	;# 
   403  010D                     	;# 
   404  010E                     	;# 
   405  0111                     	;# 
   406  0112                     	;# 
   407  0113                     	;# 
   408  0114                     	;# 
   409  0115                     	;# 
   410  0116                     	;# 
   411  0117                     	;# 
   412  0118                     	;# 
   413  0119                     	;# 
   414  011A                     	;# 
   415  011B                     	;# 
   416  011C                     	;# 
   417  011D                     	;# 
   418  011D                     	;# 
   419  011D                     	;# 
   420  011E                     	;# 
   421  011F                     	;# 
   422  018C                     	;# 
   423  018D                     	;# 
   424  0191                     	;# 
   425  0191                     	;# 
   426  0192                     	;# 
   427  0193                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  0197                     	;# 
   434  0199                     	;# 
   435  0199                     	;# 
   436  0199                     	;# 
   437  019A                     	;# 
   438  019A                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019C                     	;# 
   448  019D                     	;# 
   449  019D                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019E                     	;# 
   453  019E                     	;# 
   454  019F                     	;# 
   455  019F                     	;# 
   456  019F                     	;# 
   457  019F                     	;# 
   458  019F                     	;# 
   459  020C                     	;# 
   460  020D                     	;# 
   461  020E                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  028C                     	;# 
   480  028D                     	;# 
   481  028E                     	;# 
   482  0291                     	;# 
   483  0291                     	;# 
   484  0292                     	;# 
   485  0293                     	;# 
   486  0298                     	;# 
   487  0298                     	;# 
   488  0299                     	;# 
   489  029A                     	;# 
   490  030C                     	;# 
   491  030D                     	;# 
   492  030E                     	;# 
   493  0311                     	;# 
   494  0311                     	;# 
   495  0312                     	;# 
   496  0313                     	;# 
   497  038C                     	;# 
   498  038D                     	;# 
   499  038E                     	;# 
   500  0390                     	;# 
   501  0391                     	;# 
   502  0392                     	;# 
   503  0393                     	;# 
   504  0394                     	;# 
   505  0395                     	;# 
   506  0396                     	;# 
   507  0397                     	;# 
   508  0398                     	;# 
   509  0399                     	;# 
   510  039D                     	;# 
   511  039E                     	;# 
   512  039F                     	;# 
   513  0511                     	;# 
   514  0513                     	;# 
   515  051A                     	;# 
   516  0811                     	;# 
   517  0812                     	;# 
   518  0813                     	;# 
   519  0814                     	;# 
   520  0815                     	;# 
   521  0816                     	;# 
   522  0817                     	;# 
   523  0818                     	;# 
   524  0819                     	;# 
   525  081A                     	;# 
   526  081B                     	;# 
   527  081C                     	;# 
   528  081D                     	;# 
   529  081E                     	;# 
   530  081F                     	;# 
   531  0820                     	;# 
   532  0821                     	;# 
   533  0821                     	;# 
   534  0822                     	;# 
   535  0823                     	;# 
   536  0823                     	;# 
   537  0824                     	;# 
   538  0825                     	;# 
   539  0825                     	;# 
   540  0826                     	;# 
   541  0827                     	;# 
   542  0827                     	;# 
   543  0828                     	;# 
   544  0829                     	;# 
   545  082A                     	;# 
   546  082B                     	;# 
   547  082C                     	;# 
   548  082D                     	;# 
   549  082E                     	;# 
   550  082F                     	;# 
   551  0831                     	;# 
   552  0832                     	;# 
   553  0833                     	;# 
   554  0834                     	;# 
   555  0835                     	;# 
   556  0836                     	;# 
   557  0837                     	;# 
   558  0838                     	;# 
   559  0839                     	;# 
   560  083A                     	;# 
   561  083B                     	;# 
   562  083C                     	;# 
   563  083D                     	;# 
   564  083E                     	;# 
   565  083F                     	;# 
   566  0840                     	;# 
   567  0841                     	;# 
   568  0841                     	;# 
   569  0842                     	;# 
   570  0843                     	;# 
   571  0843                     	;# 
   572  0844                     	;# 
   573  0845                     	;# 
   574  0845                     	;# 
   575  0846                     	;# 
   576  0847                     	;# 
   577  0847                     	;# 
   578  0848                     	;# 
   579  0849                     	;# 
   580  084A                     	;# 
   581  084B                     	;# 
   582  084C                     	;# 
   583  084D                     	;# 
   584  084E                     	;# 
   585  084F                     	;# 
   586  0851                     	;# 
   587  0852                     	;# 
   588  0853                     	;# 
   589  0854                     	;# 
   590  0855                     	;# 
   591  0856                     	;# 
   592  0857                     	;# 
   593  0858                     	;# 
   594  0859                     	;# 
   595  085A                     	;# 
   596  085B                     	;# 
   597  085C                     	;# 
   598  085D                     	;# 
   599  085E                     	;# 
   600  085F                     	;# 
   601  0860                     	;# 
   602  0861                     	;# 
   603  0861                     	;# 
   604  0862                     	;# 
   605  0863                     	;# 
   606  0863                     	;# 
   607  0864                     	;# 
   608  0865                     	;# 
   609  0865                     	;# 
   610  0866                     	;# 
   611  0867                     	;# 
   612  0867                     	;# 
   613  0868                     	;# 
   614  0869                     	;# 
   615  086A                     	;# 
   616  086B                     	;# 
   617  086C                     	;# 
   618  086D                     	;# 
   619  086E                     	;# 
   620  086F                     	;# 
   621  0FE4                     	;# 
   622  0FE5                     	;# 
   623  0FE6                     	;# 
   624  0FE7                     	;# 
   625  0FE8                     	;# 
   626  0FE9                     	;# 
   627  0FEA                     	;# 
   628  0FEB                     	;# 
   629  0FED                     	;# 
   630  0FEE                     	;# 
   631  0FEF                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0008                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0016                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001C                     	;# 
   661  008C                     	;# 
   662  008D                     	;# 
   663  008E                     	;# 
   664  0090                     	;# 
   665  0091                     	;# 
   666  0092                     	;# 
   667  0093                     	;# 
   668  0094                     	;# 
   669  0095                     	;# 
   670  0096                     	;# 
   671  0097                     	;# 
   672  0098                     	;# 
   673  0099                     	;# 
   674  009A                     	;# 
   675  009B                     	;# 
   676  009B                     	;# 
   677  009C                     	;# 
   678  009D                     	;# 
   679  009E                     	;# 
   680  009F                     	;# 
   681  010C                     	;# 
   682  010D                     	;# 
   683  010E                     	;# 
   684  0111                     	;# 
   685  0112                     	;# 
   686  0113                     	;# 
   687  0114                     	;# 
   688  0115                     	;# 
   689  0116                     	;# 
   690  0117                     	;# 
   691  0118                     	;# 
   692  0119                     	;# 
   693  011A                     	;# 
   694  011B                     	;# 
   695  011C                     	;# 
   696  011D                     	;# 
   697  011D                     	;# 
   698  011D                     	;# 
   699  011E                     	;# 
   700  011F                     	;# 
   701  018C                     	;# 
   702  018D                     	;# 
   703  0191                     	;# 
   704  0191                     	;# 
   705  0192                     	;# 
   706  0193                     	;# 
   707  0193                     	;# 
   708  0193                     	;# 
   709  0194                     	;# 
   710  0195                     	;# 
   711  0196                     	;# 
   712  0197                     	;# 
   713  0199                     	;# 
   714  0199                     	;# 
   715  0199                     	;# 
   716  019A                     	;# 
   717  019A                     	;# 
   718  019A                     	;# 
   719  019B                     	;# 
   720  019B                     	;# 
   721  019B                     	;# 
   722  019B                     	;# 
   723  019B                     	;# 
   724  019C                     	;# 
   725  019C                     	;# 
   726  019C                     	;# 
   727  019D                     	;# 
   728  019D                     	;# 
   729  019D                     	;# 
   730  019E                     	;# 
   731  019E                     	;# 
   732  019E                     	;# 
   733  019F                     	;# 
   734  019F                     	;# 
   735  019F                     	;# 
   736  019F                     	;# 
   737  019F                     	;# 
   738  020C                     	;# 
   739  020D                     	;# 
   740  020E                     	;# 
   741  0210                     	;# 
   742  0211                     	;# 
   743  0211                     	;# 
   744  0212                     	;# 
   745  0212                     	;# 
   746  0213                     	;# 
   747  0213                     	;# 
   748  0214                     	;# 
   749  0214                     	;# 
   750  0215                     	;# 
   751  0215                     	;# 
   752  0215                     	;# 
   753  0215                     	;# 
   754  0216                     	;# 
   755  0216                     	;# 
   756  0217                     	;# 
   757  0217                     	;# 
   758  028C                     	;# 
   759  028D                     	;# 
   760  028E                     	;# 
   761  0291                     	;# 
   762  0291                     	;# 
   763  0292                     	;# 
   764  0293                     	;# 
   765  0298                     	;# 
   766  0298                     	;# 
   767  0299                     	;# 
   768  029A                     	;# 
   769  030C                     	;# 
   770  030D                     	;# 
   771  030E                     	;# 
   772  0311                     	;# 
   773  0311                     	;# 
   774  0312                     	;# 
   775  0313                     	;# 
   776  038C                     	;# 
   777  038D                     	;# 
   778  038E                     	;# 
   779  0390                     	;# 
   780  0391                     	;# 
   781  0392                     	;# 
   782  0393                     	;# 
   783  0394                     	;# 
   784  0395                     	;# 
   785  0396                     	;# 
   786  0397                     	;# 
   787  0398                     	;# 
   788  0399                     	;# 
   789  039D                     	;# 
   790  039E                     	;# 
   791  039F                     	;# 
   792  0511                     	;# 
   793  0513                     	;# 
   794  051A                     	;# 
   795  0811                     	;# 
   796  0812                     	;# 
   797  0813                     	;# 
   798  0814                     	;# 
   799  0815                     	;# 
   800  0816                     	;# 
   801  0817                     	;# 
   802  0818                     	;# 
   803  0819                     	;# 
   804  081A                     	;# 
   805  081B                     	;# 
   806  081C                     	;# 
   807  081D                     	;# 
   808  081E                     	;# 
   809  081F                     	;# 
   810  0820                     	;# 
   811  0821                     	;# 
   812  0821                     	;# 
   813  0822                     	;# 
   814  0823                     	;# 
   815  0823                     	;# 
   816  0824                     	;# 
   817  0825                     	;# 
   818  0825                     	;# 
   819  0826                     	;# 
   820  0827                     	;# 
   821  0827                     	;# 
   822  0828                     	;# 
   823  0829                     	;# 
   824  082A                     	;# 
   825  082B                     	;# 
   826  082C                     	;# 
   827  082D                     	;# 
   828  082E                     	;# 
   829  082F                     	;# 
   830  0831                     	;# 
   831  0832                     	;# 
   832  0833                     	;# 
   833  0834                     	;# 
   834  0835                     	;# 
   835  0836                     	;# 
   836  0837                     	;# 
   837  0838                     	;# 
   838  0839                     	;# 
   839  083A                     	;# 
   840  083B                     	;# 
   841  083C                     	;# 
   842  083D                     	;# 
   843  083E                     	;# 
   844  083F                     	;# 
   845  0840                     	;# 
   846  0841                     	;# 
   847  0841                     	;# 
   848  0842                     	;# 
   849  0843                     	;# 
   850  0843                     	;# 
   851  0844                     	;# 
   852  0845                     	;# 
   853  0845                     	;# 
   854  0846                     	;# 
   855  0847                     	;# 
   856  0847                     	;# 
   857  0848                     	;# 
   858  0849                     	;# 
   859  084A                     	;# 
   860  084B                     	;# 
   861  084C                     	;# 
   862  084D                     	;# 
   863  084E                     	;# 
   864  084F                     	;# 
   865  0851                     	;# 
   866  0852                     	;# 
   867  0853                     	;# 
   868  0854                     	;# 
   869  0855                     	;# 
   870  0856                     	;# 
   871  0857                     	;# 
   872  0858                     	;# 
   873  0859                     	;# 
   874  085A                     	;# 
   875  085B                     	;# 
   876  085C                     	;# 
   877  085D                     	;# 
   878  085E                     	;# 
   879  085F                     	;# 
   880  0860                     	;# 
   881  0861                     	;# 
   882  0861                     	;# 
   883  0862                     	;# 
   884  0863                     	;# 
   885  0863                     	;# 
   886  0864                     	;# 
   887  0865                     	;# 
   888  0865                     	;# 
   889  0866                     	;# 
   890  0867                     	;# 
   891  0867                     	;# 
   892  0868                     	;# 
   893  0869                     	;# 
   894  086A                     	;# 
   895  086B                     	;# 
   896  086C                     	;# 
   897  086D                     	;# 
   898  086E                     	;# 
   899  086F                     	;# 
   900  0FE4                     	;# 
   901  0FE5                     	;# 
   902  0FE6                     	;# 
   903  0FE7                     	;# 
   904  0FE8                     	;# 
   905  0FE9                     	;# 
   906  0FEA                     	;# 
   907  0FEB                     	;# 
   908  0FED                     	;# 
   909  0FEE                     	;# 
   910  0FEF                     	;# 
   911  0000                     	;# 
   912  0001                     	;# 
   913  0002                     	;# 
   914  0003                     	;# 
   915  0004                     	;# 
   916  0005                     	;# 
   917  0006                     	;# 
   918  0007                     	;# 
   919  0008                     	;# 
   920  0009                     	;# 
   921  000A                     	;# 
   922  000B                     	;# 
   923  000C                     	;# 
   924  000D                     	;# 
   925  000E                     	;# 
   926  0010                     	;# 
   927  0011                     	;# 
   928  0012                     	;# 
   929  0013                     	;# 
   930  0014                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0016                     	;# 
   934  0017                     	;# 
   935  0018                     	;# 
   936  0019                     	;# 
   937  001A                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  008C                     	;# 
   941  008D                     	;# 
   942  008E                     	;# 
   943  0090                     	;# 
   944  0091                     	;# 
   945  0092                     	;# 
   946  0093                     	;# 
   947  0094                     	;# 
   948  0095                     	;# 
   949  0096                     	;# 
   950  0097                     	;# 
   951  0098                     	;# 
   952  0099                     	;# 
   953  009A                     	;# 
   954  009B                     	;# 
   955  009B                     	;# 
   956  009C                     	;# 
   957  009D                     	;# 
   958  009E                     	;# 
   959  009F                     	;# 
   960  010C                     	;# 
   961  010D                     	;# 
   962  010E                     	;# 
   963  0111                     	;# 
   964  0112                     	;# 
   965  0113                     	;# 
   966  0114                     	;# 
   967  0115                     	;# 
   968  0116                     	;# 
   969  0117                     	;# 
   970  0118                     	;# 
   971  0119                     	;# 
   972  011A                     	;# 
   973  011B                     	;# 
   974  011C                     	;# 
   975  011D                     	;# 
   976  011D                     	;# 
   977  011D                     	;# 
   978  011E                     	;# 
   979  011F                     	;# 
   980  018C                     	;# 
   981  018D                     	;# 
   982  0191                     	;# 
   983  0191                     	;# 
   984  0192                     	;# 
   985  0193                     	;# 
   986  0193                     	;# 
   987  0193                     	;# 
   988  0194                     	;# 
   989  0195                     	;# 
   990  0196                     	;# 
   991  0197                     	;# 
   992  0199                     	;# 
   993  0199                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019A                     	;# 
   997  019A                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019D                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019E                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  019F                     	;# 
  1014  019F                     	;# 
  1015  019F                     	;# 
  1016  019F                     	;# 
  1017  020C                     	;# 
  1018  020D                     	;# 
  1019  020E                     	;# 
  1020  0210                     	;# 
  1021  0211                     	;# 
  1022  0211                     	;# 
  1023  0212                     	;# 
  1024  0212                     	;# 
  1025  0213                     	;# 
  1026  0213                     	;# 
  1027  0214                     	;# 
  1028  0214                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0216                     	;# 
  1034  0216                     	;# 
  1035  0217                     	;# 
  1036  0217                     	;# 
  1037  028C                     	;# 
  1038  028D                     	;# 
  1039  028E                     	;# 
  1040  0291                     	;# 
  1041  0291                     	;# 
  1042  0292                     	;# 
  1043  0293                     	;# 
  1044  0298                     	;# 
  1045  0298                     	;# 
  1046  0299                     	;# 
  1047  029A                     	;# 
  1048  030C                     	;# 
  1049  030D                     	;# 
  1050  030E                     	;# 
  1051  0311                     	;# 
  1052  0311                     	;# 
  1053  0312                     	;# 
  1054  0313                     	;# 
  1055  038C                     	;# 
  1056  038D                     	;# 
  1057  038E                     	;# 
  1058  0390                     	;# 
  1059  0391                     	;# 
  1060  0392                     	;# 
  1061  0393                     	;# 
  1062  0394                     	;# 
  1063  0395                     	;# 
  1064  0396                     	;# 
  1065  0397                     	;# 
  1066  0398                     	;# 
  1067  0399                     	;# 
  1068  039D                     	;# 
  1069  039E                     	;# 
  1070  039F                     	;# 
  1071  0511                     	;# 
  1072  0513                     	;# 
  1073  051A                     	;# 
  1074  0811                     	;# 
  1075  0812                     	;# 
  1076  0813                     	;# 
  1077  0814                     	;# 
  1078  0815                     	;# 
  1079  0816                     	;# 
  1080  0817                     	;# 
  1081  0818                     	;# 
  1082  0819                     	;# 
  1083  081A                     	;# 
  1084  081B                     	;# 
  1085  081C                     	;# 
  1086  081D                     	;# 
  1087  081E                     	;# 
  1088  081F                     	;# 
  1089  0820                     	;# 
  1090  0821                     	;# 
  1091  0821                     	;# 
  1092  0822                     	;# 
  1093  0823                     	;# 
  1094  0823                     	;# 
  1095  0824                     	;# 
  1096  0825                     	;# 
  1097  0825                     	;# 
  1098  0826                     	;# 
  1099  0827                     	;# 
  1100  0827                     	;# 
  1101  0828                     	;# 
  1102  0829                     	;# 
  1103  082A                     	;# 
  1104  082B                     	;# 
  1105  082C                     	;# 
  1106  082D                     	;# 
  1107  082E                     	;# 
  1108  082F                     	;# 
  1109  0831                     	;# 
  1110  0832                     	;# 
  1111  0833                     	;# 
  1112  0834                     	;# 
  1113  0835                     	;# 
  1114  0836                     	;# 
  1115  0837                     	;# 
  1116  0838                     	;# 
  1117  0839                     	;# 
  1118  083A                     	;# 
  1119  083B                     	;# 
  1120  083C                     	;# 
  1121  083D                     	;# 
  1122  083E                     	;# 
  1123  083F                     	;# 
  1124  0840                     	;# 
  1125  0841                     	;# 
  1126  0841                     	;# 
  1127  0842                     	;# 
  1128  0843                     	;# 
  1129  0843                     	;# 
  1130  0844                     	;# 
  1131  0845                     	;# 
  1132  0845                     	;# 
  1133  0846                     	;# 
  1134  0847                     	;# 
  1135  0847                     	;# 
  1136  0848                     	;# 
  1137  0849                     	;# 
  1138  084A                     	;# 
  1139  084B                     	;# 
  1140  084C                     	;# 
  1141  084D                     	;# 
  1142  084E                     	;# 
  1143  084F                     	;# 
  1144  0851                     	;# 
  1145  0852                     	;# 
  1146  0853                     	;# 
  1147  0854                     	;# 
  1148  0855                     	;# 
  1149  0856                     	;# 
  1150  0857                     	;# 
  1151  0858                     	;# 
  1152  0859                     	;# 
  1153  085A                     	;# 
  1154  085B                     	;# 
  1155  085C                     	;# 
  1156  085D                     	;# 
  1157  085E                     	;# 
  1158  085F                     	;# 
  1159  0860                     	;# 
  1160  0861                     	;# 
  1161  0861                     	;# 
  1162  0862                     	;# 
  1163  0863                     	;# 
  1164  0863                     	;# 
  1165  0864                     	;# 
  1166  0865                     	;# 
  1167  0865                     	;# 
  1168  0866                     	;# 
  1169  0867                     	;# 
  1170  0867                     	;# 
  1171  0868                     	;# 
  1172  0869                     	;# 
  1173  086A                     	;# 
  1174  086B                     	;# 
  1175  086C                     	;# 
  1176  086D                     	;# 
  1177  086E                     	;# 
  1178  086F                     	;# 
  1179  0FE4                     	;# 
  1180  0FE5                     	;# 
  1181  0FE6                     	;# 
  1182  0FE7                     	;# 
  1183  0FE8                     	;# 
  1184  0FE9                     	;# 
  1185  0FEA                     	;# 
  1186  0FEB                     	;# 
  1187  0FED                     	;# 
  1188  0FEE                     	;# 
  1189  0FEF                     	;_level
  1190                           
  1191                           	psect	idataBANK1
  1192  1F04                     __pidataBANK1:	
  1193                           
  1194                           ;initializer for Display_Char@F6426
  1195  1F04  3480               	retlw	128
  1196  1F05  3490               	retlw	144
  1197  1F06  3488               	retlw	136
  1198  1F07  3498               	retlw	152
  1199                           
  1200                           ;initializer for Display_Chars@F6420
  1201  1F08  3480               	retlw	128
  1202  1F09  3490               	retlw	144
  1203  1F0A  3488               	retlw	136
  1204  1F0B  3498               	retlw	152
  1205                           
  1206                           ;initializer for get_Y_Addr@F6431
  1207  1F0C  3480               	retlw	128
  1208  1F0D  3488               	retlw	136
  1209                           
  1210                           	psect	idataBANK2
  1211  138B                     __pidataBANK2:	
  1212                           
  1213                           ;initializer for _display_black
  1214  138B  3420               	retlw	32
  1215  138C  345B               	retlw	91
  1216  138D  3442               	retlw	66
  1217  138E  345D               	retlw	93
  1218  138F  343A               	retlw	58
  1219  1390  3400               	retlw	0
  1220  1391  3400               	retlw	0
  1221  1392  3400               	retlw	0
  1222  1393  3400               	retlw	0
  1223  1394  3400               	retlw	0
  1224                           
  1225                           ;initializer for _display_step
  1226  1395  3420               	retlw	32
  1227  1396  3457               	retlw	87
  1228  1397  3461               	retlw	97
  1229  1398  3479               	retlw	121
  1230  1399  343A               	retlw	58
  1231  139A  3400               	retlw	0
  1232  139B  3400               	retlw	0
  1233  139C  3400               	retlw	0
  1234  139D  3400               	retlw	0
  1235  139E  3400               	retlw	0
  1236                           
  1237                           ;initializer for _display_white
  1238  139F  3420               	retlw	32
  1239  13A0  345B               	retlw	91
  1240  13A1  3457               	retlw	87
  1241  13A2  345D               	retlw	93
  1242  13A3  343A               	retlw	58
  1243  13A4  3400               	retlw	0
  1244  13A5  3400               	retlw	0
  1245  13A6  3400               	retlw	0
  1246  13A7  3400               	retlw	0
  1247  13A8  3400               	retlw	0
  1248                           
  1249                           ;initializer for _choose_empty
  1250  13A9  34FF               	retlw	255
  1251  13AA  3481               	retlw	129
  1252  13AB  3481               	retlw	129
  1253  13AC  3481               	retlw	129
  1254  13AD  3481               	retlw	129
  1255  13AE  3481               	retlw	129
  1256  13AF  3481               	retlw	129
  1257  13B0  34FF               	retlw	255
  1258                           
  1259                           ;initializer for _choose_first
  1260  13B1  34FF               	retlw	255
  1261  13B2  3481               	retlw	129
  1262  13B3  3499               	retlw	153
  1263  13B4  34BD               	retlw	189
  1264  13B5  34BD               	retlw	189
  1265  13B6  3499               	retlw	153
  1266  13B7  3481               	retlw	129
  1267  13B8  34FF               	retlw	255
  1268                           
  1269                           ;initializer for _choose_second
  1270  13B9  34FF               	retlw	255
  1271  13BA  3481               	retlw	129
  1272  13BB  3499               	retlw	153
  1273  13BC  34A5               	retlw	165
  1274  13BD  34A5               	retlw	165
  1275  13BE  3499               	retlw	153
  1276  13BF  3481               	retlw	129
  1277  13C0  34FF               	retlw	255
  1278                           
  1279                           ;initializer for _first_chess
  1280  13C1  3400               	retlw	0
  1281  13C2  343C               	retlw	60
  1282  13C3  347E               	retlw	126
  1283  13C4  347E               	retlw	126
  1284  13C5  347E               	retlw	126
  1285  13C6  347E               	retlw	126
  1286  13C7  343C               	retlw	60
  1287  13C8  3400               	retlw	0
  1288                           
  1289                           ;initializer for _second_chess
  1290  13C9  3400               	retlw	0
  1291  13CA  343C               	retlw	60
  1292  13CB  3442               	retlw	66
  1293  13CC  3442               	retlw	66
  1294  13CD  3442               	retlw	66
  1295  13CE  3442               	retlw	66
  1296  13CF  343C               	retlw	60
  1297  13D0  3400               	retlw	0
  1298                           
  1299                           	psect	idataBANK3
  1300  127E                     __pidataBANK3:	
  1301                           
  1302                           ;initializer for _towards
  1303  127E  3400               	retlw	0
  1304  127F  3401               	retlw	1
  1305  1280  3400               	retlw	0
  1306  1281  34FF               	retlw	255
  1307  1282  3401               	retlw	1
  1308  1283  3400               	retlw	0
  1309  1284  3401               	retlw	1
  1310  1285  3401               	retlw	1
  1311  1286  3401               	retlw	1
  1312  1287  34FF               	retlw	255
  1313  1288  34FF               	retlw	255
  1314  1289  3400               	retlw	0
  1315  128A  34FF               	retlw	255
  1316  128B  3401               	retlw	1
  1317  128C  34FF               	retlw	255
  1318  128D  34FF               	retlw	255
  1319                           
  1320                           ;initializer for _screen
  1321  128E  3400               	retlw	0
  1322  128F  3400               	retlw	0
  1323  1290  3400               	retlw	0
  1324  1291  3400               	retlw	0
  1325  1292  3400               	retlw	0
  1326  1293  3400               	retlw	0
  1327  1294  3400               	retlw	0
  1328  1295  3400               	retlw	0
  1329  1296  3400               	retlw	0
  1330  1297  343C               	retlw	60
  1331  1298  347E               	retlw	126
  1332  1299  347E               	retlw	126
  1333  129A  347E               	retlw	126
  1334  129B  347E               	retlw	126
  1335  129C  343C               	retlw	60
  1336  129D  3400               	retlw	0
  1337  129E  3400               	retlw	0
  1338  129F  343C               	retlw	60
  1339  12A0  3442               	retlw	66
  1340  12A1  3442               	retlw	66
  1341  12A2  3442               	retlw	66
  1342  12A3  3442               	retlw	66
  1343  12A4  343C               	retlw	60
  1344  12A5  3400               	retlw	0
  1345  12A6  34FF               	retlw	255
  1346  12A7  3481               	retlw	129
  1347  12A8  3481               	retlw	129
  1348  12A9  3481               	retlw	129
  1349  12AA  3481               	retlw	129
  1350  12AB  3481               	retlw	129
  1351  12AC  3481               	retlw	129
  1352  12AD  34FF               	retlw	255
  1353  12AE  34FF               	retlw	255
  1354  12AF  3481               	retlw	129
  1355  12B0  3499               	retlw	153
  1356  12B1  34BD               	retlw	189
  1357  12B2  34BD               	retlw	189
  1358  12B3  3499               	retlw	153
  1359  12B4  3481               	retlw	129
  1360  12B5  34FF               	retlw	255
  1361  12B6  34FF               	retlw	255
  1362  12B7  3481               	retlw	129
  1363  12B8  3499               	retlw	153
  1364  12B9  34A5               	retlw	165
  1365  12BA  34A5               	retlw	165
  1366  12BB  3499               	retlw	153
  1367  12BC  3481               	retlw	129
  1368  12BD  34FF               	retlw	255
  1369                           
  1370                           	psect	idataBIGRAM
  1371  0CF2                     __pidataBIGRAM:	
  1372                           
  1373                           ;initializer for _level
  1374  0CF2  3400               	retlw	0
  1375  0CF3  3400               	retlw	0
  1376  0CF4  3400               	retlw	0
  1377  0CF5  3400               	retlw	0
  1378  0CF6  3400               	retlw	0
  1379  0CF7  3400               	retlw	0
  1380  0CF8  3400               	retlw	0
  1381  0CF9  3400               	retlw	0
  1382  0CFA  3400               	retlw	0
  1383  0CFB  3400               	retlw	0
  1384  0CFC  3400               	retlw	0
  1385  0CFD  3400               	retlw	0
  1386  0CFE  3400               	retlw	0
  1387  0CFF  3400               	retlw	0
  1388  0D00  3400               	retlw	0
  1389  0D01  3400               	retlw	0
  1390  0D02  3400               	retlw	0
  1391  0D03  3400               	retlw	0
  1392  0D04  3401               	retlw	1
  1393  0D05  3402               	retlw	2
  1394  0D06  3401               	retlw	1
  1395  0D07  3400               	retlw	0
  1396  0D08  3400               	retlw	0
  1397  0D09  3400               	retlw	0
  1398  0D0A  3400               	retlw	0
  1399  0D0B  3400               	retlw	0
  1400  0D0C  3402               	retlw	2
  1401  0D0D  3402               	retlw	2
  1402  0D0E  3402               	retlw	2
  1403  0D0F  3400               	retlw	0
  1404  0D10  3400               	retlw	0
  1405  0D11  3400               	retlw	0
  1406  0D12  3400               	retlw	0
  1407  0D13  3400               	retlw	0
  1408  0D14  3401               	retlw	1
  1409  0D15  3402               	retlw	2
  1410  0D16  3401               	retlw	1
  1411  0D17  3400               	retlw	0
  1412  0D18  3400               	retlw	0
  1413  0D19  3400               	retlw	0
  1414  0D1A  3400               	retlw	0
  1415  0D1B  3400               	retlw	0
  1416  0D1C  3400               	retlw	0
  1417  0D1D  3400               	retlw	0
  1418  0D1E  3400               	retlw	0
  1419  0D1F  3400               	retlw	0
  1420  0D20  3400               	retlw	0
  1421  0D21  3400               	retlw	0
  1422  0D22  3400               	retlw	0
  1423  0D23  3400               	retlw	0
  1424  0D24  3400               	retlw	0
  1425  0D25  3400               	retlw	0
  1426  0D26  3400               	retlw	0
  1427  0D27  3400               	retlw	0
  1428  0D28  3400               	retlw	0
  1429  0D29  3400               	retlw	0
  1430  0D2A  3400               	retlw	0
  1431  0D2B  3400               	retlw	0
  1432  0D2C  3400               	retlw	0
  1433  0D2D  3400               	retlw	0
  1434  0D2E  3400               	retlw	0
  1435  0D2F  3400               	retlw	0
  1436  0D30  3400               	retlw	0
  1437  0D31  3400               	retlw	0
  1438  0D32  3400               	retlw	0
  1439  0D33  3400               	retlw	0
  1440  0D34  3400               	retlw	0
  1441  0D35  3400               	retlw	0
  1442  0D36  3400               	retlw	0
  1443  0D37  3400               	retlw	0
  1444  0D38  3400               	retlw	0
  1445  0D39  3400               	retlw	0
  1446  0D3A  3400               	retlw	0
  1447  0D3B  3400               	retlw	0
  1448  0D3C  3400               	retlw	0
  1449  0D3D  3400               	retlw	0
  1450  0D3E  3400               	retlw	0
  1451  0D3F  3400               	retlw	0
  1452  0D40  3400               	retlw	0
  1453  0D41  3400               	retlw	0
  1454  0D42  3400               	retlw	0
  1455  0D43  3400               	retlw	0
  1456  0D44  3402               	retlw	2
  1457  0D45  3402               	retlw	2
  1458  0D46  3400               	retlw	0
  1459  0D47  3400               	retlw	0
  1460  0D48  3400               	retlw	0
  1461  0D49  3400               	retlw	0
  1462  0D4A  3400               	retlw	0
  1463  0D4B  3400               	retlw	0
  1464  0D4C  3402               	retlw	2
  1465  0D4D  3401               	retlw	1
  1466  0D4E  3402               	retlw	2
  1467  0D4F  3400               	retlw	0
  1468  0D50  3400               	retlw	0
  1469  0D51  3400               	retlw	0
  1470  0D52  3400               	retlw	0
  1471  0D53  3400               	retlw	0
  1472  0D54  3400               	retlw	0
  1473  0D55  3402               	retlw	2
  1474  0D56  3402               	retlw	2
  1475  0D57  3400               	retlw	0
  1476  0D58  3400               	retlw	0
  1477  0D59  3400               	retlw	0
  1478  0D5A  3400               	retlw	0
  1479  0D5B  3400               	retlw	0
  1480  0D5C  3400               	retlw	0
  1481  0D5D  3400               	retlw	0
  1482  0D5E  3400               	retlw	0
  1483  0D5F  3400               	retlw	0
  1484  0D60  3400               	retlw	0
  1485  0D61  3400               	retlw	0
  1486  0D62  3400               	retlw	0
  1487  0D63  3400               	retlw	0
  1488  0D64  3400               	retlw	0
  1489  0D65  3400               	retlw	0
  1490  0D66  3400               	retlw	0
  1491  0D67  3400               	retlw	0
  1492  0D68  3400               	retlw	0
  1493  0D69  3400               	retlw	0
  1494  0D6A  3400               	retlw	0
  1495  0D6B  3400               	retlw	0
  1496  0D6C  3400               	retlw	0
  1497  0D6D  3400               	retlw	0
  1498  0D6E  3400               	retlw	0
  1499  0D6F  3400               	retlw	0
  1500  0D70  3400               	retlw	0
  1501  0D71  3400               	retlw	0
  1502  0D72  3400               	retlw	0
  1503  0D73  3400               	retlw	0
  1504  0D74  3400               	retlw	0
  1505  0D75  3400               	retlw	0
  1506  0D76  3400               	retlw	0
  1507  0D77  3400               	retlw	0
  1508  0D78  3400               	retlw	0
  1509  0D79  3400               	retlw	0
  1510  0D7A  3400               	retlw	0
  1511  0D7B  3400               	retlw	0
  1512  0D7C  3400               	retlw	0
  1513  0D7D  3400               	retlw	0
  1514  0D7E  3400               	retlw	0
  1515  0D7F  3400               	retlw	0
  1516  0D80  3400               	retlw	0
  1517  0D81  3400               	retlw	0
  1518  0D82  3400               	retlw	0
  1519  0D83  3400               	retlw	0
  1520  0D84  3402               	retlw	2
  1521  0D85  3400               	retlw	0
  1522  0D86  3400               	retlw	0
  1523  0D87  3400               	retlw	0
  1524  0D88  3400               	retlw	0
  1525  0D89  3400               	retlw	0
  1526  0D8A  3400               	retlw	0
  1527  0D8B  3400               	retlw	0
  1528  0D8C  3401               	retlw	1
  1529  0D8D  3402               	retlw	2
  1530  0D8E  3400               	retlw	0
  1531  0D8F  3400               	retlw	0
  1532  0D90  3400               	retlw	0
  1533  0D91  3400               	retlw	0
  1534  0D92  3400               	retlw	0
  1535  0D93  3400               	retlw	0
  1536  0D94  3401               	retlw	1
  1537  0D95  3401               	retlw	1
  1538  0D96  3402               	retlw	2
  1539  0D97  3400               	retlw	0
  1540  0D98  3400               	retlw	0
  1541  0D99  3400               	retlw	0
  1542  0D9A  3400               	retlw	0
  1543  0D9B  3400               	retlw	0
  1544  0D9C  3400               	retlw	0
  1545  0D9D  3400               	retlw	0
  1546  0D9E  3400               	retlw	0
  1547  0D9F  3400               	retlw	0
  1548  0DA0  3400               	retlw	0
  1549  0DA1  3400               	retlw	0
  1550  0DA2  3400               	retlw	0
  1551  0DA3  3400               	retlw	0
  1552  0DA4  3400               	retlw	0
  1553  0DA5  3400               	retlw	0
  1554  0DA6  3400               	retlw	0
  1555  0DA7  3400               	retlw	0
  1556  0DA8  3400               	retlw	0
  1557  0DA9  3400               	retlw	0
  1558  0DAA  3400               	retlw	0
  1559  0DAB  3400               	retlw	0
  1560  0DAC  3400               	retlw	0
  1561  0DAD  3400               	retlw	0
  1562  0DAE  3400               	retlw	0
  1563  0DAF  3400               	retlw	0
  1564  0DB0  3400               	retlw	0
  1565  0DB1  3400               	retlw	0
  1566  0DB2  3400               	retlw	0
  1567  0DB3  3400               	retlw	0
  1568  0DB4  3400               	retlw	0
  1569  0DB5  3400               	retlw	0
  1570  0DB6  3400               	retlw	0
  1571  0DB7  3400               	retlw	0
  1572  0DB8  3400               	retlw	0
  1573  0DB9  3400               	retlw	0
  1574  0DBA  3400               	retlw	0
  1575  0DBB  3400               	retlw	0
  1576  0DBC  3400               	retlw	0
  1577  0DBD  3400               	retlw	0
  1578  0DBE  3400               	retlw	0
  1579  0DBF  3400               	retlw	0
  1580  0DC0  3400               	retlw	0
  1581  0DC1  3400               	retlw	0
  1582  0DC2  3400               	retlw	0
  1583  0DC3  3400               	retlw	0
  1584  0DC4  3402               	retlw	2
  1585  0DC5  3401               	retlw	1
  1586  0DC6  3402               	retlw	2
  1587  0DC7  3400               	retlw	0
  1588  0DC8  3400               	retlw	0
  1589  0DC9  3400               	retlw	0
  1590  0DCA  3400               	retlw	0
  1591  0DCB  3400               	retlw	0
  1592  0DCC  3401               	retlw	1
  1593  0DCD  3401               	retlw	1
  1594  0DCE  3400               	retlw	0
  1595  0DCF  3402               	retlw	2
  1596  0DD0  3400               	retlw	0
  1597  0DD1  3400               	retlw	0
  1598  0DD2  3400               	retlw	0
  1599  0DD3  3400               	retlw	0
  1600  0DD4  3402               	retlw	2
  1601  0DD5  3400               	retlw	0
  1602  0DD6  3402               	retlw	2
  1603  0DD7  3402               	retlw	2
  1604  0DD8  3400               	retlw	0
  1605  0DD9  3400               	retlw	0
  1606  0DDA  3400               	retlw	0
  1607  0DDB  3400               	retlw	0
  1608  0DDC  3400               	retlw	0
  1609  0DDD  3402               	retlw	2
  1610  0DDE  3402               	retlw	2
  1611  0DDF  3402               	retlw	2
  1612  0DE0  3400               	retlw	0
  1613  0DE1  3400               	retlw	0
  1614  0DE2  3400               	retlw	0
  1615  0DE3  3400               	retlw	0
  1616  0DE4  3400               	retlw	0
  1617  0DE5  3400               	retlw	0
  1618  0DE6  3400               	retlw	0
  1619  0DE7  3400               	retlw	0
  1620  0DE8  3400               	retlw	0
  1621  0DE9  3400               	retlw	0
  1622  0DEA  3400               	retlw	0
  1623  0DEB  3400               	retlw	0
  1624  0DEC  3400               	retlw	0
  1625  0DED  3400               	retlw	0
  1626  0DEE  3400               	retlw	0
  1627  0DEF  3400               	retlw	0
  1628  0DF0  3400               	retlw	0
  1629  0DF1  3400               	retlw	0
  1630  0DF2  3400               	retlw	0
  1631  0DF3  3400               	retlw	0
  1632  0DF4  3400               	retlw	0
  1633  0DF5  3400               	retlw	0
  1634  0DF6  3400               	retlw	0
  1635  0DF7  3400               	retlw	0
  1636  0DF8  3400               	retlw	0
  1637  0DF9  3400               	retlw	0
  1638  0DFA  3400               	retlw	0
  1639  0DFB  3400               	retlw	0
  1640  0DFC  3400               	retlw	0
  1641  0DFD  3400               	retlw	0
  1642  0DFE  3400               	retlw	0
  1643  0DFF  3402               	retlw	2
  1644  0E00  3402               	retlw	2
  1645  0E01  3400               	retlw	0
  1646  0E02  3400               	retlw	0
  1647  0E03  3400               	retlw	0
  1648  0E04  3400               	retlw	0
  1649  0E05  3400               	retlw	0
  1650  0E06  3402               	retlw	2
  1651  0E07  3400               	retlw	0
  1652  0E08  3401               	retlw	1
  1653  0E09  3400               	retlw	0
  1654  0E0A  3400               	retlw	0
  1655  0E0B  3402               	retlw	2
  1656  0E0C  3402               	retlw	2
  1657  0E0D  3400               	retlw	0
  1658  0E0E  3402               	retlw	2
  1659  0E0F  3401               	retlw	1
  1660  0E10  3402               	retlw	2
  1661  0E11  3400               	retlw	0
  1662  0E12  3400               	retlw	0
  1663  0E13  3401               	retlw	1
  1664  0E14  3401               	retlw	1
  1665  0E15  3400               	retlw	0
  1666  0E16  3400               	retlw	0
  1667  0E17  3400               	retlw	0
  1668  0E18  3400               	retlw	0
  1669  0E19  3400               	retlw	0
  1670  0E1A  3400               	retlw	0
  1671  0E1B  3402               	retlw	2
  1672  0E1C  3401               	retlw	1
  1673  0E1D  3401               	retlw	1
  1674  0E1E  3402               	retlw	2
  1675  0E1F  3400               	retlw	0
  1676  0E20  3400               	retlw	0
  1677  0E21  3400               	retlw	0
  1678  0E22  3400               	retlw	0
  1679  0E23  3401               	retlw	1
  1680  0E24  3402               	retlw	2
  1681  0E25  3401               	retlw	1
  1682  0E26  3402               	retlw	2
  1683  0E27  3400               	retlw	0
  1684  0E28  3400               	retlw	0
  1685  0E29  3400               	retlw	0
  1686  0E2A  3400               	retlw	0
  1687  0E2B  3400               	retlw	0
  1688  0E2C  3400               	retlw	0
  1689  0E2D  3400               	retlw	0
  1690  0E2E  3400               	retlw	0
  1691  0E2F  3400               	retlw	0
  1692  0E30  3400               	retlw	0
  1693  0E31  3400               	retlw	0
  1694  0E32  3400               	retlw	0
  1695  0E33  3400               	retlw	0
  1696  0E34  3400               	retlw	0
  1697  0E35  3400               	retlw	0
  1698  0E36  3400               	retlw	0
  1699  0E37  3400               	retlw	0
  1700  0E38  3400               	retlw	0
  1701  0E39  3400               	retlw	0
  1702  0E3A  3400               	retlw	0
  1703  0E3B  3400               	retlw	0
  1704  0E3C  3400               	retlw	0
  1705  0E3D  3401               	retlw	1
  1706  0E3E  3402               	retlw	2
  1707  0E3F  3400               	retlw	0
  1708  0E40  3400               	retlw	0
  1709  0E41  3400               	retlw	0
  1710  0E42  3400               	retlw	0
  1711  0E43  3400               	retlw	0
  1712  0E44  3400               	retlw	0
  1713  0E45  3401               	retlw	1
  1714  0E46  3402               	retlw	2
  1715  0E47  3401               	retlw	1
  1716  0E48  3402               	retlw	2
  1717  0E49  3400               	retlw	0
  1718  0E4A  3400               	retlw	0
  1719  0E4B  3400               	retlw	0
  1720  0E4C  3402               	retlw	2
  1721  0E4D  3402               	retlw	2
  1722  0E4E  3400               	retlw	0
  1723  0E4F  3401               	retlw	1
  1724  0E50  3402               	retlw	2
  1725  0E51  3400               	retlw	0
  1726  0E52  3400               	retlw	0
  1727  0E53  3400               	retlw	0
  1728  0E54  3401               	retlw	1
  1729  0E55  3401               	retlw	1
  1730  0E56  3402               	retlw	2
  1731  0E57  3402               	retlw	2
  1732  0E58  3400               	retlw	0
  1733  0E59  3400               	retlw	0
  1734  0E5A  3400               	retlw	0
  1735  0E5B  3400               	retlw	0
  1736  0E5C  3400               	retlw	0
  1737  0E5D  3400               	retlw	0
  1738  0E5E  3402               	retlw	2
  1739  0E5F  3401               	retlw	1
  1740  0E60  3400               	retlw	0
  1741  0E61  3400               	retlw	0
  1742  0E62  3400               	retlw	0
  1743  0E63  3400               	retlw	0
  1744  0E64  3400               	retlw	0
  1745  0E65  3400               	retlw	0
  1746  0E66  3400               	retlw	0
  1747  0E67  3400               	retlw	0
  1748  0E68  3400               	retlw	0
  1749  0E69  3400               	retlw	0
  1750  0E6A  3400               	retlw	0
  1751  0E6B  3400               	retlw	0
  1752  0E6C  3400               	retlw	0
  1753  0E6D  3400               	retlw	0
  1754  0E6E  3400               	retlw	0
  1755  0E6F  3400               	retlw	0
  1756  0E70  3400               	retlw	0
  1757  0E71  3400               	retlw	0
  1758  000B                     _INTCONbits	set	11
  1759  0011                     _PIR1	set	17
  1760  000C                     _PORTA	set	12
  1761  000E                     _PORTC	set	14
  1762  001B                     _PR2	set	27
  1763  001C                     _T2CONbits	set	28
  1764  001A                     _TMR2	set	26
  1765  0068                     _RB0	set	104
  1766  0069                     _RB1	set	105
  1767  006A                     _RB2	set	106
  1768  006B                     _RB3	set	107
  1769  006D                     _RB5	set	109
  1770  0070                     _RC0	set	112
  1771  0071                     _RC1	set	113
  1772  0072                     _RC2	set	114
  1773  0073                     _RC3	set	115
  1774  0074                     _RC4	set	116
  1775  0075                     _RC5	set	117
  1776  0089                     _TMR2IF	set	137
  1777  0095                     _OPTION_REGbits	set	149
  1778  0099                     _OSCCON	set	153
  1779  0091                     _PIE1	set	145
  1780  008C                     _TRISA	set	140
  1781  008D                     _TRISB	set	141
  1782  008D                     _TRISBbits	set	141
  1783  008E                     _TRISC	set	142
  1784  010C                     _LATA	set	268
  1785  010E                     _LATC	set	270
  1786  018C                     _ANSELA	set	396
  1787  018D                     _ANSELB	set	397
  1788  020D                     _WPUBbits	set	525
  1789  020E                     _WPUC	set	526
  1790                           
  1791                           	psect	stringtext
  1792  1000                     __pstringtext:	
  1793  1000                     STR_4:	
  1794  1000  3450               	retlw	80	;'P'
  1795  1001  3472               	retlw	114	;'r'
  1796  1002  3465               	retlw	101	;'e'
  1797  1003  3473               	retlw	115	;'s'
  1798  1004  3473               	retlw	115	;'s'
  1799  1005  3420               	retlw	32	;' '
  1800  1006  3462               	retlw	98	;'b'
  1801  1007  3461               	retlw	97	;'a'
  1802  1008  3463               	retlw	99	;'c'
  1803  1009  346B               	retlw	107	;'k'
  1804  100A  3420               	retlw	32	;' '
  1805  100B  3474               	retlw	116	;'t'
  1806  100C  346F               	retlw	111	;'o'
  1807  100D  3420               	retlw	32	;' '
  1808  100E  3465               	retlw	101	;'e'
  1809  100F  3478               	retlw	120	;'x'
  1810  1010  3469               	retlw	105	;'i'
  1811  1011  3474               	retlw	116	;'t'
  1812  1012  3400               	retlw	0
  1813  1013                     STR_11:	
  1814  1013  3447               	retlw	71	;'G'
  1815  1014  3461               	retlw	97	;'a'
  1816  1015  346D               	retlw	109	;'m'
  1817  1016  3465               	retlw	101	;'e'
  1818  1017  3420               	retlw	32	;' '
  1819  1018  344D               	retlw	77	;'M'
  1820  1019  3461               	retlw	97	;'a'
  1821  101A  3463               	retlw	99	;'c'
  1822  101B  3468               	retlw	104	;'h'
  1823  101C  3469               	retlw	105	;'i'
  1824  101D  346E               	retlw	110	;'n'
  1825  101E  3465               	retlw	101	;'e'
  1826  101F  3400               	retlw	0
  1827  1020                     STR_10:	
  1828  1020  3458               	retlw	88	;'X'
  1829  1021  3469               	retlw	105	;'i'
  1830  1022  3461               	retlw	97	;'a'
  1831  1023  346F               	retlw	111	;'o'
  1832  1024  3462               	retlw	98	;'b'
  1833  1025  3461               	retlw	97	;'a'
  1834  1026  3477               	retlw	119	;'w'
  1835  1027  3461               	retlw	97	;'a'
  1836  1028  346E               	retlw	110	;'n'
  1837  1029  3467               	retlw	103	;'g'
  1838  102A  3400               	retlw	0
  1839  102B                     STR_9:	
  1840  102B  3457               	retlw	87	;'W'
  1841  102C  3465               	retlw	101	;'e'
  1842  102D  346C               	retlw	108	;'l'
  1843  102E  3463               	retlw	99	;'c'
  1844  102F  346F               	retlw	111	;'o'
  1845  1030  346D               	retlw	109	;'m'
  1846  1031  3465               	retlw	101	;'e'
  1847  1032  3420               	retlw	32	;' '
  1848  1033  3474               	retlw	116	;'t'
  1849  1034  346F               	retlw	111	;'o'
  1850  1035  3400               	retlw	0
  1851  1036                     STR_5:	
  1852  1036  3457               	retlw	87	;'W'
  1853  1037  3468               	retlw	104	;'h'
  1854  1038  3469               	retlw	105	;'i'
  1855  1039  3474               	retlw	116	;'t'
  1856  103A  3465               	retlw	101	;'e'
  1857  103B  3420               	retlw	32	;' '
  1858  103C  3457               	retlw	87	;'W'
  1859  103D  3469               	retlw	105	;'i'
  1860  103E  346E               	retlw	110	;'n'
  1861  103F  3400               	retlw	0
  1862  1040                     STR_3:	
  1863  1040  3442               	retlw	66	;'B'
  1864  1041  346C               	retlw	108	;'l'
  1865  1042  3461               	retlw	97	;'a'
  1866  1043  3463               	retlw	99	;'c'
  1867  1044  346B               	retlw	107	;'k'
  1868  1045  3420               	retlw	32	;' '
  1869  1046  3457               	retlw	87	;'W'
  1870  1047  3469               	retlw	105	;'i'
  1871  1048  346E               	retlw	110	;'n'
  1872  1049  3400               	retlw	0
  1873  104A                     STR_12:	
  1874  104A  3468               	retlw	104	;'h'
  1875  104B  3465               	retlw	101	;'e'
  1876  104C  3469               	retlw	105	;'i'
  1877  104D  3462               	retlw	98	;'b'
  1878  104E  3461               	retlw	97	;'a'
  1879  104F  3469               	retlw	105	;'i'
  1880  1050  3471               	retlw	113	;'q'
  1881  1051  3469               	retlw	105	;'i'
  1882  1052  3400               	retlw	0
  1883  1053                     STR_22:	
  1884  1053  346C               	retlw	108	;'l'
  1885  1054  3465               	retlw	101	;'e'
  1886  1055  3476               	retlw	118	;'v'
  1887  1056  3465               	retlw	101	;'e'
  1888  1057  346C               	retlw	108	;'l'
  1889  1058  3420               	retlw	32	;' '
  1890  1059  3431               	retlw	49	;'1'
  1891  105A  3400               	retlw	0
  1892  105B                     STR_16:	
  1893  105B  3420               	retlw	32	;' '
  1894  105C  344D               	retlw	77	;'M'
  1895  105D  3469               	retlw	105	;'i'
  1896  105E  346E               	retlw	110	;'n'
  1897  105F  343A               	retlw	58	;':'
  1898  1060  3430               	retlw	48	;'0'
  1899  1061  3431               	retlw	49	;'1'
  1900  1062  3400               	retlw	0
  1901  1063                     STR_23:	
  1902  1063  346C               	retlw	108	;'l'
  1903  1064  3465               	retlw	101	;'e'
  1904  1065  3476               	retlw	118	;'v'
  1905  1066  3465               	retlw	101	;'e'
  1906  1067  346C               	retlw	108	;'l'
  1907  1068  3420               	retlw	32	;' '
  1908  1069  3432               	retlw	50	;'2'
  1909  106A  3400               	retlw	0
  1910  106B                     STR_17:	
  1911  106B  3420               	retlw	32	;' '
  1912  106C  344D               	retlw	77	;'M'
  1913  106D  3469               	retlw	105	;'i'
  1914  106E  346E               	retlw	110	;'n'
  1915  106F  343A               	retlw	58	;':'
  1916  1070  3430               	retlw	48	;'0'
  1917  1071  3432               	retlw	50	;'2'
  1918  1072  3400               	retlw	0
  1919  1073                     STR_24:	
  1920  1073  346C               	retlw	108	;'l'
  1921  1074  3465               	retlw	101	;'e'
  1922  1075  3476               	retlw	118	;'v'
  1923  1076  3465               	retlw	101	;'e'
  1924  1077  346C               	retlw	108	;'l'
  1925  1078  3420               	retlw	32	;' '
  1926  1079  3433               	retlw	51	;'3'
  1927  107A  3400               	retlw	0
  1928  107B                     STR_18:	
  1929  107B  3420               	retlw	32	;' '
  1930  107C  344D               	retlw	77	;'M'
  1931  107D  3469               	retlw	105	;'i'
  1932  107E  346E               	retlw	110	;'n'
  1933  107F  343A               	retlw	58	;':'
  1934  1080  3430               	retlw	48	;'0'
  1935  1081  3433               	retlw	51	;'3'
  1936  1082  3400               	retlw	0
  1937  1083                     STR_27:	
  1938  1083  346C               	retlw	108	;'l'
  1939  1084  3465               	retlw	101	;'e'
  1940  1085  3476               	retlw	118	;'v'
  1941  1086  3465               	retlw	101	;'e'
  1942  1087  346C               	retlw	108	;'l'
  1943  1088  3420               	retlw	32	;' '
  1944  1089  3434               	retlw	52	;'4'
  1945  108A  3400               	retlw	0
  1946  108B                     STR_21:	
  1947  108B  3420               	retlw	32	;' '
  1948  108C  344D               	retlw	77	;'M'
  1949  108D  3469               	retlw	105	;'i'
  1950  108E  346E               	retlw	110	;'n'
  1951  108F  343A               	retlw	58	;':'
  1952  1090  3430               	retlw	48	;'0'
  1953  1091  3434               	retlw	52	;'4'
  1954  1092  3400               	retlw	0
  1955  1093                     STR_28:	
  1956  1093  346C               	retlw	108	;'l'
  1957  1094  3465               	retlw	101	;'e'
  1958  1095  3476               	retlw	118	;'v'
  1959  1096  3465               	retlw	101	;'e'
  1960  1097  346C               	retlw	108	;'l'
  1961  1098  3420               	retlw	32	;' '
  1962  1099  3435               	retlw	53	;'5'
  1963  109A  3400               	retlw	0
  1964  109B                     STR_19:	
  1965  109B  3420               	retlw	32	;' '
  1966  109C  344D               	retlw	77	;'M'
  1967  109D  3469               	retlw	105	;'i'
  1968  109E  346E               	retlw	110	;'n'
  1969  109F  343A               	retlw	58	;':'
  1970  10A0  3430               	retlw	48	;'0'
  1971  10A1  3435               	retlw	53	;'5'
  1972  10A2  3400               	retlw	0
  1973  10A3                     STR_29:	
  1974  10A3  346C               	retlw	108	;'l'
  1975  10A4  3465               	retlw	101	;'e'
  1976  10A5  3476               	retlw	118	;'v'
  1977  10A6  3465               	retlw	101	;'e'
  1978  10A7  346C               	retlw	108	;'l'
  1979  10A8  3420               	retlw	32	;' '
  1980  10A9  3436               	retlw	54	;'6'
  1981  10AA  3400               	retlw	0
  1982  10AB                     STR_20:	
  1983  10AB  3420               	retlw	32	;' '
  1984  10AC  344D               	retlw	77	;'M'
  1985  10AD  3469               	retlw	105	;'i'
  1986  10AE  346E               	retlw	110	;'n'
  1987  10AF  343A               	retlw	58	;':'
  1988  10B0  3430               	retlw	48	;'0'
  1989  10B1  3437               	retlw	55	;'7'
  1990  10B2  3400               	retlw	0
  1991  10B3                     STR_32:	
  1992  10B3  3453               	retlw	83	;'S'
  1993  10B4  3475               	retlw	117	;'u'
  1994  10B5  3463               	retlw	99	;'c'
  1995  10B6  3463               	retlw	99	;'c'
  1996  10B7  3465               	retlw	101	;'e'
  1997  10B8  3473               	retlw	115	;'s'
  1998  10B9  3473               	retlw	115	;'s'
  1999  10BA  3400               	retlw	0
  2000  10BB                     STR_7:	
  2001  10BB  3470               	retlw	112	;'p'
  2002  10BC  3469               	retlw	105	;'i'
  2003  10BD  346E               	retlw	110	;'n'
  2004  10BE  3467               	retlw	103	;'g'
  2005  10BF  3420               	retlw	32	;' '
  2006  10C0  346A               	retlw	106	;'j'
  2007  10C1  3475               	retlw	117	;'u'
  2008  10C2  3400               	retlw	0
  2009  10C3                     STR_13:	
  2010  10C3  3477               	retlw	119	;'w'
  2011  10C4  3461               	retlw	97	;'a'
  2012  10C5  3479               	retlw	121	;'y'
  2013  10C6  346F               	retlw	111	;'o'
  2014  10C7  3475               	retlw	117	;'u'
  2015  10C8  3474               	retlw	116	;'t'
  2016  10C9  3400               	retlw	0
  2017  10CA                     STR_26:	
  2018  10CA  3420               	retlw	32	;' '
  2019  10CB  342E               	retlw	46	;'.'
  2020  10CC  342E               	retlw	46	;'.'
  2021  10CD  342E               	retlw	46	;'.'
  2022  10CE  3400               	retlw	0
  2023  10CF                     STR_1:	
  2024  10CF  3420               	retlw	32	;' '
  2025  10D0  3400               	retlw	0
  2026  10CF                     
  2027                           ; #config settings
  2028  0000                     
  2029                           	psect	cinit
  2030  0024                     start_initialization:	
  2031  0024                     __initialization:		;BIGRAM
  2032                           
  2033                           ; Initialize objects allocated to BIGRAM
  2034  0024  30F2               	movlw	low __pidataBIGRAM
  2035  0025  0084               	movwf	4
  2036  0026  308C               	movlw	(high __pidataBIGRAM)| (0+128)
  2037  0027  0085               	movwf	5
  2038  0028  3070               	movlw	low (0+8816)
  2039  0029  0086               	movwf	6
  2040  002A  3022               	movlw	high (0+8816)
  2041  002B  0087               	movwf	7
  2042  002C  3001               	movlw	1
  2043  002D  00FF               	movwf	btemp+1
  2044  002E  3080               	movlw	128
  2045  002F  319F  271A  3180   	fcall	init_ram
  2046                           
  2047                           ; Initialize objects allocated to BANK1
  2048  0032  3004               	movlw	low __pidataBANK1
  2049  0033  0084               	movwf	4
  2050  0034  309F               	movlw	(high __pidataBANK1)| (0+128)
  2051  0035  0085               	movwf	5
  2052  0036  30E6               	movlw	low __pdataBANK1
  2053  0037  0086               	movwf	6
  2054  0038  3000               	movlw	high __pdataBANK1
  2055  0039  0087               	movwf	7
  2056  003A  3000               	movlw	0
  2057  003B  00FF               	movwf	btemp+1
  2058  003C  300A               	movlw	10
  2059  003D  319F  271A  3180   	fcall	init_ram
  2060                           
  2061                           ; Initialize objects allocated to BANK2
  2062  0040  308B               	movlw	low __pidataBANK2
  2063  0041  0084               	movwf	4
  2064  0042  3093               	movlw	(high __pidataBANK2)| (0+128)
  2065  0043  0085               	movwf	5
  2066  0044  3020               	movlw	low __pdataBANK2
  2067  0045  0086               	movwf	6
  2068  0046  3001               	movlw	high __pdataBANK2
  2069  0047  0087               	movwf	7
  2070  0048  3000               	movlw	0
  2071  0049  00FF               	movwf	btemp+1
  2072  004A  3046               	movlw	70
  2073  004B  319F  271A  3180   	fcall	init_ram
  2074                           
  2075                           ; Initialize objects allocated to BANK3
  2076  004E  307E               	movlw	low __pidataBANK3
  2077  004F  0084               	movwf	4
  2078  0050  3092               	movlw	(high __pidataBANK3)| (0+128)
  2079  0051  0085               	movwf	5
  2080  0052  30A0               	movlw	low __pdataBANK3
  2081  0053  0086               	movwf	6
  2082  0054  3001               	movlw	high __pdataBANK3
  2083  0055  0087               	movwf	7
  2084  0056  3000               	movlw	0
  2085  0057  00FF               	movwf	btemp+1
  2086  0058  3040               	movlw	64
  2087  0059  319F  271A  3180   	fcall	init_ram
  2088                           
  2089                           ; Clear objects allocated to BANK0
  2090  005C  01E4               	clrf	__pbssBANK0& (0+127)
  2091  005D  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  2092  005E  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  2093  005F  01E7               	clrf	(__pbssBANK0+3)& (0+127)
  2094  0060  01E8               	clrf	(__pbssBANK0+4)& (0+127)
  2095  0061  01E9               	clrf	(__pbssBANK0+5)& (0+127)
  2096  0062  01EA               	clrf	(__pbssBANK0+6)& (0+127)
  2097  0063  01EB               	clrf	(__pbssBANK0+7)& (0+127)
  2098                           
  2099                           ; Clear objects allocated to BANK1
  2100  0064  30A0               	movlw	low __pbssBANK1
  2101  0065  0084               	movwf	4
  2102  0066  3000               	movlw	high __pbssBANK1
  2103  0067  0085               	movwf	5
  2104  0068  3046               	movlw	70
  2105  0069  00FE               	movwf	btemp
  2106  006A  3000               	movlw	0
  2107  006B  00FF               	movwf	btemp+1
  2108  006C  319F  270E  3180   	fcall	clear_ram0
  2109                           
  2110                           ; Clear objects allocated to BANK2
  2111  006F  0022               	movlb	2	; select bank2
  2112  0070  01E6               	clrf	__pbssBANK2& (0+127)
  2113  0071  01E7               	clrf	(__pbssBANK2+1)& (0+127)
  2114  0072  01E8               	clrf	(__pbssBANK2+2)& (0+127)
  2115  0073  01E9               	clrf	(__pbssBANK2+3)& (0+127)
  2116  0074  01EA               	clrf	(__pbssBANK2+4)& (0+127)
  2117  0075  01EB               	clrf	(__pbssBANK2+5)& (0+127)
  2118  0076  01EC               	clrf	(__pbssBANK2+6)& (0+127)
  2119  0077  01ED               	clrf	(__pbssBANK2+7)& (0+127)
  2120                           
  2121                           ; Clear objects allocated to BANK4
  2122  0078  3020               	movlw	low __pbssBANK4
  2123  0079  0084               	movwf	4
  2124  007A  3002               	movlw	high __pbssBANK4
  2125  007B  0085               	movwf	5
  2126  007C  3040               	movlw	64
  2127  007D  00FE               	movwf	btemp
  2128  007E  3000               	movlw	0
  2129  007F  00FF               	movwf	btemp+1
  2130  0080  319F  270E         	fcall	clear_ram0
  2131  0082                     end_of_initialization:	
  2132                           ;End of C runtime variable initialization code
  2133                           
  2134  0082                     __end_of__initialization:	
  2135  0082  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2136  0083  0020               	movlb	0
  2137  0084  319F  2F52         	ljmp	_main	;jump to C main() function
  2138                           
  2139                           	psect	bssBANK0
  2140  0064                     __pbssBANK0:	
  2141  0064                     _temp_cursor:	
  2142  0064                     	ds	3
  2143  0067                     _arrow:	
  2144  0067                     	ds	1
  2145  0068                     _black_num:	
  2146  0068                     	ds	1
  2147  0069                     _key:	
  2148  0069                     	ds	1
  2149  006A                     _level_num:	
  2150  006A                     	ds	1
  2151  006B                     _white_num:	
  2152  006B                     	ds	1
  2153                           
  2154                           	psect	bssBANK1
  2155  00A0                     __pbssBANK1:	
  2156  00A0                     _empty_num:	
  2157  00A0                     	ds	1
  2158  00A1                     _player:	
  2159  00A1                     	ds	1
  2160  00A2                     _result:	
  2161  00A2                     	ds	1
  2162  00A3                     _start:	
  2163  00A3                     	ds	1
  2164  00A4                     _temp_key:	
  2165  00A4                     	ds	1
  2166  00A5                     _total_step:	
  2167  00A5                     	ds	1
  2168  00A6                     _table:	
  2169  00A6                     	ds	64
  2170                           
  2171                           	psect	dataBANK1
  2172  00E6                     __pdataBANK1:	
  2173  00E6                     Display_Char@F6426:	
  2174  00E6                     	ds	4
  2175  00EA                     Display_Chars@F6420:	
  2176  00EA                     	ds	4
  2177  00EE                     get_Y_Addr@F6431:	
  2178  00EE                     	ds	2
  2179                           
  2180                           	psect	bssBANK2
  2181  0166                     __pbssBANK2:	
  2182  0166                     _empty:	
  2183  0166                     	ds	8
  2184                           
  2185                           	psect	dataBANK2
  2186  0120                     __pdataBANK2:	
  2187  0120                     _display_black:	
  2188  0120                     	ds	10
  2189  012A                     _display_step:	
  2190  012A                     	ds	10
  2191  0134                     _display_white:	
  2192  0134                     	ds	10
  2193  013E                     _choose_empty:	
  2194  013E                     	ds	8
  2195  0146                     _choose_first:	
  2196  0146                     	ds	8
  2197  014E                     _choose_second:	
  2198  014E                     	ds	8
  2199  0156                     _first_chess:	
  2200  0156                     	ds	8
  2201  015E                     _second_chess:	
  2202  015E                     	ds	8
  2203                           
  2204                           	psect	dataBANK3
  2205  01A0                     __pdataBANK3:	
  2206  01A0                     _towards:	
  2207  01A0                     	ds	16
  2208  01B0                     _screen:	
  2209  01B0                     	ds	48
  2210                           
  2211                           	psect	bssBANK4
  2212  0220                     __pbssBANK4:	
  2213  0220                     _last_table:	
  2214  0220                     	ds	64
  2215                           
  2216                           	psect	inittext
  2217  1F1A                     init_ram:	
  2218  1F1A  00FE               	movwf	126
  2219  1F1B                     initloop:	
  2220  1F1B  0012               	moviw fsr0++
  2221  1F1C  001E               	movwi fsr1++
  2222  1F1D  3001               	movlw	1
  2223  1F1E  02FE               	subwf	126,f
  2224  1F1F  3000               	movlw	0
  2225  1F20  3BFF               	subwfb	127,f
  2226  1F21  087F               	movf	127,w
  2227  1F22  047E               	iorwf	126,w
  2228  1F23  1903               	btfsc	3,2
  2229  1F24  3400               	retlw	0
  2230  1F25  2F1B               	goto	initloop
  2231                           
  2232                           	psect	clrtext
  2233  1F0E                     clear_ram0:	
  2234                           ;	Called with FSR0 containing the base address, and
  2235                           ;	btemp/btemp+1 has the size to clear
  2236                           
  2237  1F0E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2238  1F0F                     clrloop0:	
  2239  1F0F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2240  1F10  3101               	addfsr 0,1
  2241  1F11  3001               	movlw	1
  2242  1F12  02FE               	subwf	126,f
  2243  1F13  3000               	movlw	0
  2244  1F14  3BFF               	subwfb	127,f
  2245  1F15  087F               	movf	127,w
  2246  1F16  047E               	iorwf	126,w
  2247  1F17  1903               	btfsc	3,2
  2248  1F18  3400               	retlw	0	;all done for this memory range, return
  2249  1F19  2F0F               	goto	clrloop0	;have we reached the end yet?
  2250                           
  2251                           	psect	cstackBANK3
  2252  01E0                     __pcstackBANK3:	
  2253  01E0                     ?_main:	
  2254  01E0                     main@argc:	
  2255                           ; 2 bytes @ 0x0
  2256                           
  2257                           
  2258                           ; 2 bytes @ 0x0
  2259  01E0                     	ds	2
  2260  01E2                     main@argv:	
  2261                           
  2262                           ; 2 bytes @ 0x2
  2263  01E2                     	ds	2
  2264                           
  2265                           	psect	cstackCOMMON
  2266  0070                     __pcstackCOMMON:	
  2267  0070                     ?_init_environment:	
  2268  0070                     ?_set_menu:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271  0070                     ?_choose_level2:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274  0070                     ?_init_wayout:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277  0070                     ?_wayout:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280  0070                     ?_draw_heibaiqi_right:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283  0070                     ?_init_heibaiqi:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286  0070                     ?_judge_result:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289  0070                     ?_heibaiqi:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292  0070                     ?_init_cfg:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295  0070                     ?_start_video:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298  0070                     ?_read_key:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301  0070                     ??_read_key:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304  0070                     ?_get_key:	
  2305                           ; 1 bytes @ 0x0
  2306                           
  2307  0070                     ?_run_game:	
  2308                           ; 1 bytes @ 0x0
  2309                           
  2310  0070                     ?_ISR:	
  2311                           ; 1 bytes @ 0x0
  2312                           
  2313  0070                     ?_check_if_complete:	
  2314                           ; 1 bytes @ 0x0
  2315                           
  2316  0070                     ?_wayout_display1:	
  2317                           ; 1 bytes @ 0x0
  2318                           
  2319  0070                     ?_wayout_display2:	
  2320                           ; 1 bytes @ 0x0
  2321                           
  2322  0070                     ?i1___wmul:	
  2323                           ; 1 bytes @ 0x0
  2324                           
  2325  0070                     check_Pos@x:	
  2326                           ; 2 bytes @ 0x0
  2327                           
  2328  0070                     i1___wmul@multiplier:	
  2329                           ; 1 bytes @ 0x0
  2330                           
  2331                           
  2332                           ; 2 bytes @ 0x0
  2333  0070                     	ds	2
  2334  0072                     i1___wmul@multiplicand:	
  2335                           
  2336                           ; 2 bytes @ 0x2
  2337  0072                     	ds	2
  2338  0074                     ??i1___wmul:	
  2339  0074                     i1___wmul@product:	
  2340                           ; 1 bytes @ 0x4
  2341                           
  2342                           
  2343                           ; 2 bytes @ 0x4
  2344  0074                     	ds	2
  2345  0076                     ?i1_delay_100us:	
  2346  0076                     i1delay_100us@cnt:	
  2347                           ; 1 bytes @ 0x6
  2348                           
  2349                           
  2350                           ; 2 bytes @ 0x6
  2351  0076                     	ds	2
  2352  0078                     ??i1_delay_100us:	
  2353                           
  2354                           ; 1 bytes @ 0x8
  2355  0078                     	ds	1
  2356  0079                     i1delay_100us@i:	
  2357                           
  2358                           ; 2 bytes @ 0x9
  2359  0079                     	ds	2
  2360  007B                     i1delay_100us@h:	
  2361                           
  2362                           ; 2 bytes @ 0xB
  2363  007B                     	ds	2
  2364  007D                     ??_get_key:	
  2365                           
  2366                           ; 1 bytes @ 0xD
  2367  007D                     	ds	1
  2368                           
  2369                           	psect	cstackBANK0
  2370  0020                     __pcstackBANK0:	
  2371  0020                     get_key@last_key:	
  2372                           
  2373                           ; 1 bytes @ 0x0
  2374  0020                     	ds	1
  2375  0021                     ??_ISR:	
  2376                           
  2377                           ; 1 bytes @ 0x1
  2378  0021                     	ds	2
  2379  0023                     ?_memset:	
  2380  0023                     ?_get_X_Addr:	
  2381                           ; 1 bytes @ 0x3
  2382                           
  2383  0023                     ?_readFromTable:	
  2384                           ; 1 bytes @ 0x3
  2385                           
  2386  0023                     ?_if_in_table:	
  2387                           ; 1 bytes @ 0x3
  2388                           
  2389  0023                     ??_check_if_complete:	
  2390                           ; 1 bytes @ 0x3
  2391                           
  2392  0023                     ?___bmul:	
  2393                           ; 1 bytes @ 0x3
  2394                           
  2395  0023                     ?_check_Pos:	
  2396                           ; 1 bytes @ 0x3
  2397                           
  2398  0023                     ?___wmul:	
  2399                           ; 2 bytes @ 0x3
  2400                           
  2401  0023                     ?___awdiv:	
  2402                           ; 2 bytes @ 0x3
  2403                           
  2404  0023                     ?___awmod:	
  2405                           ; 2 bytes @ 0x3
  2406                           
  2407  0023                     get_X_Addr@y:	
  2408                           ; 2 bytes @ 0x3
  2409                           
  2410  0023                     check_Pos@y:	
  2411                           ; 1 bytes @ 0x3
  2412                           
  2413  0023                     readFromTable@y:	
  2414                           ; 1 bytes @ 0x3
  2415                           
  2416  0023                     ___bmul@multiplicand:	
  2417                           ; 1 bytes @ 0x3
  2418                           
  2419  0023                     if_in_table@i:	
  2420                           ; 1 bytes @ 0x3
  2421                           
  2422  0023                     ___wmul@multiplier:	
  2423                           ; 2 bytes @ 0x3
  2424                           
  2425  0023                     ___awdiv@divisor:	
  2426                           ; 2 bytes @ 0x3
  2427                           
  2428  0023                     ___awmod@divisor:	
  2429                           ; 2 bytes @ 0x3
  2430                           
  2431  0023                     memset@c:	
  2432                           ; 2 bytes @ 0x3
  2433                           
  2434                           
  2435                           ; 2 bytes @ 0x3
  2436  0023                     	ds	1
  2437  0024                     ??_get_X_Addr:	
  2438  0024                     ??___bmul:	
  2439                           ; 1 bytes @ 0x4
  2440                           
  2441  0024                     readFromTable@offset:	
  2442                           ; 1 bytes @ 0x4
  2443                           
  2444                           
  2445                           ; 2 bytes @ 0x4
  2446  0024                     	ds	1
  2447  0025                     get_X_Addr@addr:	
  2448  0025                     ___bmul@product:	
  2449                           ; 1 bytes @ 0x5
  2450                           
  2451  0025                     if_in_table@j:	
  2452                           ; 1 bytes @ 0x5
  2453                           
  2454  0025                     ___wmul@multiplicand:	
  2455                           ; 2 bytes @ 0x5
  2456                           
  2457  0025                     ___awdiv@dividend:	
  2458                           ; 2 bytes @ 0x5
  2459                           
  2460  0025                     ___awmod@dividend:	
  2461                           ; 2 bytes @ 0x5
  2462                           
  2463  0025                     memset@n:	
  2464                           ; 2 bytes @ 0x5
  2465                           
  2466                           
  2467                           ; 2 bytes @ 0x5
  2468  0025                     	ds	1
  2469  0026                     ??_check_Pos:	
  2470  0026                     ??_readFromTable:	
  2471                           ; 1 bytes @ 0x6
  2472                           
  2473  0026                     get_X_Addr@x:	
  2474                           ; 1 bytes @ 0x6
  2475                           
  2476  0026                     check_if_complete@i:	
  2477                           ; 1 bytes @ 0x6
  2478                           
  2479  0026                     ___bmul@multiplier:	
  2480                           ; 1 bytes @ 0x6
  2481                           
  2482  0026                     check_Pos@result:	
  2483                           ; 1 bytes @ 0x6
  2484                           
  2485                           
  2486                           ; 2 bytes @ 0x6
  2487  0026                     	ds	1
  2488  0027                     ??_memset:	
  2489  0027                     ??_if_in_table:	
  2490                           ; 1 bytes @ 0x7
  2491                           
  2492  0027                     ??___wmul:	
  2493                           ; 1 bytes @ 0x7
  2494                           
  2495  0027                     ??___awdiv:	
  2496                           ; 1 bytes @ 0x7
  2497                           
  2498  0027                     ??___awmod:	
  2499                           ; 1 bytes @ 0x7
  2500                           
  2501  0027                     check_if_complete@j:	
  2502                           ; 1 bytes @ 0x7
  2503                           
  2504  0027                     ___wmul@product:	
  2505                           ; 1 bytes @ 0x7
  2506                           
  2507                           
  2508                           ; 2 bytes @ 0x7
  2509  0027                     	ds	1
  2510  0028                     ___awdiv@counter:	
  2511  0028                     ___awmod@counter:	
  2512                           ; 1 bytes @ 0x8
  2513                           
  2514  0028                     memset@p:	
  2515                           ; 1 bytes @ 0x8
  2516                           
  2517                           
  2518                           ; 1 bytes @ 0x8
  2519  0028                     	ds	1
  2520  0029                     ?_delay_100us:	
  2521  0029                     ?_check_point:	
  2522                           ; 1 bytes @ 0x9
  2523                           
  2524  0029                     check_point@col:	
  2525                           ; 1 bytes @ 0x9
  2526                           
  2527  0029                     ___awdiv@sign:	
  2528                           ; 1 bytes @ 0x9
  2529                           
  2530  0029                     ___awmod@sign:	
  2531                           ; 1 bytes @ 0x9
  2532                           
  2533  0029                     memset@p1:	
  2534                           ; 1 bytes @ 0x9
  2535                           
  2536  0029                     delay_100us@cnt:	
  2537                           ; 1 bytes @ 0x9
  2538                           
  2539                           
  2540                           ; 2 bytes @ 0x9
  2541  0029                     	ds	1
  2542  002A                     check_point@ply:	
  2543  002A                     ___awdiv@quotient:	
  2544                           ; 1 bytes @ 0xA
  2545                           
  2546                           
  2547                           ; 2 bytes @ 0xA
  2548  002A                     	ds	1
  2549  002B                     ??_delay_100us:	
  2550  002B                     ??_check_point:	
  2551                           ; 1 bytes @ 0xB
  2552                           
  2553                           
  2554                           ; 1 bytes @ 0xB
  2555  002B                     	ds	1
  2556  002C                     ?_int2string:	
  2557  002C                     ?_get_Y_Addr:	
  2558                           ; 1 bytes @ 0xC
  2559                           
  2560  002C                     int2string@begin:	
  2561                           ; 1 bytes @ 0xC
  2562                           
  2563  002C                     get_Y_Addr@y:	
  2564                           ; 1 bytes @ 0xC
  2565                           
  2566  002C                     delay_100us@i:	
  2567                           ; 1 bytes @ 0xC
  2568                           
  2569                           
  2570                           ; 2 bytes @ 0xC
  2571  002C                     	ds	1
  2572  002D                     ??_get_Y_Addr:	
  2573  002D                     int2string@num:	
  2574                           ; 1 bytes @ 0xD
  2575                           
  2576  002D                     readFromTable@x:	
  2577                           ; 1 bytes @ 0xD
  2578                           
  2579                           
  2580                           ; 1 bytes @ 0xD
  2581  002D                     	ds	1
  2582  002E                     ??_int2string:	
  2583  002E                     delay_100us@h:	
  2584                           ; 1 bytes @ 0xE
  2585                           
  2586                           
  2587                           ; 2 bytes @ 0xE
  2588  002E                     	ds	1
  2589  002F                     get_Y_Addr@addresses:	
  2590                           
  2591                           ; 2 bytes @ 0xF
  2592  002F                     	ds	1
  2593  0030                     ?_Write_Com:	
  2594  0030                     ?_Write_Data:	
  2595                           ; 1 bytes @ 0x10
  2596                           
  2597  0030                     Write_Data@dat:	
  2598                           ; 1 bytes @ 0x10
  2599                           
  2600  0030                     Write_Com@com:	
  2601                           ; 2 bytes @ 0x10
  2602                           
  2603                           
  2604                           ; 2 bytes @ 0x10
  2605  0030                     	ds	1
  2606  0031                     get_Y_Addr@x:	
  2607                           
  2608                           ; 1 bytes @ 0x11
  2609  0031                     	ds	1
  2610  0032                     ??_Write_Com:	
  2611  0032                     ??_Write_Data:	
  2612                           ; 1 bytes @ 0x12
  2613                           
  2614  0032                     ?_Display_Chars:	
  2615                           ; 1 bytes @ 0x12
  2616                           
  2617  0032                     ?_Clear_Screen:	
  2618                           ; 1 bytes @ 0x12
  2619                           
  2620  0032                     ?_Display_Char:	
  2621                           ; 1 bytes @ 0x12
  2622                           
  2623  0032                     ??_init_cfg:	
  2624                           ; 1 bytes @ 0x12
  2625                           
  2626  0032                     Display_Char@data:	
  2627                           ; 1 bytes @ 0x12
  2628                           
  2629  0032                     int2string@i:	
  2630                           ; 1 bytes @ 0x12
  2631                           
  2632  0032                     Clear_Screen@value:	
  2633                           ; 2 bytes @ 0x12
  2634                           
  2635  0032                     Display_Chars@string:	
  2636                           ; 2 bytes @ 0x12
  2637                           
  2638  0032                     _get_Y_Addr$456:	
  2639                           ; 2 bytes @ 0x12
  2640                           
  2641                           
  2642                           ; 2 bytes @ 0x12
  2643  0032                     	ds	1
  2644  0033                     Display_Char@y:	
  2645                           
  2646                           ; 1 bytes @ 0x13
  2647  0033                     	ds	1
  2648  0034                     ??_Clear_Screen:	
  2649  0034                     ??_Display_Char:	
  2650                           ; 1 bytes @ 0x14
  2651                           
  2652  0034                     check_point@result:	
  2653                           ; 1 bytes @ 0x14
  2654                           
  2655  0034                     int2string@a:	
  2656                           ; 1 bytes @ 0x14
  2657                           
  2658  0034                     Display_Chars@y:	
  2659                           ; 1 bytes @ 0x14
  2660                           
  2661  0034                     _get_Y_Addr$457:	
  2662                           ; 1 bytes @ 0x14
  2663                           
  2664                           
  2665                           ; 2 bytes @ 0x14
  2666  0034                     	ds	1
  2667  0035                     ??_Display_Chars:	
  2668  0035                     check_point@oppo:	
  2669                           ; 1 bytes @ 0x15
  2670                           
  2671  0035                     Clear_Screen@j:	
  2672                           ; 1 bytes @ 0x15
  2673                           
  2674                           
  2675                           ; 1 bytes @ 0x15
  2676  0035                     	ds	1
  2677  0036                     check_point@temp:	
  2678  0036                     Clear_Screen@i:	
  2679                           ; 1 bytes @ 0x16
  2680                           
  2681  0036                     get_Y_Addr@init_Addr:	
  2682                           ; 1 bytes @ 0x16
  2683                           
  2684  0036                     Display_Char@addresses:	
  2685                           ; 1 bytes @ 0x16
  2686                           
  2687                           
  2688                           ; 4 bytes @ 0x16
  2689  0036                     	ds	1
  2690  0037                     ??_init_environment:	
  2691  0037                     check_point@row:	
  2692                           ; 1 bytes @ 0x17
  2693                           
  2694  0037                     get_Y_Addr@addr:	
  2695                           ; 1 bytes @ 0x17
  2696                           
  2697  0037                     Display_Chars@addresses:	
  2698                           ; 1 bytes @ 0x17
  2699                           
  2700                           
  2701                           ; 4 bytes @ 0x17
  2702  0037                     	ds	1
  2703  0038                     check_point@add_row:	
  2704  0038                     get_Y_Addr@addr_Offset:	
  2705                           ; 1 bytes @ 0x18
  2706                           
  2707                           
  2708                           ; 1 bytes @ 0x18
  2709  0038                     	ds	1
  2710  0039                     ?_set_point:	
  2711  0039                     check_point@add_col:	
  2712                           ; 1 bytes @ 0x19
  2713                           
  2714  0039                     set_point@point_y:	
  2715                           ; 1 bytes @ 0x19
  2716                           
  2717                           
  2718                           ; 1 bytes @ 0x19
  2719  0039                     	ds	1
  2720  003A                     check_point@j:	
  2721  003A                     set_point@value:	
  2722                           ; 1 bytes @ 0x1A
  2723                           
  2724  003A                     Display_Char@i:	
  2725                           ; 1 bytes @ 0x1A
  2726                           
  2727                           
  2728                           ; 2 bytes @ 0x1A
  2729  003A                     	ds	1
  2730  003B                     ??_set_point:	
  2731  003B                     check_point@flag:	
  2732                           ; 1 bytes @ 0x1B
  2733                           
  2734  003B                     Display_Chars@i:	
  2735                           ; 1 bytes @ 0x1B
  2736                           
  2737                           
  2738                           ; 2 bytes @ 0x1B
  2739  003B                     	ds	1
  2740  003C                     check_point@i:	
  2741  003C                     Display_Char@x:	
  2742                           ; 1 bytes @ 0x1C
  2743                           
  2744                           
  2745                           ; 1 bytes @ 0x1C
  2746  003C                     	ds	1
  2747  003D                     ??_judge_result:	
  2748  003D                     Display_Chars@x:	
  2749                           ; 1 bytes @ 0x1D
  2750                           
  2751                           
  2752                           ; 1 bytes @ 0x1D
  2753  003D                     	ds	1
  2754  003E                     ??_set_menu:	
  2755  003E                     ??_draw_heibaiqi_right:	
  2756                           ; 1 bytes @ 0x1E
  2757                           
  2758  003E                     ??_start_video:	
  2759                           ; 1 bytes @ 0x1E
  2760                           
  2761  003E                     ?_draw_wayout_right:	
  2762                           ; 1 bytes @ 0x1E
  2763                           
  2764  003E                     ??_wayout_display1:	
  2765                           ; 1 bytes @ 0x1E
  2766                           
  2767  003E                     ??_wayout_display2:	
  2768                           ; 1 bytes @ 0x1E
  2769                           
  2770  003E                     set_point@is_Offset_Pos:	
  2771                           ; 1 bytes @ 0x1E
  2772                           
  2773  003E                     draw_wayout_right@level:	
  2774                           ; 2 bytes @ 0x1E
  2775                           
  2776                           
  2777                           ; 2 bytes @ 0x1E
  2778  003E                     	ds	1
  2779  003F                     ??_choose_level2:	
  2780                           
  2781                           ; 1 bytes @ 0x1F
  2782  003F                     	ds	1
  2783  0040                     ??_draw_wayout_right:	
  2784  0040                     draw_heibaiqi_right@j:	
  2785                           ; 1 bytes @ 0x20
  2786                           
  2787  0040                     judge_result@player:	
  2788                           ; 1 bytes @ 0x20
  2789                           
  2790  0040                     set_point@init_X_Addr:	
  2791                           ; 1 bytes @ 0x20
  2792                           
  2793                           
  2794                           ; 1 bytes @ 0x20
  2795  0040                     	ds	1
  2796  0041                     draw_heibaiqi_right@i:	
  2797  0041                     judge_result@result:	
  2798                           ; 1 bytes @ 0x21
  2799                           
  2800  0041                     set_point@init_Y_Addr:	
  2801                           ; 1 bytes @ 0x21
  2802                           
  2803  0041                     choose_level2@max_level3:	
  2804                           ; 1 bytes @ 0x21
  2805                           
  2806                           
  2807                           ; 1 bytes @ 0x21
  2808  0041                     	ds	1
  2809  0042                     judge_result@row:	
  2810  0042                     set_point@point_x:	
  2811                           ; 1 bytes @ 0x22
  2812                           
  2813  0042                     draw_wayout_right@j:	
  2814                           ; 1 bytes @ 0x22
  2815                           
  2816  0042                     choose_level2@step:	
  2817                           ; 1 bytes @ 0x22
  2818                           
  2819                           
  2820                           ; 1 bytes @ 0x22
  2821  0042                     	ds	1
  2822  0043                     judge_result@col:	
  2823  0043                     draw_wayout_right@i:	
  2824                           ; 1 bytes @ 0x23
  2825                           
  2826  0043                     set_point@i:	
  2827                           ; 1 bytes @ 0x23
  2828                           
  2829  0043                     choose_level2@tag:	
  2830                           ; 2 bytes @ 0x23
  2831                           
  2832                           
  2833                           ; 2 bytes @ 0x23
  2834  0043                     	ds	2
  2835  0045                     ??_init_wayout:	
  2836  0045                     ??_init_heibaiqi:	
  2837                           ; 1 bytes @ 0x25
  2838                           
  2839  0045                     ?_choose_point:	
  2840                           ; 1 bytes @ 0x25
  2841                           
  2842  0045                     ?_change_near:	
  2843                           ; 1 bytes @ 0x25
  2844                           
  2845  0045                     choose_point@col:	
  2846                           ; 1 bytes @ 0x25
  2847                           
  2848  0045                     change_near@k:	
  2849                           ; 1 bytes @ 0x25
  2850                           
  2851  0045                     choose_level2@offset:	
  2852                           ; 2 bytes @ 0x25
  2853                           
  2854                           
  2855                           ; 2 bytes @ 0x25
  2856  0045                     	ds	1
  2857  0046                     choose_point@ply:	
  2858                           
  2859                           ; 1 bytes @ 0x26
  2860  0046                     	ds	1
  2861  0047                     ??_choose_point:	
  2862  0047                     change_near@l:	
  2863                           ; 1 bytes @ 0x27
  2864                           
  2865                           
  2866                           ; 2 bytes @ 0x27
  2867  0047                     	ds	2
  2868  0049                     ??_change_near:	
  2869                           
  2870                           ; 1 bytes @ 0x29
  2871  0049                     	ds	7
  2872  0050                     ?_choose:	
  2873  0050                     choose@i:	
  2874                           ; 1 bytes @ 0x30
  2875                           
  2876                           
  2877                           ; 2 bytes @ 0x30
  2878  0050                     	ds	1
  2879  0051                     choose_point@result:	
  2880                           
  2881                           ; 1 bytes @ 0x31
  2882  0051                     	ds	1
  2883  0052                     choose_point@temp:	
  2884  0052                     choose@j:	
  2885                           ; 1 bytes @ 0x32
  2886                           
  2887                           
  2888                           ; 2 bytes @ 0x32
  2889  0052                     	ds	1
  2890  0053                     choose_point@right:	
  2891                           
  2892                           ; 1 bytes @ 0x33
  2893  0053                     	ds	1
  2894  0054                     ??_choose:	
  2895  0054                     choose_point@up:	
  2896                           ; 1 bytes @ 0x34
  2897                           
  2898                           
  2899                           ; 1 bytes @ 0x34
  2900  0054                     	ds	1
  2901  0055                     choose_point@i:	
  2902  0055                     init_wayout@level_num:	
  2903                           ; 1 bytes @ 0x35
  2904                           
  2905                           
  2906                           ; 1 bytes @ 0x35
  2907  0055                     	ds	1
  2908  0056                     choose_point@row:	
  2909  0056                     init_wayout@i:	
  2910                           ; 1 bytes @ 0x36
  2911                           
  2912                           
  2913                           ; 2 bytes @ 0x36
  2914  0056                     	ds	1
  2915  0057                     choose_point@j:	
  2916                           
  2917                           ; 1 bytes @ 0x37
  2918  0057                     	ds	1
  2919  0058                     ??_heibaiqi:	
  2920  0058                     init_wayout@j:	
  2921                           ; 1 bytes @ 0x38
  2922                           
  2923                           
  2924                           ; 2 bytes @ 0x38
  2925  0058                     	ds	3
  2926  005B                     ??_wayout:	
  2927                           
  2928                           ; 1 bytes @ 0x3B
  2929  005B                     	ds	7
  2930  0062                     ??_run_game:	
  2931                           
  2932                           ; 1 bytes @ 0x42
  2933  0062                     	ds	2
  2934  0064                     ??_main:	
  2935                           
  2936                           	psect	maintext
  2937  1F52                     __pmaintext:	
  2938                           ; 1 bytes @ 0x44
  2939 ;;
  2940 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2941 ;;
  2942 ;; *************** function _main *****************
  2943 ;; Defined at:
  2944 ;;		line 33 in file "main.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  argc            2    0[BANK3 ] int 
  2947 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;		None
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  2    0[BANK3 ] int 
  2952 ;; Registers used:
  2953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2954 ;; Tracked objects:
  2955 ;;		On entry : B1F/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2959 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  2960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2962 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  2963 ;;Total ram usage:        4 bytes
  2964 ;; Hardware stack levels required when called:   12
  2965 ;; This function calls:
  2966 ;;		_init_cfg
  2967 ;;		_init_environment
  2968 ;;		_run_game
  2969 ;;		_set_menu
  2970 ;;		_start_video
  2971 ;; This function is called by:
  2972 ;;		Startup code after reset
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _main
  2978  1F52                     _main:	
  2979                           
  2980                           ;main.c: 34: init_cfg();
  2981                           
  2982                           ;incstack = 0
  2983                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2984  1F52  3195  25DE  319F   	fcall	_init_cfg
  2985                           
  2986                           ;main.c: 39: init_environment();
  2987  1F55  319F  2774  319F   	fcall	_init_environment
  2988                           
  2989                           ;main.c: 40: start_video();
  2990  1F58  3191  2166  319F   	fcall	_start_video
  2991                           
  2992                           ;main.c: 41: set_menu();
  2993  1F5B  3191  211A  319F   	fcall	_set_menu
  2994  1F5E                     l4279:	
  2995                           ;main.c: 42: while(1)
  2996                           
  2997                           
  2998                           ;main.c: 43: {
  2999                           ;main.c: 44: run_game();
  3000  1F5E  3196  264D  319F   	fcall	_run_game
  3001  1F61  2F5E               	goto	l4279
  3002  1F62                     __end_of_main:	
  3003                           ;main.c: 49: }
  3004                           ;main.c: 50: return (0);
  3005                           ;	Return value of _main is never used
  3006                           
  3007                           
  3008                           	psect	text1
  3009  1166                     __ptext1:	
  3010 ;; *************** function _start_video *****************
  3011 ;; Defined at:
  3012 ;;		line 300 in file "func.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;		None
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3030 ;;Total ram usage:        0 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    8
  3033 ;; This function calls:
  3034 ;;		_Clear_Screen
  3035 ;;		_Display_Chars
  3036 ;; This function is called by:
  3037 ;;		_main
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           
  3042                           ;psect for function _start_video
  3043  1166                     _start_video:	
  3044                           
  3045                           ;func.c: 302: Display_Chars(1, "Welcome to",1);
  3046                           
  3047                           ;incstack = 0
  3048                           ; Regs used in _start_video: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3049  1166  302B               	movlw	low (STR_9| (0+32768))
  3050  1167  0020               	movlb	0	; select bank0
  3051  1168  00B2               	movwf	Display_Chars@string
  3052  1169  3090               	movlw	high (STR_9| (0+32768))
  3053  116A  00B3               	movwf	Display_Chars@string+1
  3054  116B  01B4               	clrf	Display_Chars@y
  3055  116C  0AB4               	incf	Display_Chars@y,f
  3056  116D  3001               	movlw	1
  3057  116E  3194  246C  3191   	fcall	_Display_Chars
  3058                           
  3059                           ;func.c: 303: Display_Chars(2, "Xiaobawang",1);
  3060  1171  3020               	movlw	low (STR_10| (0+32768))
  3061  1172  0020               	movlb	0	; select bank0
  3062  1173  00B2               	movwf	Display_Chars@string
  3063  1174  3090               	movlw	high (STR_10| (0+32768))
  3064  1175  00B3               	movwf	Display_Chars@string+1
  3065  1176  01B4               	clrf	Display_Chars@y
  3066  1177  0AB4               	incf	Display_Chars@y,f
  3067  1178  3002               	movlw	2
  3068  1179  3194  246C  3191   	fcall	_Display_Chars
  3069                           
  3070                           ;func.c: 304: Display_Chars(3, "Game Machine",1);
  3071  117C  3013               	movlw	low (STR_11| (0+32768))
  3072  117D  0020               	movlb	0	; select bank0
  3073  117E  00B2               	movwf	Display_Chars@string
  3074  117F  3090               	movlw	high (STR_11| (0+32768))
  3075  1180  00B3               	movwf	Display_Chars@string+1
  3076  1181  01B4               	clrf	Display_Chars@y
  3077  1182  0AB4               	incf	Display_Chars@y,f
  3078  1183  3003               	movlw	3
  3079  1184  3194  246C  3191   	fcall	_Display_Chars
  3080                           
  3081                           ;func.c: 307: Clear_Screen(0x00);
  3082  1187  3000               	movlw	0
  3083  1188  0020               	movlb	0	; select bank0
  3084  1189  00B2               	movwf	Clear_Screen@value
  3085  118A  00B3               	movwf	Clear_Screen@value+1
  3086  118B  3195  251A         	fcall	_Clear_Screen
  3087  118D  0008               	return
  3088  118E                     __end_of_start_video:	
  3089                           
  3090                           	psect	text2
  3091  164D                     __ptext2:	
  3092 ;; *************** function _run_game *****************
  3093 ;; Defined at:
  3094 ;;		line 429 in file "func.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;		None
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3110 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3111 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3112 ;;Total ram usage:        2 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:   11
  3115 ;; This function calls:
  3116 ;;		_Display_Char
  3117 ;;		_Display_Chars
  3118 ;;		_choose_level2
  3119 ;;		_heibaiqi
  3120 ;;		_init_heibaiqi
  3121 ;;		_init_wayout
  3122 ;;		_wayout
  3123 ;; This function is called by:
  3124 ;;		_main
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           
  3129                           ;psect for function _run_game
  3130  164D                     _run_game:	
  3131                           
  3132                           ;func.c: 432: if(!start)
  3133                           
  3134                           ;incstack = 0
  3135                           ; Regs used in _run_game: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3136  164D  0021               	movlb	1	; select bank1
  3137  164E  0823               	movf	_start^(0+128),w
  3138  164F  1D03               	btfss	3,2
  3139  1650  2EBE               	goto	l4145
  3140                           
  3141                           ;func.c: 433: {
  3142                           ;func.c: 435: if(key==1)
  3143  1651  0020               	movlb	0	; select bank0
  3144  1652  0369               	decf	_key,w
  3145  1653  1D03               	btfss	3,2
  3146  1654  2E70               	goto	l4111
  3147                           
  3148                           ;func.c: 436: {
  3149                           ;func.c: 437: key=0;
  3150  1655  01E9               	clrf	_key
  3151                           
  3152                           ;func.c: 438: if(arrow != 1) {
  3153  1656  0367               	decf	_arrow,w
  3154  1657  1903               	btfsc	3,2
  3155  1658  0008               	return
  3156                           
  3157                           ;func.c: 439: Display_Chars(arrow, " ", 1);
  3158  1659  30CF               	movlw	low (STR_1| (0+32768))
  3159  165A  00B2               	movwf	Display_Chars@string
  3160  165B  3090               	movlw	high (STR_1| (0+32768))
  3161  165C  00B3               	movwf	Display_Chars@string+1
  3162  165D  01B4               	clrf	Display_Chars@y
  3163  165E  0AB4               	incf	Display_Chars@y,f
  3164  165F  0867               	movf	_arrow,w
  3165  1660  3194  246C  3196   	fcall	_Display_Chars
  3166                           
  3167                           ;func.c: 440: Display_Char(--arrow, 0x1A, 1);
  3168  1663  301A               	movlw	26
  3169  1664  0020               	movlb	0	; select bank0
  3170  1665  00E2               	movwf	??_run_game
  3171  1666  0862               	movf	??_run_game,w
  3172  1667  00B2               	movwf	Display_Char@data
  3173  1668  01B3               	clrf	Display_Char@y
  3174  1669  0AB3               	incf	Display_Char@y,f
  3175  166A  3001               	movlw	1
  3176  166B  02E7               	subwf	_arrow,f
  3177  166C  0867               	movf	_arrow,w
  3178  166D  3192  22BE         	fcall	_Display_Char
  3179                           
  3180                           ;func.c: 441: }
  3181                           ;func.c: 445: }
  3182  166F  0008               	return
  3183  1670                     l4111:	
  3184                           
  3185                           ;func.c: 447: else if(key==2)
  3186  1670  3002               	movlw	2
  3187  1671  0020               	movlb	0	; select bank0
  3188  1672  0669               	xorwf	_key,w
  3189  1673  1D03               	btfss	3,2
  3190  1674  2E93               	goto	l4121
  3191                           
  3192                           ;func.c: 448: {
  3193                           ;func.c: 449: key=0;
  3194  1675  01E9               	clrf	_key
  3195                           
  3196                           ;func.c: 450: if(arrow != 2) {
  3197  1676  3002               	movlw	2
  3198  1677  0667               	xorwf	_arrow,w
  3199  1678  1903               	btfsc	3,2
  3200  1679  0008               	return
  3201                           
  3202                           ;func.c: 451: Display_Chars(arrow, " ", 1);
  3203  167A  30CF               	movlw	low (STR_1| (0+32768))
  3204  167B  00B2               	movwf	Display_Chars@string
  3205  167C  3090               	movlw	high (STR_1| (0+32768))
  3206  167D  00B3               	movwf	Display_Chars@string+1
  3207  167E  01B4               	clrf	Display_Chars@y
  3208  167F  0AB4               	incf	Display_Chars@y,f
  3209  1680  0867               	movf	_arrow,w
  3210  1681  3194  246C  3196   	fcall	_Display_Chars
  3211                           
  3212                           ;func.c: 452: Display_Char(++arrow, 0x1A, 1);
  3213  1684  301A               	movlw	26
  3214  1685  0020               	movlb	0	; select bank0
  3215  1686  00E2               	movwf	??_run_game
  3216  1687  0862               	movf	??_run_game,w
  3217  1688  00B2               	movwf	Display_Char@data
  3218  1689  01B3               	clrf	Display_Char@y
  3219  168A  0AB3               	incf	Display_Char@y,f
  3220  168B  3001               	movlw	1
  3221  168C  00E3               	movwf	??_run_game+1
  3222  168D  0863               	movf	??_run_game+1,w
  3223  168E  07E7               	addwf	_arrow,f
  3224  168F  0867               	movf	_arrow,w
  3225  1690  3192  22BE         	fcall	_Display_Char
  3226                           
  3227                           ;func.c: 453: }
  3228                           ;func.c: 457: }
  3229  1692  0008               	return
  3230  1693                     l4121:	
  3231                           
  3232                           ;func.c: 459: else if(key==5)
  3233  1693  3005               	movlw	5
  3234  1694  0020               	movlb	0	; select bank0
  3235  1695  0669               	xorwf	_key,w
  3236  1696  1D03               	btfss	3,2
  3237  1697  0008               	return
  3238                           
  3239                           ;func.c: 460: {
  3240                           ;func.c: 461: key=0;
  3241  1698  01E9               	clrf	_key
  3242                           
  3243                           ;func.c: 463: start=arrow;
  3244  1699  0867               	movf	_arrow,w
  3245  169A  00E2               	movwf	??_run_game
  3246  169B  0862               	movf	??_run_game,w
  3247  169C  0021               	movlb	1	; select bank1
  3248  169D  00A3               	movwf	_start^(0+128)
  3249                           
  3250                           ;func.c: 464: temp_cursor.row=0;
  3251  169E  0020               	movlb	0	; select bank0
  3252  169F  01E4               	clrf	_temp_cursor
  3253                           
  3254                           ;func.c: 465: temp_cursor.col=0;
  3255  16A0  01E5               	clrf	_temp_cursor+1
  3256                           
  3257                           ;func.c: 466: if(start==1)
  3258  16A1  0021               	movlb	1	; select bank1
  3259  16A2  0323               	decf	_start^(0+128),w
  3260  16A3  1D03               	btfss	3,2
  3261  16A4  2EA8               	goto	l4135
  3262                           
  3263                           ;func.c: 467: init_heibaiqi();
  3264  16A5  3188  2009  3196   	fcall	_init_heibaiqi
  3265  16A8                     l4135:	
  3266                           
  3267                           ;func.c: 468: if(start==2)
  3268  16A8  3002               	movlw	2
  3269  16A9  0021               	movlb	1	; select bank1
  3270  16AA  0623               	xorwf	_start^(0+128),w
  3271  16AB  1D03               	btfss	3,2
  3272  16AC  0008               	return
  3273                           
  3274                           ;func.c: 469: {
  3275                           ;func.c: 470: level_num = choose_level2();
  3276  16AD  318A  22F8  3196   	fcall	_choose_level2
  3277  16B0  0020               	movlb	0	; select bank0
  3278  16B1  00E2               	movwf	??_run_game
  3279  16B2  0862               	movf	??_run_game,w
  3280  16B3  00EA               	movwf	_level_num
  3281                           
  3282                           ;func.c: 471: if (level_num !=0)
  3283  16B4  086A               	movf	_level_num,w
  3284  16B5  1903               	btfsc	3,2
  3285  16B6  2EBB               	goto	l4143
  3286                           
  3287                           ;func.c: 472: {
  3288                           ;func.c: 473: init_wayout(level_num);
  3289  16B7  086A               	movf	_level_num,w
  3290  16B8  318A  2214         	fcall	_init_wayout
  3291                           
  3292                           ;func.c: 474: }
  3293  16BA  0008               	return
  3294  16BB                     l4143:	
  3295                           
  3296                           ;func.c: 475: else
  3297                           ;func.c: 476: {
  3298                           ;func.c: 477: start =0;
  3299  16BB  0021               	movlb	1	; select bank1
  3300  16BC  01A3               	clrf	_start^(0+128)
  3301                           
  3302                           ;func.c: 478: }
  3303                           ;func.c: 479: }
  3304                           ;func.c: 480: }
  3305                           ;func.c: 482: }
  3306  16BD  0008               	return
  3307  16BE                     l4145:	
  3308                           
  3309                           ;func.c: 483: else if(start==1)
  3310  16BE  0323               	decf	_start^(0+128),w
  3311  16BF  1D03               	btfss	3,2
  3312  16C0  2EC7               	goto	l4151
  3313                           
  3314                           ;func.c: 484: {
  3315                           ;func.c: 485: arrow = 1;
  3316  16C1  0020               	movlb	0	; select bank0
  3317  16C2  01E7               	clrf	_arrow
  3318  16C3  0AE7               	incf	_arrow,f
  3319                           
  3320                           ;func.c: 486: heibaiqi();
  3321  16C4  3180  2086         	fcall	_heibaiqi
  3322                           
  3323                           ;func.c: 487: }
  3324  16C6  0008               	return
  3325  16C7                     l4151:	
  3326                           
  3327                           ;func.c: 488: else if(start==2)
  3328  16C7  3002               	movlw	2
  3329  16C8  0021               	movlb	1	; select bank1
  3330  16C9  0623               	xorwf	_start^(0+128),w
  3331  16CA  1D03               	btfss	3,2
  3332  16CB  0008               	return
  3333                           
  3334                           ;func.c: 489: {
  3335                           ;func.c: 490: arrow = 1;
  3336  16CC  0020               	movlb	0	; select bank0
  3337  16CD  01E7               	clrf	_arrow
  3338  16CE  0AE7               	incf	_arrow,f
  3339                           
  3340                           ;func.c: 491: wayout();
  3341  16CF  3183  2394         	fcall	_wayout
  3342  16D1  0008               	return
  3343  16D2                     __end_of_run_game:	
  3344                           
  3345                           	psect	text3
  3346  0394                     __ptext3:	
  3347 ;; *************** function _wayout *****************
  3348 ;; Defined at:
  3349 ;;		line 237 in file "wayout.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;		None
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3365 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3366 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3367 ;;Total ram usage:        7 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:   10
  3370 ;; This function calls:
  3371 ;;		_Clear_Screen
  3372 ;;		_Display_Chars
  3373 ;;		_check_if_complete
  3374 ;;		_choose
  3375 ;;		_choose_level2
  3376 ;;		_init_wayout
  3377 ;;		_int2string
  3378 ;;		_set_point
  3379 ;; This function is called by:
  3380 ;;		_run_game
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           
  3385                           ;psect for function _wayout
  3386  0394                     _wayout:	
  3387                           
  3388                           ;wayout.c: 239: switch(key)
  3389                           
  3390                           ;incstack = 0
  3391                           ; Regs used in _wayout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3392  0394  2E7C               	goto	l3985
  3393  0395                     l3891:	
  3394                           ;wayout.c: 240: {
  3395                           ;wayout.c: 241: case 1:
  3396                           
  3397                           
  3398                           ;wayout.c: 242: key=0;
  3399  0395  0020               	movlb	0	; select bank0
  3400  0396  01E9               	clrf	_key
  3401                           
  3402                           ;wayout.c: 243: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] & 0x03;
  3403  0397  0864               	movf	_temp_cursor,w
  3404  0398  00DB               	movwf	??_wayout
  3405  0399  3003               	movlw	3
  3406  039A                     u5285:	
  3407  039A  35DB               	lslf	??_wayout,f
  3408  039B  0B89               	decfsz	9,f
  3409  039C  2B9A               	goto	u5285
  3410  039D  30A6               	movlw	(low (_table| 0))& (0+255)
  3411  039E  075B               	addwf	??_wayout,w
  3412  039F  00DC               	movwf	??_wayout+1
  3413  03A0  0865               	movf	_temp_cursor+1,w
  3414  03A1  075C               	addwf	??_wayout+1,w
  3415  03A2  00DD               	movwf	??_wayout+2
  3416  03A3  085D               	movf	??_wayout+2,w
  3417  03A4  0086               	movwf	6
  3418  03A5  0187               	clrf	7
  3419  03A6  0801               	movf	1,w
  3420  03A7  3903               	andlw	3
  3421  03A8  00DE               	movwf	??_wayout+3
  3422  03A9  0864               	movf	_temp_cursor,w
  3423  03AA  00DF               	movwf	??_wayout+4
  3424  03AB  3003               	movlw	3
  3425  03AC                     u5295:	
  3426  03AC  35DF               	lslf	??_wayout+4,f
  3427  03AD  0B89               	decfsz	9,f
  3428  03AE  2BAC               	goto	u5295
  3429  03AF  30A6               	movlw	(low (_table| 0))& (0+255)
  3430  03B0  075F               	addwf	??_wayout+4,w
  3431  03B1  00E0               	movwf	??_wayout+5
  3432  03B2  0865               	movf	_temp_cursor+1,w
  3433  03B3  0760               	addwf	??_wayout+5,w
  3434  03B4  00E1               	movwf	??_wayout+6
  3435  03B5  0861               	movf	??_wayout+6,w
  3436  03B6  0086               	movwf	6
  3437  03B7  0187               	clrf	7
  3438  03B8  085E               	movf	??_wayout+3,w
  3439  03B9  0081               	movwf	1
  3440                           
  3441                           ;wayout.c: 244: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]]);
  3442  03BA  0865               	movf	_temp_cursor+1,w
  3443  03BB  00DB               	movwf	??_wayout
  3444  03BC  085B               	movf	??_wayout,w
  3445  03BD  00B9               	movwf	set_point@point_y
  3446  03BE  0864               	movf	_temp_cursor,w
  3447  03BF  00DC               	movwf	??_wayout+1
  3448  03C0  3003               	movlw	3
  3449  03C1                     u5305:	
  3450  03C1  35DC               	lslf	??_wayout+1,f
  3451  03C2  0B89               	decfsz	9,f
  3452  03C3  2BC1               	goto	u5305
  3453  03C4  30A6               	movlw	(low (_table| 0))& (0+255)
  3454  03C5  075C               	addwf	??_wayout+1,w
  3455  03C6  00DD               	movwf	??_wayout+2
  3456  03C7  0865               	movf	_temp_cursor+1,w
  3457  03C8  075D               	addwf	??_wayout+2,w
  3458  03C9  00DE               	movwf	??_wayout+3
  3459  03CA  085E               	movf	??_wayout+3,w
  3460  03CB  0086               	movwf	6
  3461  03CC  0187               	clrf	7
  3462  03CD  0801               	movf	1,w
  3463  03CE  00DF               	movwf	??_wayout+4
  3464  03CF  3002               	movlw	2
  3465  03D0                     u5315:	
  3466  03D0  35DF               	lslf	??_wayout+4,f
  3467  03D1  3EFF               	addlw	-1
  3468  03D2  1D03               	skipz
  3469  03D3  2BD0               	goto	u5315
  3470  03D4  355F               	lslf	??_wayout+4,w
  3471  03D5  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  3472  03D6  00E0               	movwf	??_wayout+5
  3473  03D7  0860               	movf	??_wayout+5,w
  3474  03D8  00BA               	movwf	set_point@value
  3475  03D9  0864               	movf	_temp_cursor,w
  3476  03DA  3197  2760  3183   	fcall	_set_point
  3477                           
  3478                           ;wayout.c: 245: temp_cursor.row=(temp_cursor.row+8-1)%8;
  3479  03DD  0020               	movlb	0	; select bank0
  3480  03DE  0864               	movf	_temp_cursor,w
  3481  03DF  3E07               	addlw	7
  3482  03E0  3907               	andlw	7
  3483  03E1  00DB               	movwf	??_wayout
  3484  03E2  085B               	movf	??_wayout,w
  3485  03E3  00E4               	movwf	_temp_cursor
  3486                           
  3487                           ;wayout.c: 246: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] | 0x08;
  3488  03E4  0864               	movf	_temp_cursor,w
  3489  03E5  00DB               	movwf	??_wayout
  3490  03E6  3003               	movlw	3
  3491  03E7                     u5325:	
  3492  03E7  35DB               	lslf	??_wayout,f
  3493  03E8  0B89               	decfsz	9,f
  3494  03E9  2BE7               	goto	u5325
  3495  03EA  30A6               	movlw	(low (_table| 0))& (0+255)
  3496  03EB  075B               	addwf	??_wayout,w
  3497  03EC  00DC               	movwf	??_wayout+1
  3498  03ED  0865               	movf	_temp_cursor+1,w
  3499  03EE  075C               	addwf	??_wayout+1,w
  3500  03EF  00DD               	movwf	??_wayout+2
  3501  03F0  085D               	movf	??_wayout+2,w
  3502  03F1  0086               	movwf	6
  3503  03F2  0187               	clrf	7
  3504  03F3  0801               	movf	1,w
  3505  03F4  3808               	iorlw	8
  3506  03F5  00DE               	movwf	??_wayout+3
  3507  03F6  0864               	movf	_temp_cursor,w
  3508  03F7  00DF               	movwf	??_wayout+4
  3509  03F8  3003               	movlw	3
  3510  03F9                     u5335:	
  3511  03F9  35DF               	lslf	??_wayout+4,f
  3512  03FA  0B89               	decfsz	9,f
  3513  03FB  2BF9               	goto	u5335
  3514  03FC  30A6               	movlw	(low (_table| 0))& (0+255)
  3515  03FD  075F               	addwf	??_wayout+4,w
  3516  03FE  00E0               	movwf	??_wayout+5
  3517  03FF  0865               	movf	_temp_cursor+1,w
  3518  0400  0760               	addwf	??_wayout+5,w
  3519  0401  00E1               	movwf	??_wayout+6
  3520  0402  0861               	movf	??_wayout+6,w
  3521  0403  0086               	movwf	6
  3522  0404  0187               	clrf	7
  3523  0405  085E               	movf	??_wayout+3,w
  3524  0406  0081               	movwf	1
  3525                           
  3526                           ;wayout.c: 247: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]-5]);
  3527  0407  0865               	movf	_temp_cursor+1,w
  3528  0408  00DB               	movwf	??_wayout
  3529  0409  085B               	movf	??_wayout,w
  3530  040A  00B9               	movwf	set_point@point_y
  3531  040B  0864               	movf	_temp_cursor,w
  3532  040C  00DC               	movwf	??_wayout+1
  3533  040D  3003               	movlw	3
  3534  040E                     u5345:	
  3535  040E  35DC               	lslf	??_wayout+1,f
  3536  040F  0B89               	decfsz	9,f
  3537  0410  2C0E               	goto	u5345
  3538  0411  30A6               	movlw	(low (_table| 0))& (0+255)
  3539  0412  075C               	addwf	??_wayout+1,w
  3540  0413  00DD               	movwf	??_wayout+2
  3541  0414  0865               	movf	_temp_cursor+1,w
  3542  0415  075D               	addwf	??_wayout+2,w
  3543  0416  00DE               	movwf	??_wayout+3
  3544  0417  085E               	movf	??_wayout+3,w
  3545  0418  0086               	movwf	6
  3546  0419  0187               	clrf	7
  3547  041A  0801               	movf	1,w
  3548  041B  00DF               	movwf	??_wayout+4
  3549  041C  3002               	movlw	2
  3550  041D                     u5355:	
  3551  041D  35DF               	lslf	??_wayout+4,f
  3552  041E  3EFF               	addlw	-1
  3553  041F  1D03               	skipz
  3554  0420  2C1D               	goto	u5355
  3555  0421  355F               	lslf	??_wayout+4,w
  3556  0422  3ED8               	addlw	216
  3557  0423  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  3558  0424  00E0               	movwf	??_wayout+5
  3559  0425  0860               	movf	??_wayout+5,w
  3560  0426  00BA               	movwf	set_point@value
  3561  0427  0864               	movf	_temp_cursor,w
  3562  0428  3197  2760         	fcall	_set_point
  3563                           
  3564                           ;wayout.c: 248: break;
  3565  042A  0008               	return
  3566  042B                     l3903:	
  3567                           ;wayout.c: 249: case 2:
  3568                           
  3569                           
  3570                           ;wayout.c: 250: key=0;
  3571  042B  0020               	movlb	0	; select bank0
  3572  042C  01E9               	clrf	_key
  3573                           
  3574                           ;wayout.c: 251: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] & 0x03;
  3575  042D  0864               	movf	_temp_cursor,w
  3576  042E  00DB               	movwf	??_wayout
  3577  042F  3003               	movlw	3
  3578  0430                     u5365:	
  3579  0430  35DB               	lslf	??_wayout,f
  3580  0431  0B89               	decfsz	9,f
  3581  0432  2C30               	goto	u5365
  3582  0433  30A6               	movlw	(low (_table| 0))& (0+255)
  3583  0434  075B               	addwf	??_wayout,w
  3584  0435  00DC               	movwf	??_wayout+1
  3585  0436  0865               	movf	_temp_cursor+1,w
  3586  0437  075C               	addwf	??_wayout+1,w
  3587  0438  00DD               	movwf	??_wayout+2
  3588  0439  085D               	movf	??_wayout+2,w
  3589  043A  0086               	movwf	6
  3590  043B  0187               	clrf	7
  3591  043C  0801               	movf	1,w
  3592  043D  3903               	andlw	3
  3593  043E  00DE               	movwf	??_wayout+3
  3594  043F  0864               	movf	_temp_cursor,w
  3595  0440  00DF               	movwf	??_wayout+4
  3596  0441  3003               	movlw	3
  3597  0442                     u5375:	
  3598  0442  35DF               	lslf	??_wayout+4,f
  3599  0443  0B89               	decfsz	9,f
  3600  0444  2C42               	goto	u5375
  3601  0445  30A6               	movlw	(low (_table| 0))& (0+255)
  3602  0446  075F               	addwf	??_wayout+4,w
  3603  0447  00E0               	movwf	??_wayout+5
  3604  0448  0865               	movf	_temp_cursor+1,w
  3605  0449  0760               	addwf	??_wayout+5,w
  3606  044A  00E1               	movwf	??_wayout+6
  3607  044B  0861               	movf	??_wayout+6,w
  3608  044C  0086               	movwf	6
  3609  044D  0187               	clrf	7
  3610  044E  085E               	movf	??_wayout+3,w
  3611  044F  0081               	movwf	1
  3612                           
  3613                           ;wayout.c: 252: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]]);
  3614  0450  0865               	movf	_temp_cursor+1,w
  3615  0451  00DB               	movwf	??_wayout
  3616  0452  085B               	movf	??_wayout,w
  3617  0453  00B9               	movwf	set_point@point_y
  3618  0454  0864               	movf	_temp_cursor,w
  3619  0455  00DC               	movwf	??_wayout+1
  3620  0456  3003               	movlw	3
  3621  0457                     u5385:	
  3622  0457  35DC               	lslf	??_wayout+1,f
  3623  0458  0B89               	decfsz	9,f
  3624  0459  2C57               	goto	u5385
  3625  045A  30A6               	movlw	(low (_table| 0))& (0+255)
  3626  045B  075C               	addwf	??_wayout+1,w
  3627  045C  00DD               	movwf	??_wayout+2
  3628  045D  0865               	movf	_temp_cursor+1,w
  3629  045E  075D               	addwf	??_wayout+2,w
  3630  045F  00DE               	movwf	??_wayout+3
  3631  0460  085E               	movf	??_wayout+3,w
  3632  0461  0086               	movwf	6
  3633  0462  0187               	clrf	7
  3634  0463  0801               	movf	1,w
  3635  0464  00DF               	movwf	??_wayout+4
  3636  0465  3002               	movlw	2
  3637  0466                     u5395:	
  3638  0466  35DF               	lslf	??_wayout+4,f
  3639  0467  3EFF               	addlw	-1
  3640  0468  1D03               	skipz
  3641  0469  2C66               	goto	u5395
  3642  046A  355F               	lslf	??_wayout+4,w
  3643  046B  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  3644  046C  00E0               	movwf	??_wayout+5
  3645  046D  0860               	movf	??_wayout+5,w
  3646  046E  00BA               	movwf	set_point@value
  3647  046F  0864               	movf	_temp_cursor,w
  3648  0470  3197  2760  3183   	fcall	_set_point
  3649                           
  3650                           ;wayout.c: 253: temp_cursor.row=(temp_cursor.row+1)%8;
  3651  0473  0020               	movlb	0	; select bank0
  3652  0474  0864               	movf	_temp_cursor,w
  3653  0475  3E01               	addlw	1
  3654  0476  3907               	andlw	7
  3655  0477  00DB               	movwf	??_wayout
  3656  0478  085B               	movf	??_wayout,w
  3657  0479  00E4               	movwf	_temp_cursor
  3658                           
  3659                           ;wayout.c: 254: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] | 0x08;
  3660  047A  0864               	movf	_temp_cursor,w
  3661  047B  00DB               	movwf	??_wayout
  3662  047C  3003               	movlw	3
  3663  047D                     u5405:	
  3664  047D  35DB               	lslf	??_wayout,f
  3665  047E  0B89               	decfsz	9,f
  3666  047F  2C7D               	goto	u5405
  3667  0480  30A6               	movlw	(low (_table| 0))& (0+255)
  3668  0481  075B               	addwf	??_wayout,w
  3669  0482  00DC               	movwf	??_wayout+1
  3670  0483  0865               	movf	_temp_cursor+1,w
  3671  0484  075C               	addwf	??_wayout+1,w
  3672  0485  00DD               	movwf	??_wayout+2
  3673  0486  085D               	movf	??_wayout+2,w
  3674  0487  0086               	movwf	6
  3675  0488  0187               	clrf	7
  3676  0489  0801               	movf	1,w
  3677  048A  3808               	iorlw	8
  3678  048B  00DE               	movwf	??_wayout+3
  3679  048C  0864               	movf	_temp_cursor,w
  3680  048D  00DF               	movwf	??_wayout+4
  3681  048E  3003               	movlw	3
  3682  048F                     u5415:	
  3683  048F  35DF               	lslf	??_wayout+4,f
  3684  0490  0B89               	decfsz	9,f
  3685  0491  2C8F               	goto	u5415
  3686  0492  30A6               	movlw	(low (_table| 0))& (0+255)
  3687  0493  075F               	addwf	??_wayout+4,w
  3688  0494  00E0               	movwf	??_wayout+5
  3689  0495  0865               	movf	_temp_cursor+1,w
  3690  0496  0760               	addwf	??_wayout+5,w
  3691  0497  00E1               	movwf	??_wayout+6
  3692  0498  0861               	movf	??_wayout+6,w
  3693  0499  0086               	movwf	6
  3694  049A  0187               	clrf	7
  3695  049B  085E               	movf	??_wayout+3,w
  3696  049C  0081               	movwf	1
  3697                           
  3698                           ;wayout.c: 255: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]-5]);
  3699  049D  0865               	movf	_temp_cursor+1,w
  3700  049E  00DB               	movwf	??_wayout
  3701  049F  085B               	movf	??_wayout,w
  3702  04A0  00B9               	movwf	set_point@point_y
  3703  04A1  0864               	movf	_temp_cursor,w
  3704  04A2  00DC               	movwf	??_wayout+1
  3705  04A3  3003               	movlw	3
  3706  04A4                     u5425:	
  3707  04A4  35DC               	lslf	??_wayout+1,f
  3708  04A5  0B89               	decfsz	9,f
  3709  04A6  2CA4               	goto	u5425
  3710  04A7  30A6               	movlw	(low (_table| 0))& (0+255)
  3711  04A8  075C               	addwf	??_wayout+1,w
  3712  04A9  00DD               	movwf	??_wayout+2
  3713  04AA  0865               	movf	_temp_cursor+1,w
  3714  04AB  075D               	addwf	??_wayout+2,w
  3715  04AC  00DE               	movwf	??_wayout+3
  3716  04AD  085E               	movf	??_wayout+3,w
  3717  04AE  0086               	movwf	6
  3718  04AF  0187               	clrf	7
  3719  04B0  0801               	movf	1,w
  3720  04B1  00DF               	movwf	??_wayout+4
  3721  04B2  3002               	movlw	2
  3722  04B3                     u5435:	
  3723  04B3  35DF               	lslf	??_wayout+4,f
  3724  04B4  3EFF               	addlw	-1
  3725  04B5  1D03               	skipz
  3726  04B6  2CB3               	goto	u5435
  3727  04B7  355F               	lslf	??_wayout+4,w
  3728  04B8  3ED8               	addlw	216
  3729  04B9  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  3730  04BA  00E0               	movwf	??_wayout+5
  3731  04BB  0860               	movf	??_wayout+5,w
  3732  04BC  00BA               	movwf	set_point@value
  3733  04BD  0864               	movf	_temp_cursor,w
  3734  04BE  3197  2760         	fcall	_set_point
  3735                           
  3736                           ;wayout.c: 256: break;
  3737  04C0  0008               	return
  3738  04C1                     l3915:	
  3739                           ;wayout.c: 257: case 3:
  3740                           
  3741                           
  3742                           ;wayout.c: 258: key=0;
  3743  04C1  0020               	movlb	0	; select bank0
  3744  04C2  01E9               	clrf	_key
  3745                           
  3746                           ;wayout.c: 259: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] & 0x03;
  3747  04C3  0864               	movf	_temp_cursor,w
  3748  04C4  00DB               	movwf	??_wayout
  3749  04C5  3003               	movlw	3
  3750  04C6                     u5445:	
  3751  04C6  35DB               	lslf	??_wayout,f
  3752  04C7  0B89               	decfsz	9,f
  3753  04C8  2CC6               	goto	u5445
  3754  04C9  30A6               	movlw	(low (_table| 0))& (0+255)
  3755  04CA  075B               	addwf	??_wayout,w
  3756  04CB  00DC               	movwf	??_wayout+1
  3757  04CC  0865               	movf	_temp_cursor+1,w
  3758  04CD  075C               	addwf	??_wayout+1,w
  3759  04CE  00DD               	movwf	??_wayout+2
  3760  04CF  085D               	movf	??_wayout+2,w
  3761  04D0  0086               	movwf	6
  3762  04D1  0187               	clrf	7
  3763  04D2  0801               	movf	1,w
  3764  04D3  3903               	andlw	3
  3765  04D4  00DE               	movwf	??_wayout+3
  3766  04D5  0864               	movf	_temp_cursor,w
  3767  04D6  00DF               	movwf	??_wayout+4
  3768  04D7  3003               	movlw	3
  3769  04D8                     u5455:	
  3770  04D8  35DF               	lslf	??_wayout+4,f
  3771  04D9  0B89               	decfsz	9,f
  3772  04DA  2CD8               	goto	u5455
  3773  04DB  30A6               	movlw	(low (_table| 0))& (0+255)
  3774  04DC  075F               	addwf	??_wayout+4,w
  3775  04DD  00E0               	movwf	??_wayout+5
  3776  04DE  0865               	movf	_temp_cursor+1,w
  3777  04DF  0760               	addwf	??_wayout+5,w
  3778  04E0  00E1               	movwf	??_wayout+6
  3779  04E1  0861               	movf	??_wayout+6,w
  3780  04E2  0086               	movwf	6
  3781  04E3  0187               	clrf	7
  3782  04E4  085E               	movf	??_wayout+3,w
  3783  04E5  0081               	movwf	1
  3784                           
  3785                           ;wayout.c: 260: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]]);
  3786  04E6  0865               	movf	_temp_cursor+1,w
  3787  04E7  00DB               	movwf	??_wayout
  3788  04E8  085B               	movf	??_wayout,w
  3789  04E9  00B9               	movwf	set_point@point_y
  3790  04EA  0864               	movf	_temp_cursor,w
  3791  04EB  00DC               	movwf	??_wayout+1
  3792  04EC  3003               	movlw	3
  3793  04ED                     u5465:	
  3794  04ED  35DC               	lslf	??_wayout+1,f
  3795  04EE  0B89               	decfsz	9,f
  3796  04EF  2CED               	goto	u5465
  3797  04F0  30A6               	movlw	(low (_table| 0))& (0+255)
  3798  04F1  075C               	addwf	??_wayout+1,w
  3799  04F2  00DD               	movwf	??_wayout+2
  3800  04F3  0865               	movf	_temp_cursor+1,w
  3801  04F4  075D               	addwf	??_wayout+2,w
  3802  04F5  00DE               	movwf	??_wayout+3
  3803  04F6  085E               	movf	??_wayout+3,w
  3804  04F7  0086               	movwf	6
  3805  04F8  0187               	clrf	7
  3806  04F9  0801               	movf	1,w
  3807  04FA  00DF               	movwf	??_wayout+4
  3808  04FB  3002               	movlw	2
  3809  04FC                     u5475:	
  3810  04FC  35DF               	lslf	??_wayout+4,f
  3811  04FD  3EFF               	addlw	-1
  3812  04FE  1D03               	skipz
  3813  04FF  2CFC               	goto	u5475
  3814  0500  355F               	lslf	??_wayout+4,w
  3815  0501  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  3816  0502  00E0               	movwf	??_wayout+5
  3817  0503  0860               	movf	??_wayout+5,w
  3818  0504  00BA               	movwf	set_point@value
  3819  0505  0864               	movf	_temp_cursor,w
  3820  0506  3197  2760  3183   	fcall	_set_point
  3821                           
  3822                           ;wayout.c: 261: temp_cursor.col=(temp_cursor.col+8-1)%8;
  3823  0509  0020               	movlb	0	; select bank0
  3824  050A  0865               	movf	_temp_cursor+1,w
  3825  050B  3E07               	addlw	7
  3826  050C  3907               	andlw	7
  3827  050D  00DB               	movwf	??_wayout
  3828  050E  085B               	movf	??_wayout,w
  3829  050F  00E5               	movwf	_temp_cursor+1
  3830                           
  3831                           ;wayout.c: 262: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] | 0x08;
  3832  0510  0864               	movf	_temp_cursor,w
  3833  0511  00DB               	movwf	??_wayout
  3834  0512  3003               	movlw	3
  3835  0513                     u5485:	
  3836  0513  35DB               	lslf	??_wayout,f
  3837  0514  0B89               	decfsz	9,f
  3838  0515  2D13               	goto	u5485
  3839  0516  30A6               	movlw	(low (_table| 0))& (0+255)
  3840  0517  075B               	addwf	??_wayout,w
  3841  0518  00DC               	movwf	??_wayout+1
  3842  0519  0865               	movf	_temp_cursor+1,w
  3843  051A  075C               	addwf	??_wayout+1,w
  3844  051B  00DD               	movwf	??_wayout+2
  3845  051C  085D               	movf	??_wayout+2,w
  3846  051D  0086               	movwf	6
  3847  051E  0187               	clrf	7
  3848  051F  0801               	movf	1,w
  3849  0520  3808               	iorlw	8
  3850  0521  00DE               	movwf	??_wayout+3
  3851  0522  0864               	movf	_temp_cursor,w
  3852  0523  00DF               	movwf	??_wayout+4
  3853  0524  3003               	movlw	3
  3854  0525                     u5495:	
  3855  0525  35DF               	lslf	??_wayout+4,f
  3856  0526  0B89               	decfsz	9,f
  3857  0527  2D25               	goto	u5495
  3858  0528  30A6               	movlw	(low (_table| 0))& (0+255)
  3859  0529  075F               	addwf	??_wayout+4,w
  3860  052A  00E0               	movwf	??_wayout+5
  3861  052B  0865               	movf	_temp_cursor+1,w
  3862  052C  0760               	addwf	??_wayout+5,w
  3863  052D  00E1               	movwf	??_wayout+6
  3864  052E  0861               	movf	??_wayout+6,w
  3865  052F  0086               	movwf	6
  3866  0530  0187               	clrf	7
  3867  0531  085E               	movf	??_wayout+3,w
  3868  0532  0081               	movwf	1
  3869                           
  3870                           ;wayout.c: 263: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]-5]);
  3871  0533  0865               	movf	_temp_cursor+1,w
  3872  0534  00DB               	movwf	??_wayout
  3873  0535  085B               	movf	??_wayout,w
  3874  0536  00B9               	movwf	set_point@point_y
  3875  0537  0864               	movf	_temp_cursor,w
  3876  0538  00DC               	movwf	??_wayout+1
  3877  0539  3003               	movlw	3
  3878  053A                     u5505:	
  3879  053A  35DC               	lslf	??_wayout+1,f
  3880  053B  0B89               	decfsz	9,f
  3881  053C  2D3A               	goto	u5505
  3882  053D  30A6               	movlw	(low (_table| 0))& (0+255)
  3883  053E  075C               	addwf	??_wayout+1,w
  3884  053F  00DD               	movwf	??_wayout+2
  3885  0540  0865               	movf	_temp_cursor+1,w
  3886  0541  075D               	addwf	??_wayout+2,w
  3887  0542  00DE               	movwf	??_wayout+3
  3888  0543  085E               	movf	??_wayout+3,w
  3889  0544  0086               	movwf	6
  3890  0545  0187               	clrf	7
  3891  0546  0801               	movf	1,w
  3892  0547  00DF               	movwf	??_wayout+4
  3893  0548  3002               	movlw	2
  3894  0549                     u5515:	
  3895  0549  35DF               	lslf	??_wayout+4,f
  3896  054A  3EFF               	addlw	-1
  3897  054B  1D03               	skipz
  3898  054C  2D49               	goto	u5515
  3899  054D  355F               	lslf	??_wayout+4,w
  3900  054E  3ED8               	addlw	216
  3901  054F  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  3902  0550  00E0               	movwf	??_wayout+5
  3903  0551  0860               	movf	??_wayout+5,w
  3904  0552  00BA               	movwf	set_point@value
  3905  0553  0864               	movf	_temp_cursor,w
  3906  0554  3197  2760         	fcall	_set_point
  3907                           
  3908                           ;wayout.c: 264: break;
  3909  0556  0008               	return
  3910  0557                     l3927:	
  3911                           ;wayout.c: 265: case 4:
  3912                           
  3913                           
  3914                           ;wayout.c: 266: key=0;
  3915  0557  0020               	movlb	0	; select bank0
  3916  0558  01E9               	clrf	_key
  3917                           
  3918                           ;wayout.c: 267: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] & 0x03;
  3919  0559  0864               	movf	_temp_cursor,w
  3920  055A  00DB               	movwf	??_wayout
  3921  055B  3003               	movlw	3
  3922  055C                     u5525:	
  3923  055C  35DB               	lslf	??_wayout,f
  3924  055D  0B89               	decfsz	9,f
  3925  055E  2D5C               	goto	u5525
  3926  055F  30A6               	movlw	(low (_table| 0))& (0+255)
  3927  0560  075B               	addwf	??_wayout,w
  3928  0561  00DC               	movwf	??_wayout+1
  3929  0562  0865               	movf	_temp_cursor+1,w
  3930  0563  075C               	addwf	??_wayout+1,w
  3931  0564  00DD               	movwf	??_wayout+2
  3932  0565  085D               	movf	??_wayout+2,w
  3933  0566  0086               	movwf	6
  3934  0567  0187               	clrf	7
  3935  0568  0801               	movf	1,w
  3936  0569  3903               	andlw	3
  3937  056A  00DE               	movwf	??_wayout+3
  3938  056B  0864               	movf	_temp_cursor,w
  3939  056C  00DF               	movwf	??_wayout+4
  3940  056D  3003               	movlw	3
  3941  056E                     u5535:	
  3942  056E  35DF               	lslf	??_wayout+4,f
  3943  056F  0B89               	decfsz	9,f
  3944  0570  2D6E               	goto	u5535
  3945  0571  30A6               	movlw	(low (_table| 0))& (0+255)
  3946  0572  075F               	addwf	??_wayout+4,w
  3947  0573  00E0               	movwf	??_wayout+5
  3948  0574  0865               	movf	_temp_cursor+1,w
  3949  0575  0760               	addwf	??_wayout+5,w
  3950  0576  00E1               	movwf	??_wayout+6
  3951  0577  0861               	movf	??_wayout+6,w
  3952  0578  0086               	movwf	6
  3953  0579  0187               	clrf	7
  3954  057A  085E               	movf	??_wayout+3,w
  3955  057B  0081               	movwf	1
  3956                           
  3957                           ;wayout.c: 268: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]]);
  3958  057C  0865               	movf	_temp_cursor+1,w
  3959  057D  00DB               	movwf	??_wayout
  3960  057E  085B               	movf	??_wayout,w
  3961  057F  00B9               	movwf	set_point@point_y
  3962  0580  0864               	movf	_temp_cursor,w
  3963  0581  00DC               	movwf	??_wayout+1
  3964  0582  3003               	movlw	3
  3965  0583                     u5545:	
  3966  0583  35DC               	lslf	??_wayout+1,f
  3967  0584  0B89               	decfsz	9,f
  3968  0585  2D83               	goto	u5545
  3969  0586  30A6               	movlw	(low (_table| 0))& (0+255)
  3970  0587  075C               	addwf	??_wayout+1,w
  3971  0588  00DD               	movwf	??_wayout+2
  3972  0589  0865               	movf	_temp_cursor+1,w
  3973  058A  075D               	addwf	??_wayout+2,w
  3974  058B  00DE               	movwf	??_wayout+3
  3975  058C  085E               	movf	??_wayout+3,w
  3976  058D  0086               	movwf	6
  3977  058E  0187               	clrf	7
  3978  058F  0801               	movf	1,w
  3979  0590  00DF               	movwf	??_wayout+4
  3980  0591  3002               	movlw	2
  3981  0592                     u5555:	
  3982  0592  35DF               	lslf	??_wayout+4,f
  3983  0593  3EFF               	addlw	-1
  3984  0594  1D03               	skipz
  3985  0595  2D92               	goto	u5555
  3986  0596  355F               	lslf	??_wayout+4,w
  3987  0597  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  3988  0598  00E0               	movwf	??_wayout+5
  3989  0599  0860               	movf	??_wayout+5,w
  3990  059A  00BA               	movwf	set_point@value
  3991  059B  0864               	movf	_temp_cursor,w
  3992  059C  3197  2760  3183   	fcall	_set_point
  3993                           
  3994                           ;wayout.c: 269: temp_cursor.col=(temp_cursor.col+1)%8;
  3995  059F  0020               	movlb	0	; select bank0
  3996  05A0  0865               	movf	_temp_cursor+1,w
  3997  05A1  3E01               	addlw	1
  3998  05A2  3907               	andlw	7
  3999  05A3  00DB               	movwf	??_wayout
  4000  05A4  085B               	movf	??_wayout,w
  4001  05A5  00E5               	movwf	_temp_cursor+1
  4002                           
  4003                           ;wayout.c: 270: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_cu
      +                          rsor.col] | 0x08;
  4004  05A6  0864               	movf	_temp_cursor,w
  4005  05A7  00DB               	movwf	??_wayout
  4006  05A8  3003               	movlw	3
  4007  05A9                     u5565:	
  4008  05A9  35DB               	lslf	??_wayout,f
  4009  05AA  0B89               	decfsz	9,f
  4010  05AB  2DA9               	goto	u5565
  4011  05AC  30A6               	movlw	(low (_table| 0))& (0+255)
  4012  05AD  075B               	addwf	??_wayout,w
  4013  05AE  00DC               	movwf	??_wayout+1
  4014  05AF  0865               	movf	_temp_cursor+1,w
  4015  05B0  075C               	addwf	??_wayout+1,w
  4016  05B1  00DD               	movwf	??_wayout+2
  4017  05B2  085D               	movf	??_wayout+2,w
  4018  05B3  0086               	movwf	6
  4019  05B4  0187               	clrf	7
  4020  05B5  0801               	movf	1,w
  4021  05B6  3808               	iorlw	8
  4022  05B7  00DE               	movwf	??_wayout+3
  4023  05B8  0864               	movf	_temp_cursor,w
  4024  05B9  00DF               	movwf	??_wayout+4
  4025  05BA  3003               	movlw	3
  4026  05BB                     u5575:	
  4027  05BB  35DF               	lslf	??_wayout+4,f
  4028  05BC  0B89               	decfsz	9,f
  4029  05BD  2DBB               	goto	u5575
  4030  05BE  30A6               	movlw	(low (_table| 0))& (0+255)
  4031  05BF  075F               	addwf	??_wayout+4,w
  4032  05C0  00E0               	movwf	??_wayout+5
  4033  05C1  0865               	movf	_temp_cursor+1,w
  4034  05C2  0760               	addwf	??_wayout+5,w
  4035  05C3  00E1               	movwf	??_wayout+6
  4036  05C4  0861               	movf	??_wayout+6,w
  4037  05C5  0086               	movwf	6
  4038  05C6  0187               	clrf	7
  4039  05C7  085E               	movf	??_wayout+3,w
  4040  05C8  0081               	movwf	1
  4041                           
  4042                           ;wayout.c: 271: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row][
      +                          temp_cursor.col]-5]);
  4043  05C9  0865               	movf	_temp_cursor+1,w
  4044  05CA  00DB               	movwf	??_wayout
  4045  05CB  085B               	movf	??_wayout,w
  4046  05CC  00B9               	movwf	set_point@point_y
  4047  05CD  0864               	movf	_temp_cursor,w
  4048  05CE  00DC               	movwf	??_wayout+1
  4049  05CF  3003               	movlw	3
  4050  05D0                     u5585:	
  4051  05D0  35DC               	lslf	??_wayout+1,f
  4052  05D1  0B89               	decfsz	9,f
  4053  05D2  2DD0               	goto	u5585
  4054  05D3  30A6               	movlw	(low (_table| 0))& (0+255)
  4055  05D4  075C               	addwf	??_wayout+1,w
  4056  05D5  00DD               	movwf	??_wayout+2
  4057  05D6  0865               	movf	_temp_cursor+1,w
  4058  05D7  075D               	addwf	??_wayout+2,w
  4059  05D8  00DE               	movwf	??_wayout+3
  4060  05D9  085E               	movf	??_wayout+3,w
  4061  05DA  0086               	movwf	6
  4062  05DB  0187               	clrf	7
  4063  05DC  0801               	movf	1,w
  4064  05DD  00DF               	movwf	??_wayout+4
  4065  05DE  3002               	movlw	2
  4066  05DF                     u5595:	
  4067  05DF  35DF               	lslf	??_wayout+4,f
  4068  05E0  3EFF               	addlw	-1
  4069  05E1  1D03               	skipz
  4070  05E2  2DDF               	goto	u5595
  4071  05E3  355F               	lslf	??_wayout+4,w
  4072  05E4  3ED8               	addlw	216
  4073  05E5  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  4074  05E6  00E0               	movwf	??_wayout+5
  4075  05E7  0860               	movf	??_wayout+5,w
  4076  05E8  00BA               	movwf	set_point@value
  4077  05E9  0864               	movf	_temp_cursor,w
  4078  05EA  3197  2760         	fcall	_set_point
  4079                           
  4080                           ;wayout.c: 272: break;
  4081  05EC  0008               	return
  4082  05ED                     l3939:	
  4083                           ;wayout.c: 273: case 5:
  4084                           
  4085                           
  4086                           ;wayout.c: 274: key=0;
  4087  05ED  0020               	movlb	0	; select bank0
  4088  05EE  01E9               	clrf	_key
  4089                           
  4090                           ;wayout.c: 275: if(choose(temp_cursor.row,temp_cursor.col))
  4091  05EF  0864               	movf	_temp_cursor,w
  4092  05F0  00DB               	movwf	??_wayout
  4093  05F1  01DC               	clrf	??_wayout+1
  4094  05F2  085B               	movf	??_wayout,w
  4095  05F3  00D0               	movwf	choose@i
  4096  05F4  085C               	movf	??_wayout+1,w
  4097  05F5  00D1               	movwf	choose@i+1
  4098  05F6  0865               	movf	_temp_cursor+1,w
  4099  05F7  00DD               	movwf	??_wayout+2
  4100  05F8  01DE               	clrf	??_wayout+3
  4101  05F9  085D               	movf	??_wayout+2,w
  4102  05FA  00D2               	movwf	choose@j
  4103  05FB  085E               	movf	??_wayout+3,w
  4104  05FC  00D3               	movwf	choose@j+1
  4105  05FD  3188  2081  3183   	fcall	_choose
  4106  0600  3A00               	xorlw	0
  4107  0601  1903               	skipnz
  4108  0602  0008               	return
  4109                           
  4110                           ;wayout.c: 276: {
  4111                           ;wayout.c: 277: total_step++;
  4112  0603  3001               	movlw	1
  4113  0604  0020               	movlb	0	; select bank0
  4114  0605  00DB               	movwf	??_wayout
  4115  0606  085B               	movf	??_wayout,w
  4116  0607  0021               	movlb	1	; select bank1
  4117  0608  07A5               	addwf	_total_step^(0+128),f
  4118                           
  4119                           ;wayout.c: 278: int2string(display_step,5,total_step);
  4120  0609  3005               	movlw	5
  4121  060A  0020               	movlb	0	; select bank0
  4122  060B  00DB               	movwf	??_wayout
  4123  060C  085B               	movf	??_wayout,w
  4124  060D  00AC               	movwf	int2string@begin
  4125  060E  0021               	movlb	1	; select bank1
  4126  060F  0825               	movf	_total_step^(0+128),w
  4127  0610  0020               	movlb	0	; select bank0
  4128  0611  00DC               	movwf	??_wayout+1
  4129  0612  085C               	movf	??_wayout+1,w
  4130  0613  00AD               	movwf	int2string@num
  4131  0614  302A               	movlw	(low (_display_step| (0+256)))& (0+255)
  4132  0615  3193  23D1  3183   	fcall	_int2string
  4133                           
  4134                           ;wayout.c: 279: Display_Chars(2,display_step,5);
  4135  0618  302A               	movlw	low _display_step
  4136  0619  0020               	movlb	0	; select bank0
  4137  061A  00B2               	movwf	Display_Chars@string
  4138  061B  3001               	movlw	high _display_step
  4139  061C  00B3               	movwf	Display_Chars@string+1
  4140  061D  3005               	movlw	5
  4141  061E  00DB               	movwf	??_wayout
  4142  061F  085B               	movf	??_wayout,w
  4143  0620  00B4               	movwf	Display_Chars@y
  4144  0621  3002               	movlw	2
  4145  0622  3194  246C  3183   	fcall	_Display_Chars
  4146                           
  4147                           ;wayout.c: 284: if(check_if_complete())
  4148                           
  4149                           ;wayout.c: 281: else
  4150                           ;wayout.c: 282: break;
  4151                           
  4152                           ;wayout.c: 280: }
  4153  0625  3191  21E4  3183   	fcall	_check_if_complete
  4154  0628  3A00               	xorlw	0
  4155  0629  1903               	skipnz
  4156  062A  0008               	return
  4157                           
  4158                           ;wayout.c: 285: {
  4159                           ;wayout.c: 288: Clear_Screen(0x00);
  4160  062B  3000               	movlw	0
  4161  062C  0020               	movlb	0	; select bank0
  4162  062D  00B2               	movwf	Clear_Screen@value
  4163  062E  00B3               	movwf	Clear_Screen@value+1
  4164  062F  3195  251A  3183   	fcall	_Clear_Screen
  4165                           
  4166                           ;wayout.c: 289: Display_Chars(1, "Success",1);
  4167  0632  30B3               	movlw	low (STR_32| (0+32768))
  4168  0633  0020               	movlb	0	; select bank0
  4169  0634  00B2               	movwf	Display_Chars@string
  4170  0635  3090               	movlw	high (STR_32| (0+32768))
  4171  0636  00B3               	movwf	Display_Chars@string+1
  4172  0637  01B4               	clrf	Display_Chars@y
  4173  0638  0AB4               	incf	Display_Chars@y,f
  4174  0639  3001               	movlw	1
  4175  063A  3194  246C  3183   	fcall	_Display_Chars
  4176                           
  4177                           ;wayout.c: 290: Display_Chars(2, "Press back to exit",1);
  4178  063D  3000               	movlw	low (STR_4| (0+32768))
  4179  063E  0020               	movlb	0	; select bank0
  4180  063F  00B2               	movwf	Display_Chars@string
  4181  0640  3090               	movlw	high (STR_4| (0+32768))
  4182  0641  00B3               	movwf	Display_Chars@string+1
  4183  0642  01B4               	clrf	Display_Chars@y
  4184  0643  0AB4               	incf	Display_Chars@y,f
  4185  0644  3002               	movlw	2
  4186  0645  3194  246C  3183   	fcall	_Display_Chars
  4187  0648                     l3957:	
  4188                           ;wayout.c: 292: ;
  4189                           
  4190                           ;wayout.c: 291: while(key!=6)
  4191                           
  4192  0648  3006               	movlw	6
  4193  0649  0020               	movlb	0	; select bank0
  4194  064A  0669               	xorwf	_key,w
  4195  064B  1D03               	btfss	3,2
  4196  064C  2E48               	goto	l3957
  4197                           
  4198                           ;wayout.c: 293: key = 0;
  4199  064D  01E9               	clrf	_key
  4200                           
  4201                           ;wayout.c: 294: start = 2;
  4202  064E  3002               	movlw	2
  4203  064F  00DB               	movwf	??_wayout
  4204  0650  085B               	movf	??_wayout,w
  4205  0651  0021               	movlb	1	; select bank1
  4206  0652  00A3               	movwf	_start^(0+128)
  4207                           
  4208                           ;wayout.c: 295: level_num = choose_level2();
  4209  0653  318A  22F8  3183   	fcall	_choose_level2
  4210  0656  0020               	movlb	0	; select bank0
  4211  0657  00DB               	movwf	??_wayout
  4212  0658  085B               	movf	??_wayout,w
  4213  0659  00EA               	movwf	_level_num
  4214                           
  4215                           ;wayout.c: 296: if (level_num !=0)
  4216  065A  086A               	movf	_level_num,w
  4217  065B  1903               	btfsc	3,2
  4218  065C  2E62               	goto	l3969
  4219                           
  4220                           ;wayout.c: 297: {
  4221                           ;wayout.c: 298: init_wayout(level_num);
  4222  065D  086A               	movf	_level_num,w
  4223  065E  318A  2214  3183   	fcall	_init_wayout
  4224                           
  4225                           ;wayout.c: 299: }
  4226  0661  2E64               	goto	l3971
  4227  0662                     l3969:	
  4228                           
  4229                           ;wayout.c: 300: else
  4230                           ;wayout.c: 301: {
  4231                           ;wayout.c: 302: start =0;
  4232  0662  0021               	movlb	1	; select bank1
  4233  0663  01A3               	clrf	_start^(0+128)
  4234  0664                     l3971:	
  4235                           ;wayout.c: 307: case 6:
  4236                           
  4237                           ;wayout.c: 305: else
  4238                           ;wayout.c: 306: break;
  4239                           
  4240                           ;wayout.c: 303: }
  4241                           ;wayout.c: 304: }
  4242                           
  4243                           
  4244                           ;wayout.c: 308: key = 0;
  4245  0664  0020               	movlb	0	; select bank0
  4246  0665  01E9               	clrf	_key
  4247                           
  4248                           ;wayout.c: 309: start = 2;
  4249  0666  3002               	movlw	2
  4250  0667  00DB               	movwf	??_wayout
  4251  0668  085B               	movf	??_wayout,w
  4252  0669  0021               	movlb	1	; select bank1
  4253  066A  00A3               	movwf	_start^(0+128)
  4254                           
  4255                           ;wayout.c: 310: level_num = choose_level2();
  4256  066B  318A  22F8  3183   	fcall	_choose_level2
  4257  066E  0020               	movlb	0	; select bank0
  4258  066F  00DB               	movwf	??_wayout
  4259  0670  085B               	movf	??_wayout,w
  4260  0671  00EA               	movwf	_level_num
  4261                           
  4262                           ;wayout.c: 311: if (level_num !=0)
  4263  0672  086A               	movf	_level_num,w
  4264  0673  1903               	btfsc	3,2
  4265  0674  2E79               	goto	l3981
  4266                           
  4267                           ;wayout.c: 312: {
  4268                           ;wayout.c: 313: init_wayout(level_num);
  4269  0675  086A               	movf	_level_num,w
  4270  0676  318A  2214         	fcall	_init_wayout
  4271                           
  4272                           ;wayout.c: 314: }
  4273  0678  0008               	return
  4274  0679                     l3981:	
  4275                           
  4276                           ;wayout.c: 315: else
  4277                           ;wayout.c: 316: {
  4278                           ;wayout.c: 317: start =0;
  4279  0679  0021               	movlb	1	; select bank1
  4280  067A  01A3               	clrf	_start^(0+128)
  4281                           
  4282                           ;wayout.c: 320: }
  4283                           
  4284                           ;wayout.c: 318: }
  4285                           ;wayout.c: 319: break;
  4286  067B  0008               	return
  4287  067C                     l3985:	
  4288  067C  0020               	movlb	0	; select bank0
  4289  067D  0869               	movf	_key,w
  4290                           
  4291                           ; Switch size 1, requested type "space"
  4292                           ; Number of cases is 6, Range of values is 1 to 6
  4293                           ; switch strategies available:
  4294                           ; Name         Instructions Cycles
  4295                           ; simple_byte           19    10 (average)
  4296                           ; direct_byte           21     9 (fixed)
  4297                           ; jumptable            263     9 (fixed)
  4298                           ;	Chosen strategy is simple_byte
  4299  067E  3A01               	xorlw	1	; case 1
  4300  067F  1903               	skipnz
  4301  0680  2B95               	goto	l3891
  4302  0681  3A03               	xorlw	3	; case 2
  4303  0682  1903               	skipnz
  4304  0683  2C2B               	goto	l3903
  4305  0684  3A01               	xorlw	1	; case 3
  4306  0685  1903               	skipnz
  4307  0686  2CC1               	goto	l3915
  4308  0687  3A07               	xorlw	7	; case 4
  4309  0688  1903               	skipnz
  4310  0689  2D57               	goto	l3927
  4311  068A  3A01               	xorlw	1	; case 5
  4312  068B  1903               	skipnz
  4313  068C  2DED               	goto	l3939
  4314  068D  3A03               	xorlw	3	; case 6
  4315  068E  1903               	skipnz
  4316  068F  2E64               	goto	l3971
  4317  0690  2E91               	goto	l779
  4318  0691                     l779:	
  4319  0691  0008               	return
  4320  0692                     __end_of_wayout:	
  4321                           
  4322                           	psect	text4
  4323  0A14                     __ptext4:	
  4324 ;; *************** function _init_wayout *****************
  4325 ;; Defined at:
  4326 ;;		line 218 in file "wayout.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  level_num       1    wreg     unsigned char 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  level_num       1   53[BANK0 ] unsigned char 
  4331 ;;  j               2   56[BANK0 ] int 
  4332 ;;  i               2   54[BANK0 ] int 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  1    wreg      void 
  4335 ;; Registers used:
  4336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;Total ram usage:       21 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    9
  4349 ;; This function calls:
  4350 ;;		_Clear_Screen
  4351 ;;		_draw_wayout_right
  4352 ;;		_set_point
  4353 ;; This function is called by:
  4354 ;;		_run_game
  4355 ;;		_wayout
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function _init_wayout
  4361  0A14                     _init_wayout:	
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in _init_wayout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4365                           ;init_wayout@level_num stored from wreg
  4366  0A14  0020               	movlb	0	; select bank0
  4367  0A15  00D5               	movwf	init_wayout@level_num
  4368                           
  4369                           ;wayout.c: 220: Clear_Screen(0x00);
  4370  0A16  3000               	movlw	0
  4371  0A17  00B2               	movwf	Clear_Screen@value
  4372  0A18  00B3               	movwf	Clear_Screen@value+1
  4373  0A19  3195  251A  318A   	fcall	_Clear_Screen
  4374                           
  4375                           ;wayout.c: 222: for(int i=0;i<8;i++)
  4376  0A1C  0020               	movlb	0	; select bank0
  4377  0A1D  01D6               	clrf	init_wayout@i
  4378  0A1E  01D7               	clrf	init_wayout@i+1
  4379  0A1F  0857               	movf	init_wayout@i+1,w
  4380  0A20  3A80               	xorlw	128
  4381  0A21  00C5               	movwf	??_init_wayout
  4382  0A22  3080               	movlw	128
  4383  0A23  0245               	subwf	??_init_wayout,w
  4384  0A24  3008               	movlw	8
  4385  0A25  1903               	btfsc	3,2
  4386  0A26  0256               	subwf	init_wayout@i,w
  4387  0A27  1803               	btfsc	3,0
  4388  0A28  2ACB               	goto	l3621
  4389  0A29                     l3605:	
  4390                           
  4391                           ;wayout.c: 223: for(int j=0;j<8;j++)
  4392  0A29  0020               	movlb	0	; select bank0
  4393  0A2A  01D8               	clrf	init_wayout@j
  4394  0A2B  01D9               	clrf	init_wayout@j+1
  4395  0A2C  0859               	movf	init_wayout@j+1,w
  4396  0A2D  3A80               	xorlw	128
  4397  0A2E  00C5               	movwf	??_init_wayout
  4398  0A2F  3080               	movlw	128
  4399  0A30  0245               	subwf	??_init_wayout,w
  4400  0A31  3008               	movlw	8
  4401  0A32  1903               	btfsc	3,2
  4402  0A33  0258               	subwf	init_wayout@j,w
  4403  0A34  1803               	btfsc	3,0
  4404  0A35  2ABC               	goto	l3619
  4405  0A36                     l3611:	
  4406                           
  4407                           ;wayout.c: 224: {
  4408                           ;wayout.c: 225: table[i][j]=level[level_num-1][i][j];
  4409  0A36  0020               	movlb	0	; select bank0
  4410  0A37  0857               	movf	init_wayout@i+1,w
  4411  0A38  00C6               	movwf	??_init_wayout+1
  4412  0A39  0856               	movf	init_wayout@i,w
  4413  0A3A  00C5               	movwf	??_init_wayout
  4414  0A3B  35C5               	lslf	??_init_wayout,f
  4415  0A3C  0DC6               	rlf	??_init_wayout+1,f
  4416  0A3D  35C5               	lslf	??_init_wayout,f
  4417  0A3E  0DC6               	rlf	??_init_wayout+1,f
  4418  0A3F  35C5               	lslf	??_init_wayout,f
  4419  0A40  0DC6               	rlf	??_init_wayout+1,f
  4420  0A41  0855               	movf	init_wayout@level_num,w
  4421  0A42  00C7               	movwf	??_init_wayout+2
  4422  0A43  01C8               	clrf	??_init_wayout+3
  4423  0A44  3006               	movlw	6
  4424  0A45                     u4545:	
  4425  0A45  35C7               	lslf	??_init_wayout+2,f
  4426  0A46  0DC8               	rlf	??_init_wayout+3,f
  4427  0A47  0B89               	decfsz	9,f
  4428  0A48  2A45               	goto	u4545
  4429  0A49  0847               	movf	??_init_wayout+2,w
  4430  0A4A  3EC0               	addlw	192
  4431  0A4B  00C9               	movwf	??_init_wayout+4
  4432  0A4C  30FF               	movlw	255
  4433  0A4D  3D48               	addwfc	??_init_wayout+3,w
  4434  0A4E  00CA               	movwf	??_init_wayout+5
  4435  0A4F  3070               	movlw	112
  4436  0A50  00CB               	movwf	??_init_wayout+6
  4437  0A51  3022               	movlw	34
  4438  0A52  00CC               	movwf	??_init_wayout+7
  4439  0A53  0849               	movf	??_init_wayout+4,w
  4440  0A54  074B               	addwf	??_init_wayout+6,w
  4441  0A55  00CD               	movwf	??_init_wayout+8
  4442  0A56  084A               	movf	??_init_wayout+5,w
  4443  0A57  3D4C               	addwfc	??_init_wayout+7,w
  4444  0A58  00CE               	movwf	??_init_wayout+9
  4445  0A59  0845               	movf	??_init_wayout,w
  4446  0A5A  074D               	addwf	??_init_wayout+8,w
  4447  0A5B  00CF               	movwf	??_init_wayout+10
  4448  0A5C  0846               	movf	??_init_wayout+1,w
  4449  0A5D  3D4E               	addwfc	??_init_wayout+9,w
  4450  0A5E  00D0               	movwf	??_init_wayout+11
  4451  0A5F  0858               	movf	init_wayout@j,w
  4452  0A60  074F               	addwf	??_init_wayout+10,w
  4453  0A61  0086               	movwf	6
  4454  0A62  0859               	movf	init_wayout@j+1,w
  4455  0A63  3D50               	addwfc	??_init_wayout+11,w
  4456  0A64  0087               	movwf	7
  4457  0A65  0801               	movf	1,w
  4458  0A66  00D1               	movwf	??_init_wayout+12
  4459  0A67  0856               	movf	init_wayout@i,w
  4460  0A68  00D2               	movwf	??_init_wayout+13
  4461  0A69  3003               	movlw	3
  4462  0A6A                     u4555:	
  4463  0A6A  35D2               	lslf	??_init_wayout+13,f
  4464  0A6B  0B89               	decfsz	9,f
  4465  0A6C  2A6A               	goto	u4555
  4466  0A6D  30A6               	movlw	(low (_table| 0))& (0+255)
  4467  0A6E  0752               	addwf	??_init_wayout+13,w
  4468  0A6F  00D3               	movwf	??_init_wayout+14
  4469  0A70  0858               	movf	init_wayout@j,w
  4470  0A71  0753               	addwf	??_init_wayout+14,w
  4471  0A72  00D4               	movwf	??_init_wayout+15
  4472  0A73  0854               	movf	??_init_wayout+15,w
  4473  0A74  0086               	movwf	6
  4474  0A75  0187               	clrf	7
  4475  0A76  0851               	movf	??_init_wayout+12,w
  4476  0A77  0081               	movwf	1
  4477                           
  4478                           ;wayout.c: 226: if(table[i][j]>0)
  4479  0A78  0856               	movf	init_wayout@i,w
  4480  0A79  00C5               	movwf	??_init_wayout
  4481  0A7A  3003               	movlw	3
  4482  0A7B                     u4565:	
  4483  0A7B  35C5               	lslf	??_init_wayout,f
  4484  0A7C  0B89               	decfsz	9,f
  4485  0A7D  2A7B               	goto	u4565
  4486  0A7E  30A6               	movlw	(low (_table| 0))& (0+255)
  4487  0A7F  0745               	addwf	??_init_wayout,w
  4488  0A80  00C6               	movwf	??_init_wayout+1
  4489  0A81  0858               	movf	init_wayout@j,w
  4490  0A82  0746               	addwf	??_init_wayout+1,w
  4491  0A83  00C7               	movwf	??_init_wayout+2
  4492  0A84  0847               	movf	??_init_wayout+2,w
  4493  0A85  0086               	movwf	6
  4494  0A86  0187               	clrf	7
  4495  0A87  0801               	movf	1,w
  4496  0A88  1903               	btfsc	3,2
  4497  0A89  2AAD               	goto	l3615
  4498                           
  4499                           ;wayout.c: 227: set_point(i,j,screen[table[i][j]]);
  4500  0A8A  0858               	movf	init_wayout@j,w
  4501  0A8B  00C5               	movwf	??_init_wayout
  4502  0A8C  0845               	movf	??_init_wayout,w
  4503  0A8D  00B9               	movwf	set_point@point_y
  4504  0A8E  0856               	movf	init_wayout@i,w
  4505  0A8F  00C6               	movwf	??_init_wayout+1
  4506  0A90  3003               	movlw	3
  4507  0A91                     u4585:	
  4508  0A91  35C6               	lslf	??_init_wayout+1,f
  4509  0A92  0B89               	decfsz	9,f
  4510  0A93  2A91               	goto	u4585
  4511  0A94  30A6               	movlw	(low (_table| 0))& (0+255)
  4512  0A95  0746               	addwf	??_init_wayout+1,w
  4513  0A96  00C7               	movwf	??_init_wayout+2
  4514  0A97  0858               	movf	init_wayout@j,w
  4515  0A98  0747               	addwf	??_init_wayout+2,w
  4516  0A99  00C8               	movwf	??_init_wayout+3
  4517  0A9A  0848               	movf	??_init_wayout+3,w
  4518  0A9B  0086               	movwf	6
  4519  0A9C  0187               	clrf	7
  4520  0A9D  0801               	movf	1,w
  4521  0A9E  00C9               	movwf	??_init_wayout+4
  4522  0A9F  3002               	movlw	2
  4523  0AA0                     u4595:	
  4524  0AA0  35C9               	lslf	??_init_wayout+4,f
  4525  0AA1  3EFF               	addlw	-1
  4526  0AA2  1D03               	skipz
  4527  0AA3  2AA0               	goto	u4595
  4528  0AA4  3549               	lslf	??_init_wayout+4,w
  4529  0AA5  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  4530  0AA6  00CA               	movwf	??_init_wayout+5
  4531  0AA7  084A               	movf	??_init_wayout+5,w
  4532  0AA8  00BA               	movwf	set_point@value
  4533  0AA9  0856               	movf	init_wayout@i,w
  4534  0AAA  3197  2760  318A   	fcall	_set_point
  4535  0AAD                     l3615:	
  4536  0AAD  3001               	movlw	1
  4537  0AAE  0020               	movlb	0	; select bank0
  4538  0AAF  07D8               	addwf	init_wayout@j,f
  4539  0AB0  3000               	movlw	0
  4540  0AB1  3DD9               	addwfc	init_wayout@j+1,f
  4541  0AB2  0859               	movf	init_wayout@j+1,w
  4542  0AB3  3A80               	xorlw	128
  4543  0AB4  00C5               	movwf	??_init_wayout
  4544  0AB5  3080               	movlw	128
  4545  0AB6  0245               	subwf	??_init_wayout,w
  4546  0AB7  3008               	movlw	8
  4547  0AB8  1903               	btfsc	3,2
  4548  0AB9  0258               	subwf	init_wayout@j,w
  4549  0ABA  1C03               	skipc
  4550  0ABB  2A36               	goto	l3611
  4551  0ABC                     l3619:	
  4552  0ABC  3001               	movlw	1
  4553  0ABD  0020               	movlb	0	; select bank0
  4554  0ABE  07D6               	addwf	init_wayout@i,f
  4555  0ABF  3000               	movlw	0
  4556  0AC0  3DD7               	addwfc	init_wayout@i+1,f
  4557  0AC1  0857               	movf	init_wayout@i+1,w
  4558  0AC2  3A80               	xorlw	128
  4559  0AC3  00C5               	movwf	??_init_wayout
  4560  0AC4  3080               	movlw	128
  4561  0AC5  0245               	subwf	??_init_wayout,w
  4562  0AC6  3008               	movlw	8
  4563  0AC7  1903               	btfsc	3,2
  4564  0AC8  0256               	subwf	init_wayout@i,w
  4565  0AC9  1C03               	skipc
  4566  0ACA  2A29               	goto	l3605
  4567  0ACB                     l3621:	
  4568                           
  4569                           ;wayout.c: 228: }
  4570                           ;wayout.c: 229: temp_cursor.col=0;
  4571  0ACB  0020               	movlb	0	; select bank0
  4572  0ACC  01E5               	clrf	_temp_cursor+1
  4573                           
  4574                           ;wayout.c: 230: temp_cursor.row=0;
  4575  0ACD  01E4               	clrf	_temp_cursor
  4576                           
  4577                           ;wayout.c: 231: table[0][0] = table[0][0] | 0x08;
  4578  0ACE  0021               	movlb	1	; select bank1
  4579  0ACF  0826               	movf	_table^(0+128),w
  4580  0AD0  3808               	iorlw	8
  4581  0AD1  0020               	movlb	0	; select bank0
  4582  0AD2  00C5               	movwf	??_init_wayout
  4583  0AD3  0845               	movf	??_init_wayout,w
  4584  0AD4  0021               	movlb	1	; select bank1
  4585  0AD5  00A6               	movwf	_table^(0+128)
  4586                           
  4587                           ;wayout.c: 232: set_point(0,0,screen[table[0][0]-5]);
  4588  0AD6  0020               	movlb	0	; select bank0
  4589  0AD7  01B9               	clrf	set_point@point_y
  4590  0AD8  0021               	movlb	1	; select bank1
  4591  0AD9  0826               	movf	_table^(0+128),w
  4592  0ADA  0020               	movlb	0	; select bank0
  4593  0ADB  00C5               	movwf	??_init_wayout
  4594  0ADC  3002               	movlw	2
  4595  0ADD                     u4625:	
  4596  0ADD  35C5               	lslf	??_init_wayout,f
  4597  0ADE  3EFF               	addlw	-1
  4598  0ADF  1D03               	skipz
  4599  0AE0  2ADD               	goto	u4625
  4600  0AE1  3545               	lslf	??_init_wayout,w
  4601  0AE2  3ED8               	addlw	216
  4602  0AE3  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  4603  0AE4  00C6               	movwf	??_init_wayout+1
  4604  0AE5  0846               	movf	??_init_wayout+1,w
  4605  0AE6  00BA               	movwf	set_point@value
  4606  0AE7  3000               	movlw	0
  4607  0AE8  3197  2760  318A   	fcall	_set_point
  4608                           
  4609                           ;wayout.c: 233: total_step=0;
  4610  0AEB  0021               	movlb	1	; select bank1
  4611  0AEC  01A5               	clrf	_total_step^(0+128)
  4612                           
  4613                           ;wayout.c: 234: draw_wayout_right(level_num);
  4614  0AED  0020               	movlb	0	; select bank0
  4615  0AEE  0855               	movf	init_wayout@level_num,w
  4616  0AEF  00C5               	movwf	??_init_wayout
  4617  0AF0  01C6               	clrf	??_init_wayout+1
  4618  0AF1  0845               	movf	??_init_wayout,w
  4619  0AF2  00BE               	movwf	draw_wayout_right@level
  4620  0AF3  0846               	movf	??_init_wayout+1,w
  4621  0AF4  00BF               	movwf	draw_wayout_right@level+1
  4622  0AF5  3186  2692         	fcall	_draw_wayout_right
  4623  0AF7  0008               	return
  4624  0AF8                     __end_of_init_wayout:	
  4625                           
  4626                           	psect	text5
  4627  0692                     __ptext5:	
  4628 ;; *************** function _draw_wayout_right *****************
  4629 ;; Defined at:
  4630 ;;		line 3 in file "wayout.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  level           2   30[BANK0 ] int 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  i               1   35[BANK0 ] unsigned char 
  4635 ;;  j               1   34[BANK0 ] unsigned char 
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4645 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4649 ;;Total ram usage:        6 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    8
  4652 ;; This function calls:
  4653 ;;		_Display_Chars
  4654 ;;		_Write_Com
  4655 ;;		_Write_Data
  4656 ;;		_delay_100us
  4657 ;;		_int2string
  4658 ;; This function is called by:
  4659 ;;		_init_wayout
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           
  4664                           ;psect for function _draw_wayout_right
  4665  0692                     _draw_wayout_right:	
  4666                           
  4667                           ;wayout.c: 4: unsigned char i,j;
  4668                           ;wayout.c: 5: Write_Com(0x01);
  4669                           
  4670                           ;incstack = 0
  4671                           ; Regs used in _draw_wayout_right: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4672  0692  3001               	movlw	1
  4673  0693  0020               	movlb	0	; select bank0
  4674  0694  00B0               	movwf	Write_Com@com
  4675  0695  3000               	movlw	0
  4676  0696  00B1               	movwf	Write_Com@com+1
  4677  0697  319F  2734  3186   	fcall	_Write_Com
  4678                           
  4679                           ;wayout.c: 6: delay_100us(100);
  4680  069A  3064               	movlw	100
  4681  069B  0020               	movlb	0	; select bank0
  4682  069C  00A9               	movwf	delay_100us@cnt
  4683  069D  3000               	movlw	0
  4684  069E  00AA               	movwf	delay_100us@cnt+1
  4685  069F  3190  20F5  3186   	fcall	_delay_100us
  4686                           
  4687                           ;wayout.c: 7: Write_Com(0x34);
  4688  06A2  3034               	movlw	52
  4689  06A3  0020               	movlb	0	; select bank0
  4690  06A4  00B0               	movwf	Write_Com@com
  4691  06A5  3000               	movlw	0
  4692  06A6  00B1               	movwf	Write_Com@com+1
  4693  06A7  319F  2734  3186   	fcall	_Write_Com
  4694                           
  4695                           ;wayout.c: 8: for(i=0; i<64; i++) {
  4696  06AA  0020               	movlb	0	; select bank0
  4697  06AB  01C3               	clrf	draw_wayout_right@i
  4698  06AC  3040               	movlw	64
  4699  06AD  0243               	subwf	draw_wayout_right@i,w
  4700  06AE  1803               	btfsc	3,0
  4701  06AF  2F64               	goto	l3235
  4702  06B0                     l3189:	
  4703                           
  4704                           ;wayout.c: 9: if(i < 16) {
  4705  06B0  3010               	movlw	16
  4706  06B1  0243               	subwf	draw_wayout_right@i,w
  4707  06B2  1803               	skipnc
  4708  06B3  2EE2               	goto	l3205
  4709                           
  4710                           ;wayout.c: 10: Write_Com(0x80+i);
  4711  06B4  0843               	movf	draw_wayout_right@i,w
  4712  06B5  3E80               	addlw	128
  4713  06B6  00B0               	movwf	Write_Com@com
  4714  06B7  3000               	movlw	0
  4715  06B8  1803               	skipnc
  4716  06B9  3001               	movlw	1
  4717  06BA  00B1               	movwf	Write_Com@com+1
  4718  06BB  319F  2734  3186   	fcall	_Write_Com
  4719                           
  4720                           ;wayout.c: 11: Write_Com(0x84);
  4721  06BE  3084               	movlw	132
  4722  06BF  0020               	movlb	0	; select bank0
  4723  06C0  00B0               	movwf	Write_Com@com
  4724  06C1  3000               	movlw	0
  4725  06C2  00B1               	movwf	Write_Com@com+1
  4726  06C3  319F  2734  3186   	fcall	_Write_Com
  4727                           
  4728                           ;wayout.c: 12: Write_Data(0x7f);
  4729  06C6  307F               	movlw	127
  4730  06C7  0020               	movlb	0	; select bank0
  4731  06C8  00B0               	movwf	Write_Data@dat
  4732  06C9  3000               	movlw	0
  4733  06CA  00B1               	movwf	Write_Data@dat+1
  4734  06CB  319F  2743  3186   	fcall	_Write_Data
  4735                           
  4736                           ;wayout.c: 13: for(j=1; j<8; j++) {
  4737  06CE  0020               	movlb	0	; select bank0
  4738  06CF  01C2               	clrf	draw_wayout_right@j
  4739  06D0  0AC2               	incf	draw_wayout_right@j,f
  4740  06D1                     L1:	
  4741  06D1  3008               	movlw	8
  4742  06D2  0242               	subwf	draw_wayout_right@j,w
  4743  06D3  1803               	btfsc	3,0
  4744  06D4  2F5B               	goto	l3231
  4745                           
  4746                           ;wayout.c: 14: Write_Data(0xff);
  4747  06D5  30FF               	movlw	255
  4748  06D6  00B0               	movwf	Write_Data@dat
  4749  06D7  3000               	movlw	0
  4750  06D8  00B1               	movwf	Write_Data@dat+1
  4751  06D9  319F  2743  3186   	fcall	_Write_Data
  4752  06DC  3001               	movlw	1
  4753  06DD  0020               	movlb	0	; select bank0
  4754  06DE  00C0               	movwf	??_draw_wayout_right
  4755  06DF  0840               	movf	??_draw_wayout_right,w
  4756  06E0  07C2               	addwf	draw_wayout_right@j,f
  4757  06E1  2ED1               	goto	L1
  4758  06E2                     l3205:	
  4759                           ;wayout.c: 15: }
  4760                           ;wayout.c: 16: }
  4761                           
  4762                           
  4763                           ;wayout.c: 17: else if(i < 32 && i >= 16) {
  4764  06E2  3020               	movlw	32
  4765  06E3  0243               	subwf	draw_wayout_right@i,w
  4766  06E4  1803               	skipnc
  4767  06E5  2F05               	goto	l3211
  4768  06E6  3010               	movlw	16
  4769  06E7  0243               	subwf	draw_wayout_right@i,w
  4770  06E8  1C03               	skipc
  4771  06E9  2F05               	goto	l3211
  4772                           
  4773                           ;wayout.c: 18: Write_Com(0x80+i);
  4774  06EA  0843               	movf	draw_wayout_right@i,w
  4775  06EB  3E80               	addlw	128
  4776  06EC  00B0               	movwf	Write_Com@com
  4777  06ED  3000               	movlw	0
  4778  06EE  1803               	skipnc
  4779  06EF  3001               	movlw	1
  4780  06F0  00B1               	movwf	Write_Com@com+1
  4781  06F1  319F  2734  3186   	fcall	_Write_Com
  4782                           
  4783                           ;wayout.c: 19: Write_Com(0x84);
  4784  06F4  3084               	movlw	132
  4785  06F5  0020               	movlb	0	; select bank0
  4786  06F6  00B0               	movwf	Write_Com@com
  4787  06F7  3000               	movlw	0
  4788  06F8  00B1               	movwf	Write_Com@com+1
  4789  06F9  319F  2734  3186   	fcall	_Write_Com
  4790                           
  4791                           ;wayout.c: 20: Write_Data(0b01111000);
  4792  06FC  3078               	movlw	120
  4793  06FD  0020               	movlb	0	; select bank0
  4794  06FE  00B0               	movwf	Write_Data@dat
  4795  06FF  3000               	movlw	0
  4796  0700  00B1               	movwf	Write_Data@dat+1
  4797  0701  319F  2743  3186   	fcall	_Write_Data
  4798                           
  4799                           ;wayout.c: 21: }
  4800  0704  2F5B               	goto	l3231
  4801  0705                     l3211:	
  4802                           
  4803                           ;wayout.c: 22: else if(i < 48 && i >= 32) {
  4804  0705  3030               	movlw	48
  4805  0706  0020               	movlb	0	; select bank0
  4806  0707  0243               	subwf	draw_wayout_right@i,w
  4807  0708  1803               	skipnc
  4808  0709  2F29               	goto	l3217
  4809  070A  3020               	movlw	32
  4810  070B  0243               	subwf	draw_wayout_right@i,w
  4811  070C  1C03               	skipc
  4812  070D  2F29               	goto	l3217
  4813                           
  4814                           ;wayout.c: 23: Write_Com(0x80+(i-32));
  4815  070E  0843               	movf	draw_wayout_right@i,w
  4816  070F  3E60               	addlw	96
  4817  0710  00B0               	movwf	Write_Com@com
  4818  0711  3000               	movlw	0
  4819  0712  1803               	skipnc
  4820  0713  3001               	movlw	1
  4821  0714  00B1               	movwf	Write_Com@com+1
  4822  0715  319F  2734  3186   	fcall	_Write_Com
  4823                           
  4824                           ;wayout.c: 24: Write_Com(0x8C);
  4825  0718  308C               	movlw	140
  4826  0719  0020               	movlb	0	; select bank0
  4827  071A  00B0               	movwf	Write_Com@com
  4828  071B  3000               	movlw	0
  4829  071C  00B1               	movwf	Write_Com@com+1
  4830  071D  319F  2734  3186   	fcall	_Write_Com
  4831                           
  4832                           ;wayout.c: 25: Write_Data(0b01111000);
  4833  0720  3078               	movlw	120
  4834  0721  0020               	movlb	0	; select bank0
  4835  0722  00B0               	movwf	Write_Data@dat
  4836  0723  3000               	movlw	0
  4837  0724  00B1               	movwf	Write_Data@dat+1
  4838  0725  319F  2743  3186   	fcall	_Write_Data
  4839                           
  4840                           ;wayout.c: 26: }
  4841  0728  2F5B               	goto	l3231
  4842  0729                     l3217:	
  4843                           
  4844                           ;wayout.c: 27: else {
  4845                           ;wayout.c: 28: Write_Com(0x80+(i-32));
  4846  0729  0020               	movlb	0	; select bank0
  4847  072A  0843               	movf	draw_wayout_right@i,w
  4848  072B  3E60               	addlw	96
  4849  072C  00B0               	movwf	Write_Com@com
  4850  072D  3000               	movlw	0
  4851  072E  1803               	skipnc
  4852  072F  3001               	movlw	1
  4853  0730  00B1               	movwf	Write_Com@com+1
  4854  0731  319F  2734  3186   	fcall	_Write_Com
  4855                           
  4856                           ;wayout.c: 29: Write_Com(0x8C);
  4857  0734  308C               	movlw	140
  4858  0735  0020               	movlb	0	; select bank0
  4859  0736  00B0               	movwf	Write_Com@com
  4860  0737  3000               	movlw	0
  4861  0738  00B1               	movwf	Write_Com@com+1
  4862  0739  319F  2734  3186   	fcall	_Write_Com
  4863                           
  4864                           ;wayout.c: 30: Write_Data(0x7f);
  4865  073C  307F               	movlw	127
  4866  073D  0020               	movlb	0	; select bank0
  4867  073E  00B0               	movwf	Write_Data@dat
  4868  073F  3000               	movlw	0
  4869  0740  00B1               	movwf	Write_Data@dat+1
  4870  0741  319F  2743  3186   	fcall	_Write_Data
  4871                           
  4872                           ;wayout.c: 31: for(j=1; j<8; j++) {
  4873  0744  0020               	movlb	0	; select bank0
  4874  0745  01C2               	clrf	draw_wayout_right@j
  4875  0746  0AC2               	incf	draw_wayout_right@j,f
  4876  0747  3008               	movlw	8
  4877  0748  0242               	subwf	draw_wayout_right@j,w
  4878  0749  1803               	btfsc	3,0
  4879  074A  2F5B               	goto	l3231
  4880  074B                     l3225:	
  4881                           
  4882                           ;wayout.c: 32: Write_Data(0xff);
  4883  074B  30FF               	movlw	255
  4884  074C  00B0               	movwf	Write_Data@dat
  4885  074D  3000               	movlw	0
  4886  074E  00B1               	movwf	Write_Data@dat+1
  4887  074F  319F  2743  3186   	fcall	_Write_Data
  4888  0752  3001               	movlw	1
  4889  0753  0020               	movlb	0	; select bank0
  4890  0754  00C0               	movwf	??_draw_wayout_right
  4891  0755  0840               	movf	??_draw_wayout_right,w
  4892  0756  07C2               	addwf	draw_wayout_right@j,f
  4893  0757  3008               	movlw	8
  4894  0758  0242               	subwf	draw_wayout_right@j,w
  4895  0759  1C03               	skipc
  4896  075A  2F4B               	goto	l3225
  4897  075B                     l3231:	
  4898  075B  3001               	movlw	1
  4899  075C  0020               	movlb	0	; select bank0
  4900  075D  00C0               	movwf	??_draw_wayout_right
  4901  075E  0840               	movf	??_draw_wayout_right,w
  4902  075F  07C3               	addwf	draw_wayout_right@i,f
  4903  0760  3040               	movlw	64
  4904  0761  0243               	subwf	draw_wayout_right@i,w
  4905  0762  1C03               	skipc
  4906  0763  2EB0               	goto	l3189
  4907  0764                     l3235:	
  4908                           
  4909                           ;wayout.c: 33: }
  4910                           ;wayout.c: 34: }
  4911                           ;wayout.c: 35: }
  4912                           ;wayout.c: 36: Write_Com(0x36);
  4913  0764  3036               	movlw	54
  4914  0765  00B0               	movwf	Write_Com@com
  4915  0766  3000               	movlw	0
  4916  0767  00B1               	movwf	Write_Com@com+1
  4917  0768  319F  2734  3186   	fcall	_Write_Com
  4918                           
  4919                           ;wayout.c: 37: Write_Com(0x30);
  4920  076B  3030               	movlw	48
  4921  076C  0020               	movlb	0	; select bank0
  4922  076D  00B0               	movwf	Write_Com@com
  4923  076E  3000               	movlw	0
  4924  076F  00B1               	movwf	Write_Com@com+1
  4925  0770  319F  2734  3186   	fcall	_Write_Com
  4926                           
  4927                           ;wayout.c: 38: int2string(display_step,5,total_step);
  4928  0773  3005               	movlw	5
  4929  0774  0020               	movlb	0	; select bank0
  4930  0775  00C0               	movwf	??_draw_wayout_right
  4931  0776  0840               	movf	??_draw_wayout_right,w
  4932  0777  00AC               	movwf	int2string@begin
  4933  0778  0021               	movlb	1	; select bank1
  4934  0779  0825               	movf	_total_step^(0+128),w
  4935  077A  0020               	movlb	0	; select bank0
  4936  077B  00C1               	movwf	??_draw_wayout_right+1
  4937  077C  0841               	movf	??_draw_wayout_right+1,w
  4938  077D  00AD               	movwf	int2string@num
  4939  077E  302A               	movlw	(low (_display_step| (0+256)))& (0+255)
  4940  077F  3193  23D1  3186   	fcall	_int2string
  4941                           
  4942                           ;wayout.c: 39: Display_Chars(2,display_step,5);
  4943  0782  302A               	movlw	low _display_step
  4944  0783  0020               	movlb	0	; select bank0
  4945  0784  00B2               	movwf	Display_Chars@string
  4946  0785  3001               	movlw	high _display_step
  4947  0786  00B3               	movwf	Display_Chars@string+1
  4948  0787  3005               	movlw	5
  4949  0788  00C0               	movwf	??_draw_wayout_right
  4950  0789  0840               	movf	??_draw_wayout_right,w
  4951  078A  00B4               	movwf	Display_Chars@y
  4952  078B  3002               	movlw	2
  4953  078C  3194  246C  3186   	fcall	_Display_Chars
  4954                           
  4955                           ;wayout.c: 40: if(level == 1)
  4956  078F  0020               	movlb	0	; select bank0
  4957  0790  033E               	decf	draw_wayout_right@level,w
  4958  0791  043F               	iorwf	draw_wayout_right@level+1,w
  4959  0792  1D03               	btfss	3,2
  4960  0793  2FA0               	goto	l3245
  4961                           
  4962                           ;wayout.c: 41: Display_Chars(3," Min:01",5);
  4963  0794  305B               	movlw	low (STR_16| (0+32768))
  4964  0795  00B2               	movwf	Display_Chars@string
  4965  0796  3090               	movlw	high (STR_16| (0+32768))
  4966  0797  00B3               	movwf	Display_Chars@string+1
  4967  0798  3005               	movlw	5
  4968  0799  00C0               	movwf	??_draw_wayout_right
  4969  079A  0840               	movf	??_draw_wayout_right,w
  4970  079B  00B4               	movwf	Display_Chars@y
  4971  079C  3003               	movlw	3
  4972  079D  3194  246C  3186   	fcall	_Display_Chars
  4973  07A0                     l3245:	
  4974                           
  4975                           ;wayout.c: 42: if(level == 2)
  4976  07A0  3002               	movlw	2
  4977  07A1  0020               	movlb	0	; select bank0
  4978  07A2  063E               	xorwf	draw_wayout_right@level,w
  4979  07A3  043F               	iorwf	draw_wayout_right@level+1,w
  4980  07A4  1D03               	btfss	3,2
  4981  07A5  2FB2               	goto	l3249
  4982                           
  4983                           ;wayout.c: 43: Display_Chars(3," Min:02",5);
  4984  07A6  306B               	movlw	low (STR_17| (0+32768))
  4985  07A7  00B2               	movwf	Display_Chars@string
  4986  07A8  3090               	movlw	high (STR_17| (0+32768))
  4987  07A9  00B3               	movwf	Display_Chars@string+1
  4988  07AA  3005               	movlw	5
  4989  07AB  00C0               	movwf	??_draw_wayout_right
  4990  07AC  0840               	movf	??_draw_wayout_right,w
  4991  07AD  00B4               	movwf	Display_Chars@y
  4992  07AE  3003               	movlw	3
  4993  07AF  3194  246C  3186   	fcall	_Display_Chars
  4994  07B2                     l3249:	
  4995                           
  4996                           ;wayout.c: 44: if(level == 3)
  4997  07B2  3003               	movlw	3
  4998  07B3  0020               	movlb	0	; select bank0
  4999  07B4  063E               	xorwf	draw_wayout_right@level,w
  5000  07B5  043F               	iorwf	draw_wayout_right@level+1,w
  5001  07B6  1D03               	btfss	3,2
  5002  07B7  2FC4               	goto	l3253
  5003                           
  5004                           ;wayout.c: 45: Display_Chars(3," Min:03",5);
  5005  07B8  307B               	movlw	low (STR_18| (0+32768))
  5006  07B9  00B2               	movwf	Display_Chars@string
  5007  07BA  3090               	movlw	high (STR_18| (0+32768))
  5008  07BB  00B3               	movwf	Display_Chars@string+1
  5009  07BC  3005               	movlw	5
  5010  07BD  00C0               	movwf	??_draw_wayout_right
  5011  07BE  0840               	movf	??_draw_wayout_right,w
  5012  07BF  00B4               	movwf	Display_Chars@y
  5013  07C0  3003               	movlw	3
  5014  07C1  3194  246C  3186   	fcall	_Display_Chars
  5015  07C4                     l3253:	
  5016                           
  5017                           ;wayout.c: 46: if(level == 4)
  5018  07C4  3004               	movlw	4
  5019  07C5  0020               	movlb	0	; select bank0
  5020  07C6  063E               	xorwf	draw_wayout_right@level,w
  5021  07C7  043F               	iorwf	draw_wayout_right@level+1,w
  5022  07C8  1D03               	btfss	3,2
  5023  07C9  2FD6               	goto	l3257
  5024                           
  5025                           ;wayout.c: 47: Display_Chars(3," Min:05",5);
  5026  07CA  309B               	movlw	low (STR_19| (0+32768))
  5027  07CB  00B2               	movwf	Display_Chars@string
  5028  07CC  3090               	movlw	high (STR_19| (0+32768))
  5029  07CD  00B3               	movwf	Display_Chars@string+1
  5030  07CE  3005               	movlw	5
  5031  07CF  00C0               	movwf	??_draw_wayout_right
  5032  07D0  0840               	movf	??_draw_wayout_right,w
  5033  07D1  00B4               	movwf	Display_Chars@y
  5034  07D2  3003               	movlw	3
  5035  07D3  3194  246C  3186   	fcall	_Display_Chars
  5036  07D6                     l3257:	
  5037                           
  5038                           ;wayout.c: 48: if(level == 5)
  5039  07D6  3005               	movlw	5
  5040  07D7  0020               	movlb	0	; select bank0
  5041  07D8  063E               	xorwf	draw_wayout_right@level,w
  5042  07D9  043F               	iorwf	draw_wayout_right@level+1,w
  5043  07DA  1D03               	btfss	3,2
  5044  07DB  2FE8               	goto	l3261
  5045                           
  5046                           ;wayout.c: 49: Display_Chars(3," Min:07",5);
  5047  07DC  30AB               	movlw	low (STR_20| (0+32768))
  5048  07DD  00B2               	movwf	Display_Chars@string
  5049  07DE  3090               	movlw	high (STR_20| (0+32768))
  5050  07DF  00B3               	movwf	Display_Chars@string+1
  5051  07E0  3005               	movlw	5
  5052  07E1  00C0               	movwf	??_draw_wayout_right
  5053  07E2  0840               	movf	??_draw_wayout_right,w
  5054  07E3  00B4               	movwf	Display_Chars@y
  5055  07E4  3003               	movlw	3
  5056  07E5  3194  246C  3186   	fcall	_Display_Chars
  5057  07E8                     l3261:	
  5058                           
  5059                           ;wayout.c: 50: if(level == 6)
  5060  07E8  3006               	movlw	6
  5061  07E9  0020               	movlb	0	; select bank0
  5062  07EA  063E               	xorwf	draw_wayout_right@level,w
  5063  07EB  043F               	iorwf	draw_wayout_right@level+1,w
  5064  07EC  1D03               	btfss	3,2
  5065  07ED  0008               	return
  5066                           
  5067                           ;wayout.c: 51: Display_Chars(3," Min:04",5);
  5068  07EE  308B               	movlw	low (STR_21| (0+32768))
  5069  07EF  00B2               	movwf	Display_Chars@string
  5070  07F0  3090               	movlw	high (STR_21| (0+32768))
  5071  07F1  00B3               	movwf	Display_Chars@string+1
  5072  07F2  3005               	movlw	5
  5073  07F3  00C0               	movwf	??_draw_wayout_right
  5074  07F4  0840               	movf	??_draw_wayout_right,w
  5075  07F5  00B4               	movwf	Display_Chars@y
  5076  07F6  3003               	movlw	3
  5077  07F7  3194  246C         	fcall	_Display_Chars
  5078  07F9  0008               	return
  5079  07FA                     __end_of_draw_wayout_right:	
  5080                           
  5081                           	psect	text6
  5082  0AF8                     __ptext6:	
  5083 ;; *************** function _choose_level2 *****************
  5084 ;; Defined at:
  5085 ;;		line 149 in file "wayout.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;		None
  5088 ;; Auto vars:     Size  Location     Type
  5089 ;;  offset          2   37[BANK0 ] int 
  5090 ;;  tag             2   35[BANK0 ] int 
  5091 ;;  step            1   34[BANK0 ] unsigned char 
  5092 ;;  max_level3      1   33[BANK0 ] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      unsigned char 
  5095 ;; Registers used:
  5096 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;Total ram usage:        8 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    9
  5109 ;; This function calls:
  5110 ;;		_Clear_Screen
  5111 ;;		_Display_Char
  5112 ;;		_Display_Chars
  5113 ;;		_init_environment
  5114 ;;		_set_menu
  5115 ;;		_wayout_display1
  5116 ;;		_wayout_display2
  5117 ;; This function is called by:
  5118 ;;		_run_game
  5119 ;;		_wayout
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           
  5124                           ;psect for function _choose_level2
  5125  0AF8                     _choose_level2:	
  5126                           
  5127                           ;wayout.c: 151: Clear_Screen(0x00);
  5128                           
  5129                           ;incstack = 0
  5130                           ; Regs used in _choose_level2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5131  0AF8  3000               	movlw	0
  5132  0AF9  0020               	movlb	0	; select bank0
  5133  0AFA  00B2               	movwf	Clear_Screen@value
  5134  0AFB  00B3               	movwf	Clear_Screen@value+1
  5135  0AFC  3195  251A  318A   	fcall	_Clear_Screen
  5136                           
  5137                           ;wayout.c: 152: temp_cursor.row=0;
  5138  0AFF  0020               	movlb	0	; select bank0
  5139  0B00  01E4               	clrf	_temp_cursor
  5140                           
  5141                           ;wayout.c: 153: temp_cursor.col=0;
  5142  0B01  01E5               	clrf	_temp_cursor+1
  5143                           
  5144                           ;wayout.c: 154: char max_level3=8;
  5145  0B02  3008               	movlw	8
  5146  0B03  00BF               	movwf	??_choose_level2
  5147  0B04  083F               	movf	??_choose_level2,w
  5148  0B05  00C1               	movwf	choose_level2@max_level3
  5149                           
  5150                           ;wayout.c: 155: char step =2;
  5151  0B06  3002               	movlw	2
  5152  0B07  00BF               	movwf	??_choose_level2
  5153  0B08  083F               	movf	??_choose_level2,w
  5154  0B09  00C2               	movwf	choose_level2@step
  5155                           
  5156                           ;wayout.c: 156: int tag = 0;
  5157  0B0A  01C3               	clrf	choose_level2@tag
  5158  0B0B  01C4               	clrf	choose_level2@tag+1
  5159                           
  5160                           ;wayout.c: 157: int offset = 0;
  5161  0B0C  01C5               	clrf	choose_level2@offset
  5162  0B0D  01C6               	clrf	choose_level2@offset+1
  5163                           
  5164                           ;wayout.c: 159: arrow = 1;
  5165  0B0E  01E7               	clrf	_arrow
  5166  0B0F  0AE7               	incf	_arrow,f
  5167                           
  5168                           ;wayout.c: 160: Display_Char(arrow, 0x1A, 1);
  5169  0B10  301A               	movlw	26
  5170  0B11  00BF               	movwf	??_choose_level2
  5171  0B12  083F               	movf	??_choose_level2,w
  5172  0B13  00B2               	movwf	Display_Char@data
  5173  0B14  01B3               	clrf	Display_Char@y
  5174  0B15  0AB3               	incf	Display_Char@y,f
  5175  0B16  0867               	movf	_arrow,w
  5176  0B17  3192  22BE  318A   	fcall	_Display_Char
  5177                           
  5178                           ;wayout.c: 161: wayout_display1();
  5179  0B1A  3192  2216  318A   	fcall	_wayout_display1
  5180  0B1D  2BD0               	goto	l3515
  5181  0B1E                     l3517:	
  5182                           
  5183                           ;wayout.c: 165: {
  5184                           ;wayout.c: 166: key=0;
  5185  0B1E  01E9               	clrf	_key
  5186                           
  5187                           ;wayout.c: 167: if(arrow != 1) {
  5188  0B1F  0367               	decf	_arrow,w
  5189  0B20  1903               	btfsc	3,2
  5190  0B21  2BD0               	goto	l3515
  5191                           
  5192                           ;wayout.c: 168: if(arrow == 4) {
  5193  0B22  3004               	movlw	4
  5194  0B23  0667               	xorwf	_arrow,w
  5195  0B24  1D03               	btfss	3,2
  5196  0B25  2B46               	goto	l3535
  5197                           
  5198                           ;wayout.c: 169: Clear_Screen(0x00);
  5199  0B26  3000               	movlw	0
  5200  0B27  00B2               	movwf	Clear_Screen@value
  5201  0B28  00B3               	movwf	Clear_Screen@value+1
  5202  0B29  3195  251A  318A   	fcall	_Clear_Screen
  5203                           
  5204                           ;wayout.c: 170: wayout_display1();
  5205  0B2C  3192  2216  318A   	fcall	_wayout_display1
  5206                           
  5207                           ;wayout.c: 171: tag = 0;
  5208  0B2F  0020               	movlb	0	; select bank0
  5209  0B30  01C3               	clrf	choose_level2@tag
  5210  0B31  01C4               	clrf	choose_level2@tag+1
  5211                           
  5212                           ;wayout.c: 172: arrow--;
  5213  0B32  3001               	movlw	1
  5214  0B33  02E7               	subwf	_arrow,f
  5215                           
  5216                           ;wayout.c: 173: offset = arrow;
  5217  0B34  0867               	movf	_arrow,w
  5218  0B35  00BF               	movwf	??_choose_level2
  5219  0B36  01C0               	clrf	??_choose_level2+1
  5220  0B37  083F               	movf	??_choose_level2,w
  5221  0B38  00C5               	movwf	choose_level2@offset
  5222  0B39  0840               	movf	??_choose_level2+1,w
  5223  0B3A  00C6               	movwf	choose_level2@offset+1
  5224                           
  5225                           ;wayout.c: 174: Display_Char(offset, 0x1A, 1);
  5226  0B3B  301A               	movlw	26
  5227  0B3C  00BF               	movwf	??_choose_level2
  5228  0B3D  083F               	movf	??_choose_level2,w
  5229  0B3E  00B2               	movwf	Display_Char@data
  5230  0B3F  01B3               	clrf	Display_Char@y
  5231  0B40  0AB3               	incf	Display_Char@y,f
  5232  0B41  0845               	movf	choose_level2@offset,w
  5233  0B42  3192  22BE  318A   	fcall	_Display_Char
  5234                           
  5235                           ;wayout.c: 175: } else {
  5236  0B45  2BD0               	goto	l3515
  5237  0B46                     l3535:	
  5238                           
  5239                           ;wayout.c: 176: arrow--;
  5240  0B46  3001               	movlw	1
  5241  0B47  0020               	movlb	0	; select bank0
  5242  0B48  02E7               	subwf	_arrow,f
  5243                           
  5244                           ;wayout.c: 177: offset = tag ? arrow-2 : arrow;
  5245  0B49  0843               	movf	choose_level2@tag,w
  5246  0B4A  0444               	iorwf	choose_level2@tag+1,w
  5247  0B4B  1D03               	btfss	3,2
  5248  0B4C  2B54               	goto	l3539
  5249  0B4D  0867               	movf	_arrow,w
  5250  0B4E  00BF               	movwf	??_choose_level2
  5251  0B4F  01C0               	clrf	??_choose_level2+1
  5252  0B50  083F               	movf	??_choose_level2,w
  5253  0B51  00C5               	movwf	choose_level2@offset
  5254  0B52  0840               	movf	??_choose_level2+1,w
  5255  0B53  2B5A               	goto	L2
  5256  0B54                     l3539:	
  5257  0B54  0867               	movf	_arrow,w
  5258  0B55  3EFE               	addlw	254
  5259  0B56  00C5               	movwf	choose_level2@offset
  5260  0B57  30FF               	movlw	255
  5261  0B58  1803               	skipnc
  5262  0B59  3000               	movlw	0
  5263  0B5A                     L2:	
  5264  0B5A  00C6               	movwf	choose_level2@offset+1
  5265                           
  5266                           ;wayout.c: 178: Display_Chars(offset+1, " ", 1);
  5267  0B5B  30CF               	movlw	low (STR_1| (0+32768))
  5268  0B5C  00B2               	movwf	Display_Chars@string
  5269  0B5D  3090               	movlw	high (STR_1| (0+32768))
  5270  0B5E  00B3               	movwf	Display_Chars@string+1
  5271  0B5F  01B4               	clrf	Display_Chars@y
  5272  0B60  0AB4               	incf	Display_Chars@y,f
  5273  0B61  0845               	movf	choose_level2@offset,w
  5274  0B62  3E01               	addlw	1
  5275  0B63  3194  246C  318A   	fcall	_Display_Chars
  5276                           
  5277                           ;wayout.c: 179: Display_Char(offset, 0x1A, 1);
  5278  0B66  301A               	movlw	26
  5279  0B67  0020               	movlb	0	; select bank0
  5280  0B68  00BF               	movwf	??_choose_level2
  5281  0B69  083F               	movf	??_choose_level2,w
  5282  0B6A  00B2               	movwf	Display_Char@data
  5283  0B6B  01B3               	clrf	Display_Char@y
  5284  0B6C  0AB3               	incf	Display_Char@y,f
  5285  0B6D  0845               	movf	choose_level2@offset,w
  5286  0B6E  3192  22BE  318A   	fcall	_Display_Char
  5287                           
  5288                           ;wayout.c: 180: }
  5289                           ;wayout.c: 181: }
  5290                           ;wayout.c: 182: }
  5291  0B71  2BD0               	goto	l3515
  5292  0B72                     l3547:	
  5293                           
  5294                           ;wayout.c: 184: {
  5295                           ;wayout.c: 185: key=0;
  5296  0B72  01E9               	clrf	_key
  5297                           
  5298                           ;wayout.c: 186: if(arrow != 6) {
  5299  0B73  3006               	movlw	6
  5300  0B74  0667               	xorwf	_arrow,w
  5301  0B75  1903               	btfsc	3,2
  5302  0B76  2BD0               	goto	l3515
  5303                           
  5304                           ;wayout.c: 187: if(arrow == 3) {
  5305  0B77  3003               	movlw	3
  5306  0B78  0667               	xorwf	_arrow,w
  5307  0B79  1D03               	btfss	3,2
  5308  0B7A  2B9F               	goto	l3565
  5309                           
  5310                           ;wayout.c: 188: Clear_Screen(0x00);
  5311  0B7B  3000               	movlw	0
  5312  0B7C  00B2               	movwf	Clear_Screen@value
  5313  0B7D  00B3               	movwf	Clear_Screen@value+1
  5314  0B7E  3195  251A  318A   	fcall	_Clear_Screen
  5315                           
  5316                           ;wayout.c: 189: wayout_display2();
  5317  0B81  3192  224A  318A   	fcall	_wayout_display2
  5318                           
  5319                           ;wayout.c: 190: arrow++;
  5320  0B84  3001               	movlw	1
  5321  0B85  0020               	movlb	0	; select bank0
  5322  0B86  00BF               	movwf	??_choose_level2
  5323  0B87  083F               	movf	??_choose_level2,w
  5324  0B88  07E7               	addwf	_arrow,f
  5325                           
  5326                           ;wayout.c: 191: tag = 1;
  5327  0B89  3001               	movlw	1
  5328  0B8A  00C3               	movwf	choose_level2@tag
  5329  0B8B  3000               	movlw	0
  5330  0B8C  00C4               	movwf	choose_level2@tag+1
  5331                           
  5332                           ;wayout.c: 192: offset = arrow -2;
  5333  0B8D  0867               	movf	_arrow,w
  5334  0B8E  3EFE               	addlw	254
  5335  0B8F  00C5               	movwf	choose_level2@offset
  5336  0B90  30FF               	movlw	255
  5337  0B91  1803               	skipnc
  5338  0B92  3000               	movlw	0
  5339  0B93  00C6               	movwf	choose_level2@offset+1
  5340                           
  5341                           ;wayout.c: 193: Display_Char(offset, 0x1A, 1);
  5342  0B94  301A               	movlw	26
  5343  0B95  00BF               	movwf	??_choose_level2
  5344  0B96  083F               	movf	??_choose_level2,w
  5345  0B97  00B2               	movwf	Display_Char@data
  5346  0B98  01B3               	clrf	Display_Char@y
  5347  0B99  0AB3               	incf	Display_Char@y,f
  5348  0B9A  0845               	movf	choose_level2@offset,w
  5349  0B9B  3192  22BE  318A   	fcall	_Display_Char
  5350                           
  5351                           ;wayout.c: 194: } else {
  5352  0B9E  2BD0               	goto	l3515
  5353  0B9F                     l3565:	
  5354                           
  5355                           ;wayout.c: 195: arrow++;
  5356  0B9F  3001               	movlw	1
  5357  0BA0  0020               	movlb	0	; select bank0
  5358  0BA1  00BF               	movwf	??_choose_level2
  5359  0BA2  083F               	movf	??_choose_level2,w
  5360  0BA3  07E7               	addwf	_arrow,f
  5361                           
  5362                           ;wayout.c: 196: offset = tag ? arrow-2 : arrow;
  5363  0BA4  0843               	movf	choose_level2@tag,w
  5364  0BA5  0444               	iorwf	choose_level2@tag+1,w
  5365  0BA6  1D03               	btfss	3,2
  5366  0BA7  2BAF               	goto	l3569
  5367  0BA8  0867               	movf	_arrow,w
  5368  0BA9  00BF               	movwf	??_choose_level2
  5369  0BAA  01C0               	clrf	??_choose_level2+1
  5370  0BAB  083F               	movf	??_choose_level2,w
  5371  0BAC  00C5               	movwf	choose_level2@offset
  5372  0BAD  0840               	movf	??_choose_level2+1,w
  5373  0BAE  2BB5               	goto	L3
  5374  0BAF                     l3569:	
  5375  0BAF  0867               	movf	_arrow,w
  5376  0BB0  3EFE               	addlw	254
  5377  0BB1  00C5               	movwf	choose_level2@offset
  5378  0BB2  30FF               	movlw	255
  5379  0BB3  1803               	skipnc
  5380  0BB4  3000               	movlw	0
  5381  0BB5                     L3:	
  5382  0BB5  00C6               	movwf	choose_level2@offset+1
  5383                           
  5384                           ;wayout.c: 197: Display_Chars(offset-1, " ", 1);
  5385  0BB6  30CF               	movlw	low (STR_1| (0+32768))
  5386  0BB7  00B2               	movwf	Display_Chars@string
  5387  0BB8  3090               	movlw	high (STR_1| (0+32768))
  5388  0BB9  00B3               	movwf	Display_Chars@string+1
  5389  0BBA  01B4               	clrf	Display_Chars@y
  5390  0BBB  0AB4               	incf	Display_Chars@y,f
  5391  0BBC  0845               	movf	choose_level2@offset,w
  5392  0BBD  3EFF               	addlw	255
  5393  0BBE  3194  246C  318A   	fcall	_Display_Chars
  5394                           
  5395                           ;wayout.c: 198: Display_Char(offset, 0x1A, 1);
  5396  0BC1  301A               	movlw	26
  5397  0BC2  0020               	movlb	0	; select bank0
  5398  0BC3  00BF               	movwf	??_choose_level2
  5399  0BC4  083F               	movf	??_choose_level2,w
  5400  0BC5  00B2               	movwf	Display_Char@data
  5401  0BC6  01B3               	clrf	Display_Char@y
  5402  0BC7  0AB3               	incf	Display_Char@y,f
  5403  0BC8  0845               	movf	choose_level2@offset,w
  5404  0BC9  3192  22BE  318A   	fcall	_Display_Char
  5405                           
  5406                           ;wayout.c: 199: }
  5407                           ;wayout.c: 200: }
  5408                           ;wayout.c: 201: }
  5409  0BCC  2BD0               	goto	l3515
  5410  0BCD                     l3577:	
  5411                           
  5412                           ;wayout.c: 203: {
  5413                           ;wayout.c: 204: key=0;
  5414  0BCD  01E9               	clrf	_key
  5415                           
  5416                           ;wayout.c: 205: return arrow;
  5417  0BCE  0867               	movf	_arrow,w
  5418  0BCF  0008               	return
  5419  0BD0                     l3515:	
  5420                           ;wayout.c: 162: while(1)
  5421                           
  5422                           ;wayout.c: 206: }
  5423                           
  5424                           
  5425                           ;wayout.c: 163: {
  5426                           ;wayout.c: 164: if(key == 1)
  5427  0BD0  0020               	movlb	0	; select bank0
  5428  0BD1  0369               	decf	_key,w
  5429  0BD2  1903               	btfsc	3,2
  5430  0BD3  2B1E               	goto	l3517
  5431                           
  5432                           ;wayout.c: 183: else if(key == 2)
  5433  0BD4  3002               	movlw	2
  5434  0BD5  0020               	movlb	0	; select bank0
  5435  0BD6  0669               	xorwf	_key,w
  5436  0BD7  1903               	btfsc	3,2
  5437  0BD8  2B72               	goto	l3547
  5438                           
  5439                           ;wayout.c: 202: else if(key == 5)
  5440  0BD9  3005               	movlw	5
  5441  0BDA  0020               	movlb	0	; select bank0
  5442  0BDB  0669               	xorwf	_key,w
  5443  0BDC  1903               	btfsc	3,2
  5444  0BDD  2BCD               	goto	l3577
  5445                           
  5446                           ;wayout.c: 207: else if (key == 6)
  5447  0BDE  3006               	movlw	6
  5448  0BDF  0669               	xorwf	_key,w
  5449  0BE0  1D03               	btfss	3,2
  5450  0BE1  2BD0               	goto	l3515
  5451                           
  5452                           ;wayout.c: 208: {
  5453                           ;wayout.c: 209: key=0;
  5454  0BE2  01E9               	clrf	_key
  5455                           
  5456                           ;wayout.c: 210: arrow=0;
  5457  0BE3  01E7               	clrf	_arrow
  5458                           
  5459                           ;wayout.c: 211: init_environment();
  5460  0BE4  319F  2774  318A   	fcall	_init_environment
  5461                           
  5462                           ;wayout.c: 212: set_menu();
  5463  0BE7  3191  211A         	fcall	_set_menu
  5464                           
  5465                           ;wayout.c: 213: return 0;
  5466  0BE9  3000               	movlw	0
  5467  0BEA  0008               	return
  5468  0BEB                     __end_of_choose_level2:	
  5469                           
  5470                           	psect	text7
  5471  124A                     __ptext7:	
  5472 ;; *************** function _wayout_display2 *****************
  5473 ;; Defined at:
  5474 ;;		line 141 in file "wayout.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;		None
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;		None
  5479 ;; Return value:  Size  Location     Type
  5480 ;;                  1    wreg      void 
  5481 ;; Registers used:
  5482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;Total ram usage:        1 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    8
  5495 ;; This function calls:
  5496 ;;		_Display_Chars
  5497 ;; This function is called by:
  5498 ;;		_choose_level2
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           
  5503                           ;psect for function _wayout_display2
  5504  124A                     _wayout_display2:	
  5505                           
  5506                           ;wayout.c: 143: Display_Chars(1, " ...",7);
  5507                           
  5508                           ;incstack = 0
  5509                           ; Regs used in _wayout_display2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5510  124A  30CA               	movlw	low (STR_26| (0+32768))
  5511  124B  0020               	movlb	0	; select bank0
  5512  124C  00B2               	movwf	Display_Chars@string
  5513  124D  3090               	movlw	high (STR_26| (0+32768))
  5514  124E  00B3               	movwf	Display_Chars@string+1
  5515  124F  3007               	movlw	7
  5516  1250  00BE               	movwf	??_wayout_display2
  5517  1251  083E               	movf	??_wayout_display2,w
  5518  1252  00B4               	movwf	Display_Chars@y
  5519  1253  3001               	movlw	1
  5520  1254  3194  246C  3192   	fcall	_Display_Chars
  5521                           
  5522                           ;wayout.c: 144: Display_Chars(2, "level 4",3);
  5523  1257  3083               	movlw	low (STR_27| (0+32768))
  5524  1258  0020               	movlb	0	; select bank0
  5525  1259  00B2               	movwf	Display_Chars@string
  5526  125A  3090               	movlw	high (STR_27| (0+32768))
  5527  125B  00B3               	movwf	Display_Chars@string+1
  5528  125C  3003               	movlw	3
  5529  125D  00BE               	movwf	??_wayout_display2
  5530  125E  083E               	movf	??_wayout_display2,w
  5531  125F  00B4               	movwf	Display_Chars@y
  5532  1260  3002               	movlw	2
  5533  1261  3194  246C  3192   	fcall	_Display_Chars
  5534                           
  5535                           ;wayout.c: 145: Display_Chars(3, "level 5",3);
  5536  1264  3093               	movlw	low (STR_28| (0+32768))
  5537  1265  0020               	movlb	0	; select bank0
  5538  1266  00B2               	movwf	Display_Chars@string
  5539  1267  3090               	movlw	high (STR_28| (0+32768))
  5540  1268  00B3               	movwf	Display_Chars@string+1
  5541  1269  3003               	movlw	3
  5542  126A  00BE               	movwf	??_wayout_display2
  5543  126B  083E               	movf	??_wayout_display2,w
  5544  126C  00B4               	movwf	Display_Chars@y
  5545  126D  3003               	movlw	3
  5546  126E  3194  246C  3192   	fcall	_Display_Chars
  5547                           
  5548                           ;wayout.c: 146: Display_Chars(4, "level 6",3);
  5549  1271  30A3               	movlw	low (STR_29| (0+32768))
  5550  1272  0020               	movlb	0	; select bank0
  5551  1273  00B2               	movwf	Display_Chars@string
  5552  1274  3090               	movlw	high (STR_29| (0+32768))
  5553  1275  00B3               	movwf	Display_Chars@string+1
  5554  1276  3003               	movlw	3
  5555  1277  00BE               	movwf	??_wayout_display2
  5556  1278  083E               	movf	??_wayout_display2,w
  5557  1279  00B4               	movwf	Display_Chars@y
  5558  127A  3004               	movlw	4
  5559  127B  3194  246C         	fcall	_Display_Chars
  5560  127D  0008               	return
  5561  127E                     __end_of_wayout_display2:	
  5562                           
  5563                           	psect	text8
  5564  1216                     __ptext8:	
  5565 ;; *************** function _wayout_display1 *****************
  5566 ;; Defined at:
  5567 ;;		line 134 in file "wayout.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;		None
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;		None
  5572 ;; Return value:  Size  Location     Type
  5573 ;;                  1    wreg      void 
  5574 ;; Registers used:
  5575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5584 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5585 ;;Total ram usage:        1 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:    8
  5588 ;; This function calls:
  5589 ;;		_Display_Chars
  5590 ;; This function is called by:
  5591 ;;		_choose_level2
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           
  5596                           ;psect for function _wayout_display1
  5597  1216                     _wayout_display1:	
  5598                           
  5599                           ;wayout.c: 136: Display_Chars(1, "level 1",3);
  5600                           
  5601                           ;incstack = 0
  5602                           ; Regs used in _wayout_display1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5603  1216  3053               	movlw	low (STR_22| (0+32768))
  5604  1217  0020               	movlb	0	; select bank0
  5605  1218  00B2               	movwf	Display_Chars@string
  5606  1219  3090               	movlw	high (STR_22| (0+32768))
  5607  121A  00B3               	movwf	Display_Chars@string+1
  5608  121B  3003               	movlw	3
  5609  121C  00BE               	movwf	??_wayout_display1
  5610  121D  083E               	movf	??_wayout_display1,w
  5611  121E  00B4               	movwf	Display_Chars@y
  5612  121F  3001               	movlw	1
  5613  1220  3194  246C  3192   	fcall	_Display_Chars
  5614                           
  5615                           ;wayout.c: 137: Display_Chars(2, "level 2",3);
  5616  1223  3063               	movlw	low (STR_23| (0+32768))
  5617  1224  0020               	movlb	0	; select bank0
  5618  1225  00B2               	movwf	Display_Chars@string
  5619  1226  3090               	movlw	high (STR_23| (0+32768))
  5620  1227  00B3               	movwf	Display_Chars@string+1
  5621  1228  3003               	movlw	3
  5622  1229  00BE               	movwf	??_wayout_display1
  5623  122A  083E               	movf	??_wayout_display1,w
  5624  122B  00B4               	movwf	Display_Chars@y
  5625  122C  3002               	movlw	2
  5626  122D  3194  246C  3192   	fcall	_Display_Chars
  5627                           
  5628                           ;wayout.c: 138: Display_Chars(3, "level 3",3);
  5629  1230  3073               	movlw	low (STR_24| (0+32768))
  5630  1231  0020               	movlb	0	; select bank0
  5631  1232  00B2               	movwf	Display_Chars@string
  5632  1233  3090               	movlw	high (STR_24| (0+32768))
  5633  1234  00B3               	movwf	Display_Chars@string+1
  5634  1235  3003               	movlw	3
  5635  1236  00BE               	movwf	??_wayout_display1
  5636  1237  083E               	movf	??_wayout_display1,w
  5637  1238  00B4               	movwf	Display_Chars@y
  5638  1239  3003               	movlw	3
  5639  123A  3194  246C  3192   	fcall	_Display_Chars
  5640                           
  5641                           ;wayout.c: 139: Display_Chars(4, "...",7);
  5642  123D  30CB               	movlw	low ((STR_26+1)| (0+32768))
  5643  123E  0020               	movlb	0	; select bank0
  5644  123F  00B2               	movwf	Display_Chars@string
  5645  1240  3090               	movlw	high ((STR_26+1)| (0+32768))
  5646  1241  00B3               	movwf	Display_Chars@string+1
  5647  1242  3007               	movlw	7
  5648  1243  00BE               	movwf	??_wayout_display1
  5649  1244  083E               	movf	??_wayout_display1,w
  5650  1245  00B4               	movwf	Display_Chars@y
  5651  1246  3004               	movlw	4
  5652  1247  3194  246C         	fcall	_Display_Chars
  5653  1249  0008               	return
  5654  124A                     __end_of_wayout_display1:	
  5655                           
  5656                           	psect	text9
  5657  0881                     __ptext9:	
  5658 ;; *************** function _choose *****************
  5659 ;; Defined at:
  5660 ;;		line 78 in file "wayout.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  i               2   48[BANK0 ] int 
  5663 ;;  j               2   50[BANK0 ] int 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;		None
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      unsigned char 
  5668 ;; Registers used:
  5669 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5675 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;Total ram usage:       11 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    9
  5682 ;; This function calls:
  5683 ;;		_change_near
  5684 ;;		_if_in_table
  5685 ;;		_set_point
  5686 ;; This function is called by:
  5687 ;;		_wayout
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           
  5692                           ;psect for function _choose
  5693  0881                     _choose:	
  5694                           
  5695                           ;wayout.c: 79: if(!if_in_table(i, j))
  5696                           
  5697                           ;incstack = 0
  5698                           ; Regs used in _choose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5699  0881  0020               	movlb	0	; select bank0
  5700  0882  0851               	movf	choose@i+1,w
  5701  0883  00A4               	movwf	if_in_table@i+1
  5702  0884  0850               	movf	choose@i,w
  5703  0885  00A3               	movwf	if_in_table@i
  5704  0886  0853               	movf	choose@j+1,w
  5705  0887  00A6               	movwf	if_in_table@j+1
  5706  0888  0852               	movf	choose@j,w
  5707  0889  00A5               	movwf	if_in_table@j
  5708  088A  319F  27E0  3188   	fcall	_if_in_table
  5709  088D  3A00               	xorlw	0
  5710  088E  1D03               	skipz
  5711  088F  2892               	goto	l3639
  5712                           
  5713                           ;wayout.c: 80: return 0;
  5714  0890  3000               	movlw	0
  5715  0891  0008               	return
  5716  0892                     l3639:	
  5717                           
  5718                           ;wayout.c: 81: else{
  5719                           ;wayout.c: 82: if((table[i][j] & 0x03) == 1 || (table[i][j] & 0x03) == 2){
  5720  0892  0020               	movlb	0	; select bank0
  5721  0893  0850               	movf	choose@i,w
  5722  0894  00D4               	movwf	??_choose
  5723  0895  3003               	movlw	3
  5724  0896                     u4645:	
  5725  0896  35D4               	lslf	??_choose,f
  5726  0897  0B89               	decfsz	9,f
  5727  0898  2896               	goto	u4645
  5728  0899  30A6               	movlw	(low (_table| 0))& (0+255)
  5729  089A  0754               	addwf	??_choose,w
  5730  089B  00D5               	movwf	??_choose+1
  5731  089C  0852               	movf	choose@j,w
  5732  089D  0755               	addwf	??_choose+1,w
  5733  089E  00D6               	movwf	??_choose+2
  5734  089F  0856               	movf	??_choose+2,w
  5735  08A0  0086               	movwf	6
  5736  08A1  0187               	clrf	7
  5737  08A2  3003               	movlw	3
  5738  08A3  0501               	andwf	1,w
  5739  08A4  00D7               	movwf	??_choose+3
  5740  08A5  0357               	decf	??_choose+3,w
  5741  08A6  1903               	btfsc	3,2
  5742  08A7  28BE               	goto	l3643
  5743  08A8  0850               	movf	choose@i,w
  5744  08A9  00D4               	movwf	??_choose
  5745  08AA  3003               	movlw	3
  5746  08AB                     u4665:	
  5747  08AB  35D4               	lslf	??_choose,f
  5748  08AC  0B89               	decfsz	9,f
  5749  08AD  28AB               	goto	u4665
  5750  08AE  30A6               	movlw	(low (_table| 0))& (0+255)
  5751  08AF  0754               	addwf	??_choose,w
  5752  08B0  00D5               	movwf	??_choose+1
  5753  08B1  0852               	movf	choose@j,w
  5754  08B2  0755               	addwf	??_choose+1,w
  5755  08B3  00D6               	movwf	??_choose+2
  5756  08B4  0856               	movf	??_choose+2,w
  5757  08B5  0086               	movwf	6
  5758  08B6  0187               	clrf	7
  5759  08B7  3003               	movlw	3
  5760  08B8  0501               	andwf	1,w
  5761  08B9  00D7               	movwf	??_choose+3
  5762  08BA  3002               	movlw	2
  5763  08BB  0657               	xorwf	??_choose+3,w
  5764  08BC  1D03               	btfss	3,2
  5765  08BD  2942               	goto	l3661
  5766  08BE                     l3643:	
  5767                           
  5768                           ;wayout.c: 84: table[i][j] = (3 - (table[i][j] & 0x03)) | 0x08;
  5769  08BE  0850               	movf	choose@i,w
  5770  08BF  00D4               	movwf	??_choose
  5771  08C0  3003               	movlw	3
  5772  08C1                     u4685:	
  5773  08C1  35D4               	lslf	??_choose,f
  5774  08C2  0B89               	decfsz	9,f
  5775  08C3  28C1               	goto	u4685
  5776  08C4  30A6               	movlw	(low (_table| 0))& (0+255)
  5777  08C5  0754               	addwf	??_choose,w
  5778  08C6  00D5               	movwf	??_choose+1
  5779  08C7  0852               	movf	choose@j,w
  5780  08C8  0755               	addwf	??_choose+1,w
  5781  08C9  00D6               	movwf	??_choose+2
  5782  08CA  0856               	movf	??_choose+2,w
  5783  08CB  0086               	movwf	6
  5784  08CC  0187               	clrf	7
  5785  08CD  0801               	movf	1,w
  5786  08CE  3903               	andlw	3
  5787  08CF  3AFF               	xorlw	255
  5788  08D0  3E01               	addlw	1
  5789  08D1  3E03               	addlw	3
  5790  08D2  3808               	iorlw	8
  5791  08D3  00D7               	movwf	??_choose+3
  5792  08D4  0850               	movf	choose@i,w
  5793  08D5  00D8               	movwf	??_choose+4
  5794  08D6  3003               	movlw	3
  5795  08D7                     u4695:	
  5796  08D7  35D8               	lslf	??_choose+4,f
  5797  08D8  0B89               	decfsz	9,f
  5798  08D9  28D7               	goto	u4695
  5799  08DA  30A6               	movlw	(low (_table| 0))& (0+255)
  5800  08DB  0758               	addwf	??_choose+4,w
  5801  08DC  00D9               	movwf	??_choose+5
  5802  08DD  0852               	movf	choose@j,w
  5803  08DE  0759               	addwf	??_choose+5,w
  5804  08DF  00DA               	movwf	??_choose+6
  5805  08E0  085A               	movf	??_choose+6,w
  5806  08E1  0086               	movwf	6
  5807  08E2  0187               	clrf	7
  5808  08E3  0857               	movf	??_choose+3,w
  5809  08E4  0081               	movwf	1
  5810                           
  5811                           ;wayout.c: 85: set_point(i,j,screen[table[i][j]-5]);
  5812  08E5  0852               	movf	choose@j,w
  5813  08E6  00D4               	movwf	??_choose
  5814  08E7  0854               	movf	??_choose,w
  5815  08E8  00B9               	movwf	set_point@point_y
  5816  08E9  0850               	movf	choose@i,w
  5817  08EA  00D5               	movwf	??_choose+1
  5818  08EB  3003               	movlw	3
  5819  08EC                     u4705:	
  5820  08EC  35D5               	lslf	??_choose+1,f
  5821  08ED  0B89               	decfsz	9,f
  5822  08EE  28EC               	goto	u4705
  5823  08EF  30A6               	movlw	(low (_table| 0))& (0+255)
  5824  08F0  0755               	addwf	??_choose+1,w
  5825  08F1  00D6               	movwf	??_choose+2
  5826  08F2  0852               	movf	choose@j,w
  5827  08F3  0756               	addwf	??_choose+2,w
  5828  08F4  00D7               	movwf	??_choose+3
  5829  08F5  0857               	movf	??_choose+3,w
  5830  08F6  0086               	movwf	6
  5831  08F7  0187               	clrf	7
  5832  08F8  0801               	movf	1,w
  5833  08F9  00D8               	movwf	??_choose+4
  5834  08FA  3002               	movlw	2
  5835  08FB                     u4715:	
  5836  08FB  35D8               	lslf	??_choose+4,f
  5837  08FC  3EFF               	addlw	-1
  5838  08FD  1D03               	skipz
  5839  08FE  28FB               	goto	u4715
  5840  08FF  3558               	lslf	??_choose+4,w
  5841  0900  3ED8               	addlw	216
  5842  0901  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  5843  0902  00D9               	movwf	??_choose+5
  5844  0903  0859               	movf	??_choose+5,w
  5845  0904  00BA               	movwf	set_point@value
  5846  0905  0850               	movf	choose@i,w
  5847  0906  3197  2760  3188   	fcall	_set_point
  5848                           
  5849                           ;wayout.c: 86: change_near(i-1, j);
  5850  0909  0020               	movlb	0	; select bank0
  5851  090A  0850               	movf	choose@i,w
  5852  090B  3EFF               	addlw	255
  5853  090C  00C5               	movwf	change_near@k
  5854  090D  30FF               	movlw	255
  5855  090E  3D51               	addwfc	choose@i+1,w
  5856  090F  00C6               	movwf	change_near@k+1
  5857  0910  0853               	movf	choose@j+1,w
  5858  0911  00C8               	movwf	change_near@l+1
  5859  0912  0852               	movf	choose@j,w
  5860  0913  00C7               	movwf	change_near@l
  5861  0914  3196  26D2  3188   	fcall	_change_near
  5862                           
  5863                           ;wayout.c: 87: change_near(i+1, j);
  5864  0917  0020               	movlb	0	; select bank0
  5865  0918  0850               	movf	choose@i,w
  5866  0919  3E01               	addlw	1
  5867  091A  00C5               	movwf	change_near@k
  5868  091B  3000               	movlw	0
  5869  091C  3D51               	addwfc	choose@i+1,w
  5870  091D  00C6               	movwf	change_near@k+1
  5871  091E  0853               	movf	choose@j+1,w
  5872  091F  00C8               	movwf	change_near@l+1
  5873  0920  0852               	movf	choose@j,w
  5874  0921  00C7               	movwf	change_near@l
  5875  0922  3196  26D2  3188   	fcall	_change_near
  5876                           
  5877                           ;wayout.c: 88: change_near(i, j-1);
  5878  0925  0020               	movlb	0	; select bank0
  5879  0926  0851               	movf	choose@i+1,w
  5880  0927  00C6               	movwf	change_near@k+1
  5881  0928  0850               	movf	choose@i,w
  5882  0929  00C5               	movwf	change_near@k
  5883  092A  0852               	movf	choose@j,w
  5884  092B  3EFF               	addlw	255
  5885  092C  00C7               	movwf	change_near@l
  5886  092D  30FF               	movlw	255
  5887  092E  3D53               	addwfc	choose@j+1,w
  5888  092F  00C8               	movwf	change_near@l+1
  5889  0930  3196  26D2  3188   	fcall	_change_near
  5890                           
  5891                           ;wayout.c: 89: change_near(i, j+1);
  5892  0933  0020               	movlb	0	; select bank0
  5893  0934  0851               	movf	choose@i+1,w
  5894  0935  00C6               	movwf	change_near@k+1
  5895  0936  0850               	movf	choose@i,w
  5896  0937  00C5               	movwf	change_near@k
  5897  0938  0852               	movf	choose@j,w
  5898  0939  3E01               	addlw	1
  5899  093A  00C7               	movwf	change_near@l
  5900  093B  3000               	movlw	0
  5901  093C  3D53               	addwfc	choose@j+1,w
  5902  093D  00C8               	movwf	change_near@l+1
  5903  093E  3196  26D2         	fcall	_change_near
  5904                           
  5905                           ;wayout.c: 90: return 1;
  5906  0940  3001               	movlw	1
  5907                           
  5908                           ;wayout.c: 91: }
  5909  0941  0008               	return
  5910  0942                     l3661:	
  5911                           
  5912                           ;wayout.c: 92: else{
  5913                           ;wayout.c: 93: return 0;
  5914  0942  3000               	movlw	0
  5915  0943  0008               	return
  5916  0944                     __end_of_choose:	
  5917                           
  5918                           	psect	text10
  5919  16D2                     __ptext10:	
  5920 ;; *************** function _change_near *****************
  5921 ;; Defined at:
  5922 ;;		line 63 in file "wayout.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  k               2   37[BANK0 ] int 
  5925 ;;  l               2   39[BANK0 ] int 
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;		None
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  1    wreg      void 
  5930 ;; Registers used:
  5931 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5937 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5939 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;Total ram usage:       11 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:    8
  5944 ;; This function calls:
  5945 ;;		_if_in_table
  5946 ;;		_set_point
  5947 ;; This function is called by:
  5948 ;;		_choose
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           
  5953                           ;psect for function _change_near
  5954  16D2                     _change_near:	
  5955                           
  5956                           ;wayout.c: 64: if(if_in_table(k, l)){
  5957                           
  5958                           ;incstack = 0
  5959                           ; Regs used in _change_near: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5960  16D2  0020               	movlb	0	; select bank0
  5961  16D3  0846               	movf	change_near@k+1,w
  5962  16D4  00A4               	movwf	if_in_table@i+1
  5963  16D5  0845               	movf	change_near@k,w
  5964  16D6  00A3               	movwf	if_in_table@i
  5965  16D7  0848               	movf	change_near@l+1,w
  5966  16D8  00A6               	movwf	if_in_table@j+1
  5967  16D9  0847               	movf	change_near@l,w
  5968  16DA  00A5               	movwf	if_in_table@j
  5969  16DB  319F  27E0  3196   	fcall	_if_in_table
  5970  16DE  3A00               	xorlw	0
  5971  16DF  1903               	skipnz
  5972  16E0  0008               	return
  5973                           
  5974                           ;wayout.c: 65: if(table[k][l] == 0)
  5975  16E1  0020               	movlb	0	; select bank0
  5976  16E2  0845               	movf	change_near@k,w
  5977  16E3  00C9               	movwf	??_change_near
  5978  16E4  3003               	movlw	3
  5979  16E5                     u3925:	
  5980  16E5  35C9               	lslf	??_change_near,f
  5981  16E6  0B89               	decfsz	9,f
  5982  16E7  2EE5               	goto	u3925
  5983  16E8  30A6               	movlw	(low (_table| 0))& (0+255)
  5984  16E9  0749               	addwf	??_change_near,w
  5985  16EA  00CA               	movwf	??_change_near+1
  5986  16EB  0847               	movf	change_near@l,w
  5987  16EC  074A               	addwf	??_change_near+1,w
  5988  16ED  00CB               	movwf	??_change_near+2
  5989  16EE  084B               	movf	??_change_near+2,w
  5990  16EF  0086               	movwf	6
  5991  16F0  0187               	clrf	7
  5992  16F1  0801               	movf	1,w
  5993  16F2  1903               	btfsc	3,2
  5994  16F3  0008               	return
  5995                           
  5996                           ;wayout.c: 67: else if(table[k][l]== 1 || table[k][l] == 2){
  5997                           
  5998                           ;wayout.c: 66: ;
  5999  16F4  0845               	movf	change_near@k,w
  6000  16F5  00C9               	movwf	??_change_near
  6001  16F6  3003               	movlw	3
  6002  16F7                     u3945:	
  6003  16F7  35C9               	lslf	??_change_near,f
  6004  16F8  0B89               	decfsz	9,f
  6005  16F9  2EF7               	goto	u3945
  6006  16FA  30A6               	movlw	(low (_table| 0))& (0+255)
  6007  16FB  0749               	addwf	??_change_near,w
  6008  16FC  00CA               	movwf	??_change_near+1
  6009  16FD  0847               	movf	change_near@l,w
  6010  16FE  074A               	addwf	??_change_near+1,w
  6011  16FF  00CB               	movwf	??_change_near+2
  6012  1700  084B               	movf	??_change_near+2,w
  6013  1701  0086               	movwf	6
  6014  1702  0187               	clrf	7
  6015  1703  0301               	decf	1,w
  6016  1704  1903               	btfsc	3,2
  6017  1705  2F19               	goto	l3275
  6018  1706  0845               	movf	change_near@k,w
  6019  1707  00C9               	movwf	??_change_near
  6020  1708  3003               	movlw	3
  6021  1709                     u3965:	
  6022  1709  35C9               	lslf	??_change_near,f
  6023  170A  0B89               	decfsz	9,f
  6024  170B  2F09               	goto	u3965
  6025  170C  30A6               	movlw	(low (_table| 0))& (0+255)
  6026  170D  0749               	addwf	??_change_near,w
  6027  170E  00CA               	movwf	??_change_near+1
  6028  170F  0847               	movf	change_near@l,w
  6029  1710  074A               	addwf	??_change_near+1,w
  6030  1711  00CB               	movwf	??_change_near+2
  6031  1712  084B               	movf	??_change_near+2,w
  6032  1713  0086               	movwf	6
  6033  1714  0187               	clrf	7
  6034  1715  3002               	movlw	2
  6035  1716  0601               	xorwf	1,w
  6036  1717  1D03               	btfss	3,2
  6037  1718  0008               	return
  6038  1719                     l3275:	
  6039                           
  6040                           ;wayout.c: 68: table[k][l] = 3 - table[k][l];
  6041  1719  0845               	movf	change_near@k,w
  6042  171A  00C9               	movwf	??_change_near
  6043  171B  3003               	movlw	3
  6044  171C                     u3985:	
  6045  171C  35C9               	lslf	??_change_near,f
  6046  171D  0B89               	decfsz	9,f
  6047  171E  2F1C               	goto	u3985
  6048  171F  30A6               	movlw	(low (_table| 0))& (0+255)
  6049  1720  0749               	addwf	??_change_near,w
  6050  1721  00CA               	movwf	??_change_near+1
  6051  1722  0847               	movf	change_near@l,w
  6052  1723  074A               	addwf	??_change_near+1,w
  6053  1724  00CB               	movwf	??_change_near+2
  6054  1725  084B               	movf	??_change_near+2,w
  6055  1726  0086               	movwf	6
  6056  1727  0187               	clrf	7
  6057  1728  0301               	decf	1,w
  6058  1729  3AFF               	xorlw	255
  6059  172A  3E03               	addlw	3
  6060  172B  00CC               	movwf	??_change_near+3
  6061  172C  0845               	movf	change_near@k,w
  6062  172D  00CD               	movwf	??_change_near+4
  6063  172E  3003               	movlw	3
  6064  172F                     u3995:	
  6065  172F  35CD               	lslf	??_change_near+4,f
  6066  1730  0B89               	decfsz	9,f
  6067  1731  2F2F               	goto	u3995
  6068  1732  30A6               	movlw	(low (_table| 0))& (0+255)
  6069  1733  074D               	addwf	??_change_near+4,w
  6070  1734  00CE               	movwf	??_change_near+5
  6071  1735  0847               	movf	change_near@l,w
  6072  1736  074E               	addwf	??_change_near+5,w
  6073  1737  00CF               	movwf	??_change_near+6
  6074  1738  084F               	movf	??_change_near+6,w
  6075  1739  0086               	movwf	6
  6076  173A  0187               	clrf	7
  6077  173B  084C               	movf	??_change_near+3,w
  6078  173C  0081               	movwf	1
  6079                           
  6080                           ;wayout.c: 69: set_point(k,l,screen[table[k][l]]);
  6081  173D  0847               	movf	change_near@l,w
  6082  173E  00C9               	movwf	??_change_near
  6083  173F  0849               	movf	??_change_near,w
  6084  1740  00B9               	movwf	set_point@point_y
  6085  1741  0845               	movf	change_near@k,w
  6086  1742  00CA               	movwf	??_change_near+1
  6087  1743  3003               	movlw	3
  6088  1744                     u4005:	
  6089  1744  35CA               	lslf	??_change_near+1,f
  6090  1745  0B89               	decfsz	9,f
  6091  1746  2F44               	goto	u4005
  6092  1747  30A6               	movlw	(low (_table| 0))& (0+255)
  6093  1748  074A               	addwf	??_change_near+1,w
  6094  1749  00CB               	movwf	??_change_near+2
  6095  174A  0847               	movf	change_near@l,w
  6096  174B  074B               	addwf	??_change_near+2,w
  6097  174C  00CC               	movwf	??_change_near+3
  6098  174D  084C               	movf	??_change_near+3,w
  6099  174E  0086               	movwf	6
  6100  174F  0187               	clrf	7
  6101  1750  0801               	movf	1,w
  6102  1751  00CD               	movwf	??_change_near+4
  6103  1752  3002               	movlw	2
  6104  1753                     u4015:	
  6105  1753  35CD               	lslf	??_change_near+4,f
  6106  1754  3EFF               	addlw	-1
  6107  1755  1D03               	skipz
  6108  1756  2F53               	goto	u4015
  6109  1757  354D               	lslf	??_change_near+4,w
  6110  1758  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  6111  1759  00CE               	movwf	??_change_near+5
  6112  175A  084E               	movf	??_change_near+5,w
  6113  175B  00BA               	movwf	set_point@value
  6114  175C  0845               	movf	change_near@k,w
  6115  175D  3197  2760         	fcall	_set_point
  6116                           
  6117                           ;wayout.c: 71: else{
  6118                           ;wayout.c: 72: ;
  6119                           
  6120                           ;wayout.c: 70: }
  6121  175F  0008               	return
  6122  1760                     __end_of_change_near:	
  6123                           
  6124                           	psect	text11
  6125  1FE0                     __ptext11:	
  6126 ;; *************** function _if_in_table *****************
  6127 ;; Defined at:
  6128 ;;		line 55 in file "wayout.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;  i               2    3[BANK0 ] int 
  6131 ;;  j               2    5[BANK0 ] int 
  6132 ;; Auto vars:     Size  Location     Type
  6133 ;;		None
  6134 ;; Return value:  Size  Location     Type
  6135 ;;                  1    wreg      unsigned char 
  6136 ;; Registers used:
  6137 ;;		wreg
  6138 ;; Tracked objects:
  6139 ;;		On entry : 0/0
  6140 ;;		On exit  : 0/0
  6141 ;;		Unchanged: 0/0
  6142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6143 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;Total ram usage:        5 bytes
  6148 ;; Hardware stack levels used:    1
  6149 ;; Hardware stack levels required when called:    4
  6150 ;; This function calls:
  6151 ;;		Nothing
  6152 ;; This function is called by:
  6153 ;;		_change_near
  6154 ;;		_choose
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           
  6159                           ;psect for function _if_in_table
  6160  1FE0                     _if_in_table:	
  6161                           
  6162                           ;wayout.c: 56: if(i >= 0 && i <= 8)
  6163                           
  6164                           ;incstack = 0
  6165                           ; Regs used in _if_in_table: [wreg]
  6166  1FE0  0020               	movlb	0	; select bank0
  6167  1FE1  1BA4               	btfsc	if_in_table@i+1,7
  6168  1FE2  2FFE               	goto	l3095
  6169  1FE3  0824               	movf	if_in_table@i+1,w
  6170  1FE4  3A80               	xorlw	128
  6171  1FE5  00A7               	movwf	??_if_in_table
  6172  1FE6  3080               	movlw	128
  6173  1FE7  0227               	subwf	??_if_in_table,w
  6174  1FE8  1D03               	skipz
  6175  1FE9  2FEC               	goto	u3565
  6176  1FEA  3009               	movlw	9
  6177  1FEB  0223               	subwf	if_in_table@i,w
  6178  1FEC                     u3565:	
  6179  1FEC  1803               	skipnc
  6180  1FED  2FFE               	goto	l3095
  6181                           
  6182                           ;wayout.c: 57: if(j >= 0 && j <= 8)
  6183  1FEE  0020               	movlb	0	; select bank0
  6184  1FEF  1BA6               	btfsc	if_in_table@j+1,7
  6185  1FF0  2FFE               	goto	l3095
  6186  1FF1  0826               	movf	if_in_table@j+1,w
  6187  1FF2  3A80               	xorlw	128
  6188  1FF3  00A7               	movwf	??_if_in_table
  6189  1FF4  3080               	movlw	128
  6190  1FF5  0227               	subwf	??_if_in_table,w
  6191  1FF6  1D03               	skipz
  6192  1FF7  2FFA               	goto	u3585
  6193  1FF8  3009               	movlw	9
  6194  1FF9  0225               	subwf	if_in_table@j,w
  6195  1FFA                     u3585:	
  6196  1FFA  1803               	skipnc
  6197  1FFB  2FFE               	goto	l3095
  6198                           
  6199                           ;wayout.c: 58: return 1;
  6200  1FFC  3001               	movlw	1
  6201  1FFD  0008               	return
  6202  1FFE                     l3095:	
  6203                           
  6204                           ;wayout.c: 59: return 0;
  6205  1FFE  3000               	movlw	0
  6206  1FFF  0008               	return
  6207  2000                     __end_of_if_in_table:	
  6208                           
  6209                           	psect	text12
  6210  11E4                     __ptext12:	
  6211 ;; *************** function _check_if_complete *****************
  6212 ;; Defined at:
  6213 ;;		line 99 in file "wayout.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;  j               1    7[BANK0 ] unsigned char 
  6218 ;;  i               1    6[BANK0 ] unsigned char 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  1    wreg      unsigned char 
  6221 ;; Registers used:
  6222 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;Total ram usage:        5 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    4
  6235 ;; This function calls:
  6236 ;;		Nothing
  6237 ;; This function is called by:
  6238 ;;		_wayout
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           
  6243                           ;psect for function _check_if_complete
  6244  11E4                     _check_if_complete:	
  6245                           
  6246                           ;wayout.c: 100: for(unsigned char i=0; i<8; i++)
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in _check_if_complete: [wreg+fsr1l+fsr1h+status,2+status,0]
  6250  11E4  0020               	movlb	0	; select bank0
  6251  11E5  01A6               	clrf	check_if_complete@i
  6252  11E6  3008               	movlw	8
  6253  11E7  0226               	subwf	check_if_complete@i,w
  6254  11E8  1803               	btfsc	3,0
  6255  11E9  2A14               	goto	l3691
  6256  11EA                     l3671:	
  6257                           
  6258                           ;wayout.c: 101: for(unsigned char j=0;j<8;j++)
  6259  11EA  01A7               	clrf	check_if_complete@j
  6260  11EB  3008               	movlw	8
  6261  11EC  0227               	subwf	check_if_complete@j,w
  6262  11ED  1803               	btfsc	3,0
  6263  11EE  2A0C               	goto	l3687
  6264  11EF                     l3677:	
  6265                           
  6266                           ;wayout.c: 103: if(table[i][j] == 2)
  6267  11EF  0826               	movf	check_if_complete@i,w
  6268  11F0  00A3               	movwf	??_check_if_complete
  6269  11F1  3003               	movlw	3
  6270  11F2                     u4745:	
  6271  11F2  35A3               	lslf	??_check_if_complete,f
  6272  11F3  0B89               	decfsz	9,f
  6273  11F4  29F2               	goto	u4745
  6274  11F5  30A6               	movlw	(low (_table| 0))& (0+255)
  6275  11F6  0723               	addwf	??_check_if_complete,w
  6276  11F7  00A4               	movwf	??_check_if_complete+1
  6277  11F8  0827               	movf	check_if_complete@j,w
  6278  11F9  0724               	addwf	??_check_if_complete+1,w
  6279  11FA  00A5               	movwf	??_check_if_complete+2
  6280  11FB  0825               	movf	??_check_if_complete+2,w
  6281  11FC  0086               	movwf	6
  6282  11FD  0187               	clrf	7
  6283  11FE  3002               	movlw	2
  6284  11FF  0601               	xorwf	1,w
  6285  1200  1D03               	btfss	3,2
  6286  1201  2A04               	goto	l3683
  6287                           
  6288                           ;wayout.c: 104: return 0;
  6289  1202  3000               	movlw	0
  6290  1203  0008               	return
  6291  1204                     l3683:	
  6292  1204  3001               	movlw	1
  6293  1205  00A3               	movwf	??_check_if_complete
  6294  1206  0823               	movf	??_check_if_complete,w
  6295  1207  07A7               	addwf	check_if_complete@j,f
  6296  1208  3008               	movlw	8
  6297  1209  0227               	subwf	check_if_complete@j,w
  6298  120A  1C03               	skipc
  6299  120B  29EF               	goto	l3677
  6300  120C                     l3687:	
  6301  120C  3001               	movlw	1
  6302  120D  00A3               	movwf	??_check_if_complete
  6303  120E  0823               	movf	??_check_if_complete,w
  6304  120F  07A6               	addwf	check_if_complete@i,f
  6305  1210  3008               	movlw	8
  6306  1211  0226               	subwf	check_if_complete@i,w
  6307  1212  1C03               	skipc
  6308  1213  29EA               	goto	l3671
  6309  1214                     l3691:	
  6310                           
  6311                           ;wayout.c: 105: return 1;
  6312  1214  3001               	movlw	1
  6313  1215  0008               	return
  6314  1216                     __end_of_check_if_complete:	
  6315                           
  6316                           	psect	text13
  6317  0809                     __ptext13:	
  6318 ;; *************** function _init_heibaiqi *****************
  6319 ;; Defined at:
  6320 ;;		line 45 in file "heibaiqi.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;		None
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;		None
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  1    wreg      void 
  6327 ;; Registers used:
  6328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;Total ram usage:        2 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    9
  6341 ;; This function calls:
  6342 ;;		_Clear_Screen
  6343 ;;		_draw_heibaiqi_right
  6344 ;;		_memset
  6345 ;;		_set_point
  6346 ;; This function is called by:
  6347 ;;		_run_game
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           
  6352                           ;psect for function _init_heibaiqi
  6353  0809                     _init_heibaiqi:	
  6354                           
  6355                           ;heibaiqi.c: 47: Clear_Screen(0x00);
  6356                           
  6357                           ;incstack = 0
  6358                           ; Regs used in _init_heibaiqi: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6359  0809  3000               	movlw	0
  6360  080A  0020               	movlb	0	; select bank0
  6361  080B  00B2               	movwf	Clear_Screen@value
  6362  080C  00B3               	movwf	Clear_Screen@value+1
  6363  080D  3195  251A  3188   	fcall	_Clear_Screen
  6364                           
  6365                           ;heibaiqi.c: 48: player=1;
  6366  0810  0021               	movlb	1	; select bank1
  6367  0811  01A1               	clrf	_player^(0+128)
  6368  0812  0AA1               	incf	_player^(0+128),f
  6369                           
  6370                           ;heibaiqi.c: 49: result=0;
  6371  0813  01A2               	clrf	_result^(0+128)
  6372                           
  6373                           ;heibaiqi.c: 50: black_num=2;
  6374  0814  3002               	movlw	2
  6375  0815  0020               	movlb	0	; select bank0
  6376  0816  00C5               	movwf	??_init_heibaiqi
  6377  0817  0845               	movf	??_init_heibaiqi,w
  6378  0818  00E8               	movwf	_black_num
  6379                           
  6380                           ;heibaiqi.c: 51: white_num=2;
  6381  0819  3002               	movlw	2
  6382  081A  00C5               	movwf	??_init_heibaiqi
  6383  081B  0845               	movf	??_init_heibaiqi,w
  6384  081C  00EB               	movwf	_white_num
  6385                           
  6386                           ;heibaiqi.c: 52: empty_num=60;
  6387  081D  303C               	movlw	60
  6388  081E  00C5               	movwf	??_init_heibaiqi
  6389  081F  0845               	movf	??_init_heibaiqi,w
  6390  0820  0021               	movlb	1	; select bank1
  6391  0821  00A0               	movwf	_empty_num^(0+128)
  6392                           
  6393                           ;heibaiqi.c: 53: temp_cursor.row=3;
  6394  0822  3003               	movlw	3
  6395  0823  0020               	movlb	0	; select bank0
  6396  0824  00C5               	movwf	??_init_heibaiqi
  6397  0825  0845               	movf	??_init_heibaiqi,w
  6398  0826  00E4               	movwf	_temp_cursor
  6399                           
  6400                           ;heibaiqi.c: 54: temp_cursor.col=3;
  6401  0827  3003               	movlw	3
  6402  0828  00C5               	movwf	??_init_heibaiqi
  6403  0829  0845               	movf	??_init_heibaiqi,w
  6404  082A  00E5               	movwf	_temp_cursor+1
  6405                           
  6406                           ;heibaiqi.c: 56: memset(table,0,sizeof(table));
  6407  082B  3000               	movlw	0
  6408  082C  00A3               	movwf	memset@c
  6409  082D  00A4               	movwf	memset@c+1
  6410  082E  3040               	movlw	64
  6411  082F  00A5               	movwf	memset@n
  6412  0830  3000               	movlw	0
  6413  0831  00A6               	movwf	memset@n+1
  6414  0832  30A6               	movlw	(low (_table| 0))& (0+255)
  6415  0833  319F  27A9  3188   	fcall	_memset
  6416                           
  6417                           ;heibaiqi.c: 57: table[3][3] = 1 | 0x08;
  6418  0836  3009               	movlw	9
  6419  0837  0020               	movlb	0	; select bank0
  6420  0838  00C5               	movwf	??_init_heibaiqi
  6421  0839  0845               	movf	??_init_heibaiqi,w
  6422  083A  0021               	movlb	1	; select bank1
  6423  083B  00C1               	movwf	(_table^(0+128)+27)
  6424                           
  6425                           ;heibaiqi.c: 58: table[4][4] = 1;
  6426  083C  01CA               	clrf	(_table^(0+128)+36)
  6427  083D  0ACA               	incf	(_table^(0+128)+36),f
  6428                           
  6429                           ;heibaiqi.c: 59: table[3][4] = 2;
  6430  083E  3002               	movlw	2
  6431  083F  0020               	movlb	0	; select bank0
  6432  0840  00C5               	movwf	??_init_heibaiqi
  6433  0841  0845               	movf	??_init_heibaiqi,w
  6434  0842  0021               	movlb	1	; select bank1
  6435  0843  00C2               	movwf	(_table^(0+128)+28)
  6436                           
  6437                           ;heibaiqi.c: 60: table[4][3] = 2;
  6438  0844  3002               	movlw	2
  6439  0845  0020               	movlb	0	; select bank0
  6440  0846  00C5               	movwf	??_init_heibaiqi
  6441  0847  0845               	movf	??_init_heibaiqi,w
  6442  0848  0021               	movlb	1	; select bank1
  6443  0849  00C9               	movwf	(_table^(0+128)+35)
  6444                           
  6445                           ;heibaiqi.c: 77: set_point(3, 3, choose_first);
  6446  084A  3003               	movlw	3
  6447  084B  0020               	movlb	0	; select bank0
  6448  084C  00C5               	movwf	??_init_heibaiqi
  6449  084D  0845               	movf	??_init_heibaiqi,w
  6450  084E  00B9               	movwf	set_point@point_y
  6451  084F  3046               	movlw	(low (_choose_first| (0+256)))& (0+255)
  6452  0850  00C6               	movwf	??_init_heibaiqi+1
  6453  0851  0846               	movf	??_init_heibaiqi+1,w
  6454  0852  00BA               	movwf	set_point@value
  6455  0853  3003               	movlw	3
  6456  0854  3197  2760  3188   	fcall	_set_point
  6457                           
  6458                           ;heibaiqi.c: 78: set_point(4, 4, first_chess);
  6459  0857  3004               	movlw	4
  6460  0858  0020               	movlb	0	; select bank0
  6461  0859  00C5               	movwf	??_init_heibaiqi
  6462  085A  0845               	movf	??_init_heibaiqi,w
  6463  085B  00B9               	movwf	set_point@point_y
  6464  085C  3056               	movlw	(low (_first_chess| (0+256)))& (0+255)
  6465  085D  00C6               	movwf	??_init_heibaiqi+1
  6466  085E  0846               	movf	??_init_heibaiqi+1,w
  6467  085F  00BA               	movwf	set_point@value
  6468  0860  3004               	movlw	4
  6469  0861  3197  2760  3188   	fcall	_set_point
  6470                           
  6471                           ;heibaiqi.c: 79: set_point(3, 4, second_chess);
  6472  0864  3004               	movlw	4
  6473  0865  0020               	movlb	0	; select bank0
  6474  0866  00C5               	movwf	??_init_heibaiqi
  6475  0867  0845               	movf	??_init_heibaiqi,w
  6476  0868  00B9               	movwf	set_point@point_y
  6477  0869  305E               	movlw	(low (_second_chess| (0+256)))& (0+255)
  6478  086A  00C6               	movwf	??_init_heibaiqi+1
  6479  086B  0846               	movf	??_init_heibaiqi+1,w
  6480  086C  00BA               	movwf	set_point@value
  6481  086D  3003               	movlw	3
  6482  086E  3197  2760  3188   	fcall	_set_point
  6483                           
  6484                           ;heibaiqi.c: 80: set_point(4, 3, second_chess);
  6485  0871  3003               	movlw	3
  6486  0872  0020               	movlb	0	; select bank0
  6487  0873  00C5               	movwf	??_init_heibaiqi
  6488  0874  0845               	movf	??_init_heibaiqi,w
  6489  0875  00B9               	movwf	set_point@point_y
  6490  0876  305E               	movlw	(low (_second_chess| (0+256)))& (0+255)
  6491  0877  00C6               	movwf	??_init_heibaiqi+1
  6492  0878  0846               	movf	??_init_heibaiqi+1,w
  6493  0879  00BA               	movwf	set_point@value
  6494  087A  3004               	movlw	4
  6495  087B  3197  2760  3188   	fcall	_set_point
  6496                           
  6497                           ;heibaiqi.c: 82: draw_heibaiqi_right();
  6498  087E  3189  2144         	fcall	_draw_heibaiqi_right
  6499  0880  0008               	return
  6500  0881                     __end_of_init_heibaiqi:	
  6501                           
  6502                           	psect	text14
  6503  0944                     __ptext14:	
  6504 ;; *************** function _draw_heibaiqi_right *****************
  6505 ;; Defined at:
  6506 ;;		line 3 in file "heibaiqi.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;		None
  6509 ;; Auto vars:     Size  Location     Type
  6510 ;;  i               1   33[BANK0 ] unsigned char 
  6511 ;;  j               1   32[BANK0 ] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;Total ram usage:        4 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    8
  6528 ;; This function calls:
  6529 ;;		_Display_Chars
  6530 ;;		_Write_Com
  6531 ;;		_Write_Data
  6532 ;;		_delay_100us
  6533 ;;		_int2string
  6534 ;; This function is called by:
  6535 ;;		_init_heibaiqi
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           
  6540                           ;psect for function _draw_heibaiqi_right
  6541  0944                     _draw_heibaiqi_right:	
  6542                           
  6543                           ;heibaiqi.c: 4: unsigned char i,j;
  6544                           ;heibaiqi.c: 5: Write_Com(0x01);
  6545                           
  6546                           ;incstack = 0
  6547                           ; Regs used in _draw_heibaiqi_right: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6548  0944  3001               	movlw	1
  6549  0945  0020               	movlb	0	; select bank0
  6550  0946  00B0               	movwf	Write_Com@com
  6551  0947  3000               	movlw	0
  6552  0948  00B1               	movwf	Write_Com@com+1
  6553  0949  319F  2734  3189   	fcall	_Write_Com
  6554                           
  6555                           ;heibaiqi.c: 6: delay_100us(100);
  6556  094C  3064               	movlw	100
  6557  094D  0020               	movlb	0	; select bank0
  6558  094E  00A9               	movwf	delay_100us@cnt
  6559  094F  3000               	movlw	0
  6560  0950  00AA               	movwf	delay_100us@cnt+1
  6561  0951  3190  20F5  3189   	fcall	_delay_100us
  6562                           
  6563                           ;heibaiqi.c: 7: Write_Com(0x34);
  6564  0954  3034               	movlw	52
  6565  0955  0020               	movlb	0	; select bank0
  6566  0956  00B0               	movwf	Write_Com@com
  6567  0957  3000               	movlw	0
  6568  0958  00B1               	movwf	Write_Com@com+1
  6569  0959  319F  2734  3189   	fcall	_Write_Com
  6570                           
  6571                           ;heibaiqi.c: 8: for(i=0; i<64; i++) {
  6572  095C  0020               	movlb	0	; select bank0
  6573  095D  01C1               	clrf	draw_heibaiqi_right@i
  6574  095E  3040               	movlw	64
  6575  095F  0241               	subwf	draw_heibaiqi_right@i,w
  6576  0960  1803               	btfsc	3,0
  6577  0961  29D1               	goto	l3327
  6578  0962                     l3291:	
  6579                           
  6580                           ;heibaiqi.c: 9: if(i < 16) {
  6581  0962  3010               	movlw	16
  6582  0963  0241               	subwf	draw_heibaiqi_right@i,w
  6583  0964  1803               	skipnc
  6584  0965  2994               	goto	l3307
  6585                           
  6586                           ;heibaiqi.c: 10: Write_Com(0x80+i);
  6587  0966  0841               	movf	draw_heibaiqi_right@i,w
  6588  0967  3E80               	addlw	128
  6589  0968  00B0               	movwf	Write_Com@com
  6590  0969  3000               	movlw	0
  6591  096A  1803               	skipnc
  6592  096B  3001               	movlw	1
  6593  096C  00B1               	movwf	Write_Com@com+1
  6594  096D  319F  2734  3189   	fcall	_Write_Com
  6595                           
  6596                           ;heibaiqi.c: 11: Write_Com(0x84);
  6597  0970  3084               	movlw	132
  6598  0971  0020               	movlb	0	; select bank0
  6599  0972  00B0               	movwf	Write_Com@com
  6600  0973  3000               	movlw	0
  6601  0974  00B1               	movwf	Write_Com@com+1
  6602  0975  319F  2734  3189   	fcall	_Write_Com
  6603                           
  6604                           ;heibaiqi.c: 12: Write_Data(0x7f);
  6605  0978  307F               	movlw	127
  6606  0979  0020               	movlb	0	; select bank0
  6607  097A  00B0               	movwf	Write_Data@dat
  6608  097B  3000               	movlw	0
  6609  097C  00B1               	movwf	Write_Data@dat+1
  6610  097D  319F  2743  3189   	fcall	_Write_Data
  6611                           
  6612                           ;heibaiqi.c: 13: for(j=1; j<8; j++) {
  6613  0980  0020               	movlb	0	; select bank0
  6614  0981  01C0               	clrf	draw_heibaiqi_right@j
  6615  0982  0AC0               	incf	draw_heibaiqi_right@j,f
  6616  0983                     L4:	
  6617  0983  3008               	movlw	8
  6618  0984  0240               	subwf	draw_heibaiqi_right@j,w
  6619  0985  1803               	btfsc	3,0
  6620  0986  29C9               	goto	l3323
  6621                           
  6622                           ;heibaiqi.c: 14: Write_Data(0xff);
  6623  0987  30FF               	movlw	255
  6624  0988  00B0               	movwf	Write_Data@dat
  6625  0989  3000               	movlw	0
  6626  098A  00B1               	movwf	Write_Data@dat+1
  6627  098B  319F  2743  3189   	fcall	_Write_Data
  6628  098E  3001               	movlw	1
  6629  098F  0020               	movlb	0	; select bank0
  6630  0990  00BE               	movwf	??_draw_heibaiqi_right
  6631  0991  083E               	movf	??_draw_heibaiqi_right,w
  6632  0992  07C0               	addwf	draw_heibaiqi_right@j,f
  6633  0993  2983               	goto	L4
  6634  0994                     l3307:	
  6635                           ;heibaiqi.c: 15: }
  6636                           ;heibaiqi.c: 16: }
  6637                           
  6638                           
  6639                           ;heibaiqi.c: 27: else if(i >= 48) {
  6640  0994  3030               	movlw	48
  6641  0995  0241               	subwf	draw_heibaiqi_right@i,w
  6642  0996  1C03               	skipc
  6643  0997  29C9               	goto	l3323
  6644                           
  6645                           ;heibaiqi.c: 28: Write_Com(0x80+(i-32));
  6646  0998  0841               	movf	draw_heibaiqi_right@i,w
  6647  0999  3E60               	addlw	96
  6648  099A  00B0               	movwf	Write_Com@com
  6649  099B  3000               	movlw	0
  6650  099C  1803               	skipnc
  6651  099D  3001               	movlw	1
  6652  099E  00B1               	movwf	Write_Com@com+1
  6653  099F  319F  2734  3189   	fcall	_Write_Com
  6654                           
  6655                           ;heibaiqi.c: 29: Write_Com(0x8C);
  6656  09A2  308C               	movlw	140
  6657  09A3  0020               	movlb	0	; select bank0
  6658  09A4  00B0               	movwf	Write_Com@com
  6659  09A5  3000               	movlw	0
  6660  09A6  00B1               	movwf	Write_Com@com+1
  6661  09A7  319F  2734  3189   	fcall	_Write_Com
  6662                           
  6663                           ;heibaiqi.c: 30: Write_Data(0x7f);
  6664  09AA  307F               	movlw	127
  6665  09AB  0020               	movlb	0	; select bank0
  6666  09AC  00B0               	movwf	Write_Data@dat
  6667  09AD  3000               	movlw	0
  6668  09AE  00B1               	movwf	Write_Data@dat+1
  6669  09AF  319F  2743  3189   	fcall	_Write_Data
  6670                           
  6671                           ;heibaiqi.c: 31: for(j=1; j<8; j++) {
  6672  09B2  0020               	movlb	0	; select bank0
  6673  09B3  01C0               	clrf	draw_heibaiqi_right@j
  6674  09B4  0AC0               	incf	draw_heibaiqi_right@j,f
  6675  09B5  3008               	movlw	8
  6676  09B6  0240               	subwf	draw_heibaiqi_right@j,w
  6677  09B7  1803               	btfsc	3,0
  6678  09B8  29C9               	goto	l3323
  6679  09B9                     l3317:	
  6680                           
  6681                           ;heibaiqi.c: 32: Write_Data(0xff);
  6682  09B9  30FF               	movlw	255
  6683  09BA  00B0               	movwf	Write_Data@dat
  6684  09BB  3000               	movlw	0
  6685  09BC  00B1               	movwf	Write_Data@dat+1
  6686  09BD  319F  2743  3189   	fcall	_Write_Data
  6687  09C0  3001               	movlw	1
  6688  09C1  0020               	movlb	0	; select bank0
  6689  09C2  00BE               	movwf	??_draw_heibaiqi_right
  6690  09C3  083E               	movf	??_draw_heibaiqi_right,w
  6691  09C4  07C0               	addwf	draw_heibaiqi_right@j,f
  6692  09C5  3008               	movlw	8
  6693  09C6  0240               	subwf	draw_heibaiqi_right@j,w
  6694  09C7  1C03               	skipc
  6695  09C8  29B9               	goto	l3317
  6696  09C9                     l3323:	
  6697  09C9  3001               	movlw	1
  6698  09CA  00BE               	movwf	??_draw_heibaiqi_right
  6699  09CB  083E               	movf	??_draw_heibaiqi_right,w
  6700  09CC  07C1               	addwf	draw_heibaiqi_right@i,f
  6701  09CD  3040               	movlw	64
  6702  09CE  0241               	subwf	draw_heibaiqi_right@i,w
  6703  09CF  1C03               	skipc
  6704  09D0  2962               	goto	l3291
  6705  09D1                     l3327:	
  6706                           
  6707                           ;heibaiqi.c: 33: }
  6708                           ;heibaiqi.c: 34: }
  6709                           ;heibaiqi.c: 35: }
  6710                           ;heibaiqi.c: 36: Write_Com(0x36);
  6711  09D1  3036               	movlw	54
  6712  09D2  00B0               	movwf	Write_Com@com
  6713  09D3  3000               	movlw	0
  6714  09D4  00B1               	movwf	Write_Com@com+1
  6715  09D5  319F  2734  3189   	fcall	_Write_Com
  6716                           
  6717                           ;heibaiqi.c: 37: Write_Com(0x30);
  6718  09D8  3030               	movlw	48
  6719  09D9  0020               	movlb	0	; select bank0
  6720  09DA  00B0               	movwf	Write_Com@com
  6721  09DB  3000               	movlw	0
  6722  09DC  00B1               	movwf	Write_Com@com+1
  6723  09DD  319F  2734  3189   	fcall	_Write_Com
  6724                           
  6725                           ;heibaiqi.c: 39: int2string(display_black,5,black_num);
  6726  09E0  3005               	movlw	5
  6727  09E1  0020               	movlb	0	; select bank0
  6728  09E2  00BE               	movwf	??_draw_heibaiqi_right
  6729  09E3  083E               	movf	??_draw_heibaiqi_right,w
  6730  09E4  00AC               	movwf	int2string@begin
  6731  09E5  0868               	movf	_black_num,w
  6732  09E6  00BF               	movwf	??_draw_heibaiqi_right+1
  6733  09E7  083F               	movf	??_draw_heibaiqi_right+1,w
  6734  09E8  00AD               	movwf	int2string@num
  6735  09E9  3020               	movlw	(low (_display_black| (0+256)))& (0+255)
  6736  09EA  3193  23D1  3189   	fcall	_int2string
  6737                           
  6738                           ;heibaiqi.c: 40: Display_Chars(2,display_black,5);
  6739  09ED  3020               	movlw	low _display_black
  6740  09EE  0020               	movlb	0	; select bank0
  6741  09EF  00B2               	movwf	Display_Chars@string
  6742  09F0  3001               	movlw	high _display_black
  6743  09F1  00B3               	movwf	Display_Chars@string+1
  6744  09F2  3005               	movlw	5
  6745  09F3  00BE               	movwf	??_draw_heibaiqi_right
  6746  09F4  083E               	movf	??_draw_heibaiqi_right,w
  6747  09F5  00B4               	movwf	Display_Chars@y
  6748  09F6  3002               	movlw	2
  6749  09F7  3194  246C  3189   	fcall	_Display_Chars
  6750                           
  6751                           ;heibaiqi.c: 41: int2string(display_white,5,white_num);
  6752  09FA  3005               	movlw	5
  6753  09FB  0020               	movlb	0	; select bank0
  6754  09FC  00BE               	movwf	??_draw_heibaiqi_right
  6755  09FD  083E               	movf	??_draw_heibaiqi_right,w
  6756  09FE  00AC               	movwf	int2string@begin
  6757  09FF  086B               	movf	_white_num,w
  6758  0A00  00BF               	movwf	??_draw_heibaiqi_right+1
  6759  0A01  083F               	movf	??_draw_heibaiqi_right+1,w
  6760  0A02  00AD               	movwf	int2string@num
  6761  0A03  3034               	movlw	(low (_display_white| (0+256)))& (0+255)
  6762  0A04  3193  23D1  3189   	fcall	_int2string
  6763                           
  6764                           ;heibaiqi.c: 42: Display_Chars(3,display_white,5);
  6765  0A07  3034               	movlw	low _display_white
  6766  0A08  0020               	movlb	0	; select bank0
  6767  0A09  00B2               	movwf	Display_Chars@string
  6768  0A0A  3001               	movlw	high _display_white
  6769  0A0B  00B3               	movwf	Display_Chars@string+1
  6770  0A0C  3005               	movlw	5
  6771  0A0D  00BE               	movwf	??_draw_heibaiqi_right
  6772  0A0E  083E               	movf	??_draw_heibaiqi_right,w
  6773  0A0F  00B4               	movwf	Display_Chars@y
  6774  0A10  3003               	movlw	3
  6775  0A11  3194  246C         	fcall	_Display_Chars
  6776  0A13  0008               	return
  6777  0A14                     __end_of_draw_heibaiqi_right:	
  6778                           
  6779                           	psect	text15
  6780  0086                     __ptext15:	
  6781 ;; *************** function _heibaiqi *****************
  6782 ;; Defined at:
  6783 ;;		line 252 in file "heibaiqi.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      void 
  6790 ;; Registers used:
  6791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;Total ram usage:        7 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    9
  6804 ;; This function calls:
  6805 ;;		_Display_Char
  6806 ;;		_Display_Chars
  6807 ;;		_choose_point
  6808 ;;		_init_environment
  6809 ;;		_judge_result
  6810 ;;		_set_menu
  6811 ;;		_set_point
  6812 ;; This function is called by:
  6813 ;;		_run_game
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           
  6818                           ;psect for function _heibaiqi
  6819  0086                     _heibaiqi:	
  6820                           
  6821                           ;heibaiqi.c: 256: if(player == 1) {
  6822                           
  6823                           ;incstack = 0
  6824                           ; Regs used in _heibaiqi: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6825  0086  0021               	movlb	1	; select bank1
  6826  0087  0321               	decf	_player^(0+128),w
  6827  0088  1D03               	btfss	3,2
  6828  0089  28A5               	goto	l3751
  6829                           
  6830                           ;heibaiqi.c: 257: Display_Char(2, 0x2A, 5);
  6831  008A  302A               	movlw	42
  6832  008B  0020               	movlb	0	; select bank0
  6833  008C  00D8               	movwf	??_heibaiqi
  6834  008D  0858               	movf	??_heibaiqi,w
  6835  008E  00B2               	movwf	Display_Char@data
  6836  008F  3005               	movlw	5
  6837  0090  00D9               	movwf	??_heibaiqi+1
  6838  0091  0859               	movf	??_heibaiqi+1,w
  6839  0092  00B3               	movwf	Display_Char@y
  6840  0093  3002               	movlw	2
  6841  0094  3192  22BE  3180   	fcall	_Display_Char
  6842                           
  6843                           ;heibaiqi.c: 258: Display_Chars(3, " ", 5);
  6844  0097  30CF               	movlw	low (STR_1| (0+32768))
  6845  0098  0020               	movlb	0	; select bank0
  6846  0099  00B2               	movwf	Display_Chars@string
  6847  009A  3090               	movlw	high (STR_1| (0+32768))
  6848  009B  00B3               	movwf	Display_Chars@string+1
  6849  009C  3005               	movlw	5
  6850  009D  00D8               	movwf	??_heibaiqi
  6851  009E  0858               	movf	??_heibaiqi,w
  6852  009F  00B4               	movwf	Display_Chars@y
  6853  00A0  3003               	movlw	3
  6854  00A1  3194  246C  3180   	fcall	_Display_Chars
  6855                           
  6856                           ;heibaiqi.c: 259: }
  6857  00A4  2B7E               	goto	l3839
  6858  00A5                     l3751:	
  6859                           
  6860                           ;heibaiqi.c: 260: else if(player == 2) {
  6861  00A5  3002               	movlw	2
  6862  00A6  0021               	movlb	1	; select bank1
  6863  00A7  0621               	xorwf	_player^(0+128),w
  6864  00A8  1D03               	btfss	3,2
  6865  00A9  2B7E               	goto	l3839
  6866                           
  6867                           ;heibaiqi.c: 261: Display_Char(3, 0x2A, 5);
  6868  00AA  302A               	movlw	42
  6869  00AB  0020               	movlb	0	; select bank0
  6870  00AC  00D8               	movwf	??_heibaiqi
  6871  00AD  0858               	movf	??_heibaiqi,w
  6872  00AE  00B2               	movwf	Display_Char@data
  6873  00AF  3005               	movlw	5
  6874  00B0  00D9               	movwf	??_heibaiqi+1
  6875  00B1  0859               	movf	??_heibaiqi+1,w
  6876  00B2  00B3               	movwf	Display_Char@y
  6877  00B3  3003               	movlw	3
  6878  00B4  3192  22BE  3180   	fcall	_Display_Char
  6879                           
  6880                           ;heibaiqi.c: 262: Display_Chars(2, " ", 5);
  6881  00B7  30CF               	movlw	low (STR_1| (0+32768))
  6882  00B8  0020               	movlb	0	; select bank0
  6883  00B9  00B2               	movwf	Display_Chars@string
  6884  00BA  3090               	movlw	high (STR_1| (0+32768))
  6885  00BB  00B3               	movwf	Display_Chars@string+1
  6886  00BC  3005               	movlw	5
  6887  00BD  00D8               	movwf	??_heibaiqi
  6888  00BE  0858               	movf	??_heibaiqi,w
  6889  00BF  00B4               	movwf	Display_Chars@y
  6890  00C0  3002               	movlw	2
  6891  00C1  3194  246C  3180   	fcall	_Display_Chars
  6892                           
  6893                           ;heibaiqi.c: 263: }
  6894                           ;heibaiqi.c: 264: switch(key)
  6895  00C4  2B7E               	goto	l3839
  6896  00C5                     l3757:	
  6897                           ;heibaiqi.c: 265: {
  6898                           ;heibaiqi.c: 266: case 1:
  6899                           
  6900                           
  6901                           ;heibaiqi.c: 267: key=0;
  6902  00C5  0020               	movlb	0	; select bank0
  6903  00C6  01E9               	clrf	_key
  6904                           
  6905                           ;heibaiqi.c: 268: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] & 0x03;
  6906  00C7  0864               	movf	_temp_cursor,w
  6907  00C8  00D8               	movwf	??_heibaiqi
  6908  00C9  3003               	movlw	3
  6909  00CA                     u4845:	
  6910  00CA  35D8               	lslf	??_heibaiqi,f
  6911  00CB  0B89               	decfsz	9,f
  6912  00CC  28CA               	goto	u4845
  6913  00CD  30A6               	movlw	(low (_table| 0))& (0+255)
  6914  00CE  0758               	addwf	??_heibaiqi,w
  6915  00CF  00D9               	movwf	??_heibaiqi+1
  6916  00D0  0865               	movf	_temp_cursor+1,w
  6917  00D1  0759               	addwf	??_heibaiqi+1,w
  6918  00D2  00DA               	movwf	??_heibaiqi+2
  6919  00D3  085A               	movf	??_heibaiqi+2,w
  6920  00D4  0086               	movwf	6
  6921  00D5  0187               	clrf	7
  6922  00D6  0801               	movf	1,w
  6923  00D7  3903               	andlw	3
  6924  00D8  00DB               	movwf	??_heibaiqi+3
  6925  00D9  0864               	movf	_temp_cursor,w
  6926  00DA  00DC               	movwf	??_heibaiqi+4
  6927  00DB  3003               	movlw	3
  6928  00DC                     u4855:	
  6929  00DC  35DC               	lslf	??_heibaiqi+4,f
  6930  00DD  0B89               	decfsz	9,f
  6931  00DE  28DC               	goto	u4855
  6932  00DF  30A6               	movlw	(low (_table| 0))& (0+255)
  6933  00E0  075C               	addwf	??_heibaiqi+4,w
  6934  00E1  00DD               	movwf	??_heibaiqi+5
  6935  00E2  0865               	movf	_temp_cursor+1,w
  6936  00E3  075D               	addwf	??_heibaiqi+5,w
  6937  00E4  00DE               	movwf	??_heibaiqi+6
  6938  00E5  085E               	movf	??_heibaiqi+6,w
  6939  00E6  0086               	movwf	6
  6940  00E7  0187               	clrf	7
  6941  00E8  085B               	movf	??_heibaiqi+3,w
  6942  00E9  0081               	movwf	1
  6943                           
  6944                           ;heibaiqi.c: 269: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]]);
  6945  00EA  0865               	movf	_temp_cursor+1,w
  6946  00EB  00D8               	movwf	??_heibaiqi
  6947  00EC  0858               	movf	??_heibaiqi,w
  6948  00ED  00B9               	movwf	set_point@point_y
  6949  00EE  0864               	movf	_temp_cursor,w
  6950  00EF  00D9               	movwf	??_heibaiqi+1
  6951  00F0  3003               	movlw	3
  6952  00F1                     u4865:	
  6953  00F1  35D9               	lslf	??_heibaiqi+1,f
  6954  00F2  0B89               	decfsz	9,f
  6955  00F3  28F1               	goto	u4865
  6956  00F4  30A6               	movlw	(low (_table| 0))& (0+255)
  6957  00F5  0759               	addwf	??_heibaiqi+1,w
  6958  00F6  00DA               	movwf	??_heibaiqi+2
  6959  00F7  0865               	movf	_temp_cursor+1,w
  6960  00F8  075A               	addwf	??_heibaiqi+2,w
  6961  00F9  00DB               	movwf	??_heibaiqi+3
  6962  00FA  085B               	movf	??_heibaiqi+3,w
  6963  00FB  0086               	movwf	6
  6964  00FC  0187               	clrf	7
  6965  00FD  0801               	movf	1,w
  6966  00FE  00DC               	movwf	??_heibaiqi+4
  6967  00FF  3002               	movlw	2
  6968  0100                     u4875:	
  6969  0100  35DC               	lslf	??_heibaiqi+4,f
  6970  0101  3EFF               	addlw	-1
  6971  0102  1D03               	skipz
  6972  0103  2900               	goto	u4875
  6973  0104  355C               	lslf	??_heibaiqi+4,w
  6974  0105  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  6975  0106  00DD               	movwf	??_heibaiqi+5
  6976  0107  085D               	movf	??_heibaiqi+5,w
  6977  0108  00BA               	movwf	set_point@value
  6978  0109  0864               	movf	_temp_cursor,w
  6979  010A  3197  2760  3180   	fcall	_set_point
  6980                           
  6981                           ;heibaiqi.c: 270: temp_cursor.row=(temp_cursor.row+8-1)%8;
  6982  010D  0020               	movlb	0	; select bank0
  6983  010E  0864               	movf	_temp_cursor,w
  6984  010F  3E07               	addlw	7
  6985  0110  3907               	andlw	7
  6986  0111  00D8               	movwf	??_heibaiqi
  6987  0112  0858               	movf	??_heibaiqi,w
  6988  0113  00E4               	movwf	_temp_cursor
  6989                           
  6990                           ;heibaiqi.c: 271: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] | 0x08;
  6991  0114  0864               	movf	_temp_cursor,w
  6992  0115  00D8               	movwf	??_heibaiqi
  6993  0116  3003               	movlw	3
  6994  0117                     u4885:	
  6995  0117  35D8               	lslf	??_heibaiqi,f
  6996  0118  0B89               	decfsz	9,f
  6997  0119  2917               	goto	u4885
  6998  011A  30A6               	movlw	(low (_table| 0))& (0+255)
  6999  011B  0758               	addwf	??_heibaiqi,w
  7000  011C  00D9               	movwf	??_heibaiqi+1
  7001  011D  0865               	movf	_temp_cursor+1,w
  7002  011E  0759               	addwf	??_heibaiqi+1,w
  7003  011F  00DA               	movwf	??_heibaiqi+2
  7004  0120  085A               	movf	??_heibaiqi+2,w
  7005  0121  0086               	movwf	6
  7006  0122  0187               	clrf	7
  7007  0123  0801               	movf	1,w
  7008  0124  3808               	iorlw	8
  7009  0125  00DB               	movwf	??_heibaiqi+3
  7010  0126  0864               	movf	_temp_cursor,w
  7011  0127  00DC               	movwf	??_heibaiqi+4
  7012  0128  3003               	movlw	3
  7013  0129                     u4895:	
  7014  0129  35DC               	lslf	??_heibaiqi+4,f
  7015  012A  0B89               	decfsz	9,f
  7016  012B  2929               	goto	u4895
  7017  012C  30A6               	movlw	(low (_table| 0))& (0+255)
  7018  012D  075C               	addwf	??_heibaiqi+4,w
  7019  012E  00DD               	movwf	??_heibaiqi+5
  7020  012F  0865               	movf	_temp_cursor+1,w
  7021  0130  075D               	addwf	??_heibaiqi+5,w
  7022  0131  00DE               	movwf	??_heibaiqi+6
  7023  0132  085E               	movf	??_heibaiqi+6,w
  7024  0133  0086               	movwf	6
  7025  0134  0187               	clrf	7
  7026  0135  085B               	movf	??_heibaiqi+3,w
  7027  0136  0081               	movwf	1
  7028                           
  7029                           ;heibaiqi.c: 272: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]-5]);
  7030  0137  0865               	movf	_temp_cursor+1,w
  7031  0138  00D8               	movwf	??_heibaiqi
  7032  0139  0858               	movf	??_heibaiqi,w
  7033  013A  00B9               	movwf	set_point@point_y
  7034  013B  0864               	movf	_temp_cursor,w
  7035  013C  00D9               	movwf	??_heibaiqi+1
  7036  013D  3003               	movlw	3
  7037  013E                     u4905:	
  7038  013E  35D9               	lslf	??_heibaiqi+1,f
  7039  013F  0B89               	decfsz	9,f
  7040  0140  293E               	goto	u4905
  7041  0141  30A6               	movlw	(low (_table| 0))& (0+255)
  7042  0142  0759               	addwf	??_heibaiqi+1,w
  7043  0143  00DA               	movwf	??_heibaiqi+2
  7044  0144  0865               	movf	_temp_cursor+1,w
  7045  0145  075A               	addwf	??_heibaiqi+2,w
  7046  0146  00DB               	movwf	??_heibaiqi+3
  7047  0147  085B               	movf	??_heibaiqi+3,w
  7048  0148  0086               	movwf	6
  7049  0149  0187               	clrf	7
  7050  014A  0801               	movf	1,w
  7051  014B  00DC               	movwf	??_heibaiqi+4
  7052  014C  3002               	movlw	2
  7053  014D                     u4915:	
  7054  014D  35DC               	lslf	??_heibaiqi+4,f
  7055  014E  3EFF               	addlw	-1
  7056  014F  1D03               	skipz
  7057  0150  294D               	goto	u4915
  7058  0151  355C               	lslf	??_heibaiqi+4,w
  7059  0152  3ED8               	addlw	216
  7060  0153  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  7061  0154  00DD               	movwf	??_heibaiqi+5
  7062  0155  085D               	movf	??_heibaiqi+5,w
  7063  0156  00BA               	movwf	set_point@value
  7064  0157  0864               	movf	_temp_cursor,w
  7065  0158  3197  2760         	fcall	_set_point
  7066                           
  7067                           ;heibaiqi.c: 273: break;
  7068  015A  0008               	return
  7069  015B                     l3769:	
  7070                           ;heibaiqi.c: 274: case 2:
  7071                           
  7072                           
  7073                           ;heibaiqi.c: 275: key=0;
  7074  015B  0020               	movlb	0	; select bank0
  7075  015C  01E9               	clrf	_key
  7076                           
  7077                           ;heibaiqi.c: 276: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] & 0x03;
  7078  015D  0864               	movf	_temp_cursor,w
  7079  015E  00D8               	movwf	??_heibaiqi
  7080  015F  3003               	movlw	3
  7081  0160                     u4925:	
  7082  0160  35D8               	lslf	??_heibaiqi,f
  7083  0161  0B89               	decfsz	9,f
  7084  0162  2960               	goto	u4925
  7085  0163  30A6               	movlw	(low (_table| 0))& (0+255)
  7086  0164  0758               	addwf	??_heibaiqi,w
  7087  0165  00D9               	movwf	??_heibaiqi+1
  7088  0166  0865               	movf	_temp_cursor+1,w
  7089  0167  0759               	addwf	??_heibaiqi+1,w
  7090  0168  00DA               	movwf	??_heibaiqi+2
  7091  0169  085A               	movf	??_heibaiqi+2,w
  7092  016A  0086               	movwf	6
  7093  016B  0187               	clrf	7
  7094  016C  0801               	movf	1,w
  7095  016D  3903               	andlw	3
  7096  016E  00DB               	movwf	??_heibaiqi+3
  7097  016F  0864               	movf	_temp_cursor,w
  7098  0170  00DC               	movwf	??_heibaiqi+4
  7099  0171  3003               	movlw	3
  7100  0172                     u4935:	
  7101  0172  35DC               	lslf	??_heibaiqi+4,f
  7102  0173  0B89               	decfsz	9,f
  7103  0174  2972               	goto	u4935
  7104  0175  30A6               	movlw	(low (_table| 0))& (0+255)
  7105  0176  075C               	addwf	??_heibaiqi+4,w
  7106  0177  00DD               	movwf	??_heibaiqi+5
  7107  0178  0865               	movf	_temp_cursor+1,w
  7108  0179  075D               	addwf	??_heibaiqi+5,w
  7109  017A  00DE               	movwf	??_heibaiqi+6
  7110  017B  085E               	movf	??_heibaiqi+6,w
  7111  017C  0086               	movwf	6
  7112  017D  0187               	clrf	7
  7113  017E  085B               	movf	??_heibaiqi+3,w
  7114  017F  0081               	movwf	1
  7115                           
  7116                           ;heibaiqi.c: 277: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]]);
  7117  0180  0865               	movf	_temp_cursor+1,w
  7118  0181  00D8               	movwf	??_heibaiqi
  7119  0182  0858               	movf	??_heibaiqi,w
  7120  0183  00B9               	movwf	set_point@point_y
  7121  0184  0864               	movf	_temp_cursor,w
  7122  0185  00D9               	movwf	??_heibaiqi+1
  7123  0186  3003               	movlw	3
  7124  0187                     u4945:	
  7125  0187  35D9               	lslf	??_heibaiqi+1,f
  7126  0188  0B89               	decfsz	9,f
  7127  0189  2987               	goto	u4945
  7128  018A  30A6               	movlw	(low (_table| 0))& (0+255)
  7129  018B  0759               	addwf	??_heibaiqi+1,w
  7130  018C  00DA               	movwf	??_heibaiqi+2
  7131  018D  0865               	movf	_temp_cursor+1,w
  7132  018E  075A               	addwf	??_heibaiqi+2,w
  7133  018F  00DB               	movwf	??_heibaiqi+3
  7134  0190  085B               	movf	??_heibaiqi+3,w
  7135  0191  0086               	movwf	6
  7136  0192  0187               	clrf	7
  7137  0193  0801               	movf	1,w
  7138  0194  00DC               	movwf	??_heibaiqi+4
  7139  0195  3002               	movlw	2
  7140  0196                     u4955:	
  7141  0196  35DC               	lslf	??_heibaiqi+4,f
  7142  0197  3EFF               	addlw	-1
  7143  0198  1D03               	skipz
  7144  0199  2996               	goto	u4955
  7145  019A  355C               	lslf	??_heibaiqi+4,w
  7146  019B  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  7147  019C  00DD               	movwf	??_heibaiqi+5
  7148  019D  085D               	movf	??_heibaiqi+5,w
  7149  019E  00BA               	movwf	set_point@value
  7150  019F  0864               	movf	_temp_cursor,w
  7151  01A0  3197  2760  3180   	fcall	_set_point
  7152                           
  7153                           ;heibaiqi.c: 278: temp_cursor.row=(temp_cursor.row+1)%8;
  7154  01A3  0020               	movlb	0	; select bank0
  7155  01A4  0864               	movf	_temp_cursor,w
  7156  01A5  3E01               	addlw	1
  7157  01A6  3907               	andlw	7
  7158  01A7  00D8               	movwf	??_heibaiqi
  7159  01A8  0858               	movf	??_heibaiqi,w
  7160  01A9  00E4               	movwf	_temp_cursor
  7161                           
  7162                           ;heibaiqi.c: 279: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] | 0x08;
  7163  01AA  0864               	movf	_temp_cursor,w
  7164  01AB  00D8               	movwf	??_heibaiqi
  7165  01AC  3003               	movlw	3
  7166  01AD                     u4965:	
  7167  01AD  35D8               	lslf	??_heibaiqi,f
  7168  01AE  0B89               	decfsz	9,f
  7169  01AF  29AD               	goto	u4965
  7170  01B0  30A6               	movlw	(low (_table| 0))& (0+255)
  7171  01B1  0758               	addwf	??_heibaiqi,w
  7172  01B2  00D9               	movwf	??_heibaiqi+1
  7173  01B3  0865               	movf	_temp_cursor+1,w
  7174  01B4  0759               	addwf	??_heibaiqi+1,w
  7175  01B5  00DA               	movwf	??_heibaiqi+2
  7176  01B6  085A               	movf	??_heibaiqi+2,w
  7177  01B7  0086               	movwf	6
  7178  01B8  0187               	clrf	7
  7179  01B9  0801               	movf	1,w
  7180  01BA  3808               	iorlw	8
  7181  01BB  00DB               	movwf	??_heibaiqi+3
  7182  01BC  0864               	movf	_temp_cursor,w
  7183  01BD  00DC               	movwf	??_heibaiqi+4
  7184  01BE  3003               	movlw	3
  7185  01BF                     u4975:	
  7186  01BF  35DC               	lslf	??_heibaiqi+4,f
  7187  01C0  0B89               	decfsz	9,f
  7188  01C1  29BF               	goto	u4975
  7189  01C2  30A6               	movlw	(low (_table| 0))& (0+255)
  7190  01C3  075C               	addwf	??_heibaiqi+4,w
  7191  01C4  00DD               	movwf	??_heibaiqi+5
  7192  01C5  0865               	movf	_temp_cursor+1,w
  7193  01C6  075D               	addwf	??_heibaiqi+5,w
  7194  01C7  00DE               	movwf	??_heibaiqi+6
  7195  01C8  085E               	movf	??_heibaiqi+6,w
  7196  01C9  0086               	movwf	6
  7197  01CA  0187               	clrf	7
  7198  01CB  085B               	movf	??_heibaiqi+3,w
  7199  01CC  0081               	movwf	1
  7200                           
  7201                           ;heibaiqi.c: 280: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]-5]);
  7202  01CD  0865               	movf	_temp_cursor+1,w
  7203  01CE  00D8               	movwf	??_heibaiqi
  7204  01CF  0858               	movf	??_heibaiqi,w
  7205  01D0  00B9               	movwf	set_point@point_y
  7206  01D1  0864               	movf	_temp_cursor,w
  7207  01D2  00D9               	movwf	??_heibaiqi+1
  7208  01D3  3003               	movlw	3
  7209  01D4                     u4985:	
  7210  01D4  35D9               	lslf	??_heibaiqi+1,f
  7211  01D5  0B89               	decfsz	9,f
  7212  01D6  29D4               	goto	u4985
  7213  01D7  30A6               	movlw	(low (_table| 0))& (0+255)
  7214  01D8  0759               	addwf	??_heibaiqi+1,w
  7215  01D9  00DA               	movwf	??_heibaiqi+2
  7216  01DA  0865               	movf	_temp_cursor+1,w
  7217  01DB  075A               	addwf	??_heibaiqi+2,w
  7218  01DC  00DB               	movwf	??_heibaiqi+3
  7219  01DD  085B               	movf	??_heibaiqi+3,w
  7220  01DE  0086               	movwf	6
  7221  01DF  0187               	clrf	7
  7222  01E0  0801               	movf	1,w
  7223  01E1  00DC               	movwf	??_heibaiqi+4
  7224  01E2  3002               	movlw	2
  7225  01E3                     u4995:	
  7226  01E3  35DC               	lslf	??_heibaiqi+4,f
  7227  01E4  3EFF               	addlw	-1
  7228  01E5  1D03               	skipz
  7229  01E6  29E3               	goto	u4995
  7230  01E7  355C               	lslf	??_heibaiqi+4,w
  7231  01E8  3ED8               	addlw	216
  7232  01E9  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  7233  01EA  00DD               	movwf	??_heibaiqi+5
  7234  01EB  085D               	movf	??_heibaiqi+5,w
  7235  01EC  00BA               	movwf	set_point@value
  7236  01ED  0864               	movf	_temp_cursor,w
  7237  01EE  3197  2760         	fcall	_set_point
  7238                           
  7239                           ;heibaiqi.c: 281: break;
  7240  01F0  0008               	return
  7241  01F1                     l3781:	
  7242                           ;heibaiqi.c: 282: case 3:
  7243                           
  7244                           
  7245                           ;heibaiqi.c: 283: key=0;
  7246  01F1  0020               	movlb	0	; select bank0
  7247  01F2  01E9               	clrf	_key
  7248                           
  7249                           ;heibaiqi.c: 284: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] & 0x03;
  7250  01F3  0864               	movf	_temp_cursor,w
  7251  01F4  00D8               	movwf	??_heibaiqi
  7252  01F5  3003               	movlw	3
  7253  01F6                     u5005:	
  7254  01F6  35D8               	lslf	??_heibaiqi,f
  7255  01F7  0B89               	decfsz	9,f
  7256  01F8  29F6               	goto	u5005
  7257  01F9  30A6               	movlw	(low (_table| 0))& (0+255)
  7258  01FA  0758               	addwf	??_heibaiqi,w
  7259  01FB  00D9               	movwf	??_heibaiqi+1
  7260  01FC  0865               	movf	_temp_cursor+1,w
  7261  01FD  0759               	addwf	??_heibaiqi+1,w
  7262  01FE  00DA               	movwf	??_heibaiqi+2
  7263  01FF  085A               	movf	??_heibaiqi+2,w
  7264  0200  0086               	movwf	6
  7265  0201  0187               	clrf	7
  7266  0202  0801               	movf	1,w
  7267  0203  3903               	andlw	3
  7268  0204  00DB               	movwf	??_heibaiqi+3
  7269  0205  0864               	movf	_temp_cursor,w
  7270  0206  00DC               	movwf	??_heibaiqi+4
  7271  0207  3003               	movlw	3
  7272  0208                     u5015:	
  7273  0208  35DC               	lslf	??_heibaiqi+4,f
  7274  0209  0B89               	decfsz	9,f
  7275  020A  2A08               	goto	u5015
  7276  020B  30A6               	movlw	(low (_table| 0))& (0+255)
  7277  020C  075C               	addwf	??_heibaiqi+4,w
  7278  020D  00DD               	movwf	??_heibaiqi+5
  7279  020E  0865               	movf	_temp_cursor+1,w
  7280  020F  075D               	addwf	??_heibaiqi+5,w
  7281  0210  00DE               	movwf	??_heibaiqi+6
  7282  0211  085E               	movf	??_heibaiqi+6,w
  7283  0212  0086               	movwf	6
  7284  0213  0187               	clrf	7
  7285  0214  085B               	movf	??_heibaiqi+3,w
  7286  0215  0081               	movwf	1
  7287                           
  7288                           ;heibaiqi.c: 285: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]]);
  7289  0216  0865               	movf	_temp_cursor+1,w
  7290  0217  00D8               	movwf	??_heibaiqi
  7291  0218  0858               	movf	??_heibaiqi,w
  7292  0219  00B9               	movwf	set_point@point_y
  7293  021A  0864               	movf	_temp_cursor,w
  7294  021B  00D9               	movwf	??_heibaiqi+1
  7295  021C  3003               	movlw	3
  7296  021D                     u5025:	
  7297  021D  35D9               	lslf	??_heibaiqi+1,f
  7298  021E  0B89               	decfsz	9,f
  7299  021F  2A1D               	goto	u5025
  7300  0220  30A6               	movlw	(low (_table| 0))& (0+255)
  7301  0221  0759               	addwf	??_heibaiqi+1,w
  7302  0222  00DA               	movwf	??_heibaiqi+2
  7303  0223  0865               	movf	_temp_cursor+1,w
  7304  0224  075A               	addwf	??_heibaiqi+2,w
  7305  0225  00DB               	movwf	??_heibaiqi+3
  7306  0226  085B               	movf	??_heibaiqi+3,w
  7307  0227  0086               	movwf	6
  7308  0228  0187               	clrf	7
  7309  0229  0801               	movf	1,w
  7310  022A  00DC               	movwf	??_heibaiqi+4
  7311  022B  3002               	movlw	2
  7312  022C                     u5035:	
  7313  022C  35DC               	lslf	??_heibaiqi+4,f
  7314  022D  3EFF               	addlw	-1
  7315  022E  1D03               	skipz
  7316  022F  2A2C               	goto	u5035
  7317  0230  355C               	lslf	??_heibaiqi+4,w
  7318  0231  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  7319  0232  00DD               	movwf	??_heibaiqi+5
  7320  0233  085D               	movf	??_heibaiqi+5,w
  7321  0234  00BA               	movwf	set_point@value
  7322  0235  0864               	movf	_temp_cursor,w
  7323  0236  3197  2760  3180   	fcall	_set_point
  7324                           
  7325                           ;heibaiqi.c: 286: temp_cursor.col=(temp_cursor.col+8-1)%8;
  7326  0239  0020               	movlb	0	; select bank0
  7327  023A  0865               	movf	_temp_cursor+1,w
  7328  023B  3E07               	addlw	7
  7329  023C  3907               	andlw	7
  7330  023D  00D8               	movwf	??_heibaiqi
  7331  023E  0858               	movf	??_heibaiqi,w
  7332  023F  00E5               	movwf	_temp_cursor+1
  7333                           
  7334                           ;heibaiqi.c: 287: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] | 0x08;
  7335  0240  0864               	movf	_temp_cursor,w
  7336  0241  00D8               	movwf	??_heibaiqi
  7337  0242  3003               	movlw	3
  7338  0243                     u5045:	
  7339  0243  35D8               	lslf	??_heibaiqi,f
  7340  0244  0B89               	decfsz	9,f
  7341  0245  2A43               	goto	u5045
  7342  0246  30A6               	movlw	(low (_table| 0))& (0+255)
  7343  0247  0758               	addwf	??_heibaiqi,w
  7344  0248  00D9               	movwf	??_heibaiqi+1
  7345  0249  0865               	movf	_temp_cursor+1,w
  7346  024A  0759               	addwf	??_heibaiqi+1,w
  7347  024B  00DA               	movwf	??_heibaiqi+2
  7348  024C  085A               	movf	??_heibaiqi+2,w
  7349  024D  0086               	movwf	6
  7350  024E  0187               	clrf	7
  7351  024F  0801               	movf	1,w
  7352  0250  3808               	iorlw	8
  7353  0251  00DB               	movwf	??_heibaiqi+3
  7354  0252  0864               	movf	_temp_cursor,w
  7355  0253  00DC               	movwf	??_heibaiqi+4
  7356  0254  3003               	movlw	3
  7357  0255                     u5055:	
  7358  0255  35DC               	lslf	??_heibaiqi+4,f
  7359  0256  0B89               	decfsz	9,f
  7360  0257  2A55               	goto	u5055
  7361  0258  30A6               	movlw	(low (_table| 0))& (0+255)
  7362  0259  075C               	addwf	??_heibaiqi+4,w
  7363  025A  00DD               	movwf	??_heibaiqi+5
  7364  025B  0865               	movf	_temp_cursor+1,w
  7365  025C  075D               	addwf	??_heibaiqi+5,w
  7366  025D  00DE               	movwf	??_heibaiqi+6
  7367  025E  085E               	movf	??_heibaiqi+6,w
  7368  025F  0086               	movwf	6
  7369  0260  0187               	clrf	7
  7370  0261  085B               	movf	??_heibaiqi+3,w
  7371  0262  0081               	movwf	1
  7372                           
  7373                           ;heibaiqi.c: 288: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]-5]);
  7374  0263  0865               	movf	_temp_cursor+1,w
  7375  0264  00D8               	movwf	??_heibaiqi
  7376  0265  0858               	movf	??_heibaiqi,w
  7377  0266  00B9               	movwf	set_point@point_y
  7378  0267  0864               	movf	_temp_cursor,w
  7379  0268  00D9               	movwf	??_heibaiqi+1
  7380  0269  3003               	movlw	3
  7381  026A                     u5065:	
  7382  026A  35D9               	lslf	??_heibaiqi+1,f
  7383  026B  0B89               	decfsz	9,f
  7384  026C  2A6A               	goto	u5065
  7385  026D  30A6               	movlw	(low (_table| 0))& (0+255)
  7386  026E  0759               	addwf	??_heibaiqi+1,w
  7387  026F  00DA               	movwf	??_heibaiqi+2
  7388  0270  0865               	movf	_temp_cursor+1,w
  7389  0271  075A               	addwf	??_heibaiqi+2,w
  7390  0272  00DB               	movwf	??_heibaiqi+3
  7391  0273  085B               	movf	??_heibaiqi+3,w
  7392  0274  0086               	movwf	6
  7393  0275  0187               	clrf	7
  7394  0276  0801               	movf	1,w
  7395  0277  00DC               	movwf	??_heibaiqi+4
  7396  0278  3002               	movlw	2
  7397  0279                     u5075:	
  7398  0279  35DC               	lslf	??_heibaiqi+4,f
  7399  027A  3EFF               	addlw	-1
  7400  027B  1D03               	skipz
  7401  027C  2A79               	goto	u5075
  7402  027D  355C               	lslf	??_heibaiqi+4,w
  7403  027E  3ED8               	addlw	216
  7404  027F  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  7405  0280  00DD               	movwf	??_heibaiqi+5
  7406  0281  085D               	movf	??_heibaiqi+5,w
  7407  0282  00BA               	movwf	set_point@value
  7408  0283  0864               	movf	_temp_cursor,w
  7409  0284  3197  2760         	fcall	_set_point
  7410                           
  7411                           ;heibaiqi.c: 289: break;
  7412  0286  0008               	return
  7413  0287                     l3793:	
  7414                           ;heibaiqi.c: 290: case 4:
  7415                           
  7416                           
  7417                           ;heibaiqi.c: 291: key=0;
  7418  0287  0020               	movlb	0	; select bank0
  7419  0288  01E9               	clrf	_key
  7420                           
  7421                           ;heibaiqi.c: 292: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] & 0x03;
  7422  0289  0864               	movf	_temp_cursor,w
  7423  028A  00D8               	movwf	??_heibaiqi
  7424  028B  3003               	movlw	3
  7425  028C                     u5085:	
  7426  028C  35D8               	lslf	??_heibaiqi,f
  7427  028D  0B89               	decfsz	9,f
  7428  028E  2A8C               	goto	u5085
  7429  028F  30A6               	movlw	(low (_table| 0))& (0+255)
  7430  0290  0758               	addwf	??_heibaiqi,w
  7431  0291  00D9               	movwf	??_heibaiqi+1
  7432  0292  0865               	movf	_temp_cursor+1,w
  7433  0293  0759               	addwf	??_heibaiqi+1,w
  7434  0294  00DA               	movwf	??_heibaiqi+2
  7435  0295  085A               	movf	??_heibaiqi+2,w
  7436  0296  0086               	movwf	6
  7437  0297  0187               	clrf	7
  7438  0298  0801               	movf	1,w
  7439  0299  3903               	andlw	3
  7440  029A  00DB               	movwf	??_heibaiqi+3
  7441  029B  0864               	movf	_temp_cursor,w
  7442  029C  00DC               	movwf	??_heibaiqi+4
  7443  029D  3003               	movlw	3
  7444  029E                     u5095:	
  7445  029E  35DC               	lslf	??_heibaiqi+4,f
  7446  029F  0B89               	decfsz	9,f
  7447  02A0  2A9E               	goto	u5095
  7448  02A1  30A6               	movlw	(low (_table| 0))& (0+255)
  7449  02A2  075C               	addwf	??_heibaiqi+4,w
  7450  02A3  00DD               	movwf	??_heibaiqi+5
  7451  02A4  0865               	movf	_temp_cursor+1,w
  7452  02A5  075D               	addwf	??_heibaiqi+5,w
  7453  02A6  00DE               	movwf	??_heibaiqi+6
  7454  02A7  085E               	movf	??_heibaiqi+6,w
  7455  02A8  0086               	movwf	6
  7456  02A9  0187               	clrf	7
  7457  02AA  085B               	movf	??_heibaiqi+3,w
  7458  02AB  0081               	movwf	1
  7459                           
  7460                           ;heibaiqi.c: 293: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]]);
  7461  02AC  0865               	movf	_temp_cursor+1,w
  7462  02AD  00D8               	movwf	??_heibaiqi
  7463  02AE  0858               	movf	??_heibaiqi,w
  7464  02AF  00B9               	movwf	set_point@point_y
  7465  02B0  0864               	movf	_temp_cursor,w
  7466  02B1  00D9               	movwf	??_heibaiqi+1
  7467  02B2  3003               	movlw	3
  7468  02B3                     u5105:	
  7469  02B3  35D9               	lslf	??_heibaiqi+1,f
  7470  02B4  0B89               	decfsz	9,f
  7471  02B5  2AB3               	goto	u5105
  7472  02B6  30A6               	movlw	(low (_table| 0))& (0+255)
  7473  02B7  0759               	addwf	??_heibaiqi+1,w
  7474  02B8  00DA               	movwf	??_heibaiqi+2
  7475  02B9  0865               	movf	_temp_cursor+1,w
  7476  02BA  075A               	addwf	??_heibaiqi+2,w
  7477  02BB  00DB               	movwf	??_heibaiqi+3
  7478  02BC  085B               	movf	??_heibaiqi+3,w
  7479  02BD  0086               	movwf	6
  7480  02BE  0187               	clrf	7
  7481  02BF  0801               	movf	1,w
  7482  02C0  00DC               	movwf	??_heibaiqi+4
  7483  02C1  3002               	movlw	2
  7484  02C2                     u5115:	
  7485  02C2  35DC               	lslf	??_heibaiqi+4,f
  7486  02C3  3EFF               	addlw	-1
  7487  02C4  1D03               	skipz
  7488  02C5  2AC2               	goto	u5115
  7489  02C6  355C               	lslf	??_heibaiqi+4,w
  7490  02C7  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  7491  02C8  00DD               	movwf	??_heibaiqi+5
  7492  02C9  085D               	movf	??_heibaiqi+5,w
  7493  02CA  00BA               	movwf	set_point@value
  7494  02CB  0864               	movf	_temp_cursor,w
  7495  02CC  3197  2760  3180   	fcall	_set_point
  7496                           
  7497                           ;heibaiqi.c: 294: temp_cursor.col=(temp_cursor.col+1)%8;
  7498  02CF  0020               	movlb	0	; select bank0
  7499  02D0  0865               	movf	_temp_cursor+1,w
  7500  02D1  3E01               	addlw	1
  7501  02D2  3907               	andlw	7
  7502  02D3  00D8               	movwf	??_heibaiqi
  7503  02D4  0858               	movf	??_heibaiqi,w
  7504  02D5  00E5               	movwf	_temp_cursor+1
  7505                           
  7506                           ;heibaiqi.c: 295: table[temp_cursor.row][temp_cursor.col] = table[temp_cursor.row][temp_
      +                          cursor.col] | 0x08;
  7507  02D6  0864               	movf	_temp_cursor,w
  7508  02D7  00D8               	movwf	??_heibaiqi
  7509  02D8  3003               	movlw	3
  7510  02D9                     u5125:	
  7511  02D9  35D8               	lslf	??_heibaiqi,f
  7512  02DA  0B89               	decfsz	9,f
  7513  02DB  2AD9               	goto	u5125
  7514  02DC  30A6               	movlw	(low (_table| 0))& (0+255)
  7515  02DD  0758               	addwf	??_heibaiqi,w
  7516  02DE  00D9               	movwf	??_heibaiqi+1
  7517  02DF  0865               	movf	_temp_cursor+1,w
  7518  02E0  0759               	addwf	??_heibaiqi+1,w
  7519  02E1  00DA               	movwf	??_heibaiqi+2
  7520  02E2  085A               	movf	??_heibaiqi+2,w
  7521  02E3  0086               	movwf	6
  7522  02E4  0187               	clrf	7
  7523  02E5  0801               	movf	1,w
  7524  02E6  3808               	iorlw	8
  7525  02E7  00DB               	movwf	??_heibaiqi+3
  7526  02E8  0864               	movf	_temp_cursor,w
  7527  02E9  00DC               	movwf	??_heibaiqi+4
  7528  02EA  3003               	movlw	3
  7529  02EB                     u5135:	
  7530  02EB  35DC               	lslf	??_heibaiqi+4,f
  7531  02EC  0B89               	decfsz	9,f
  7532  02ED  2AEB               	goto	u5135
  7533  02EE  30A6               	movlw	(low (_table| 0))& (0+255)
  7534  02EF  075C               	addwf	??_heibaiqi+4,w
  7535  02F0  00DD               	movwf	??_heibaiqi+5
  7536  02F1  0865               	movf	_temp_cursor+1,w
  7537  02F2  075D               	addwf	??_heibaiqi+5,w
  7538  02F3  00DE               	movwf	??_heibaiqi+6
  7539  02F4  085E               	movf	??_heibaiqi+6,w
  7540  02F5  0086               	movwf	6
  7541  02F6  0187               	clrf	7
  7542  02F7  085B               	movf	??_heibaiqi+3,w
  7543  02F8  0081               	movwf	1
  7544                           
  7545                           ;heibaiqi.c: 296: set_point(temp_cursor.row,temp_cursor.col,screen[table[temp_cursor.row
      +                          ][temp_cursor.col]-5]);
  7546  02F9  0865               	movf	_temp_cursor+1,w
  7547  02FA  00D8               	movwf	??_heibaiqi
  7548  02FB  0858               	movf	??_heibaiqi,w
  7549  02FC  00B9               	movwf	set_point@point_y
  7550  02FD  0864               	movf	_temp_cursor,w
  7551  02FE  00D9               	movwf	??_heibaiqi+1
  7552  02FF  3003               	movlw	3
  7553  0300                     u5145:	
  7554  0300  35D9               	lslf	??_heibaiqi+1,f
  7555  0301  0B89               	decfsz	9,f
  7556  0302  2B00               	goto	u5145
  7557  0303  30A6               	movlw	(low (_table| 0))& (0+255)
  7558  0304  0759               	addwf	??_heibaiqi+1,w
  7559  0305  00DA               	movwf	??_heibaiqi+2
  7560  0306  0865               	movf	_temp_cursor+1,w
  7561  0307  075A               	addwf	??_heibaiqi+2,w
  7562  0308  00DB               	movwf	??_heibaiqi+3
  7563  0309  085B               	movf	??_heibaiqi+3,w
  7564  030A  0086               	movwf	6
  7565  030B  0187               	clrf	7
  7566  030C  0801               	movf	1,w
  7567  030D  00DC               	movwf	??_heibaiqi+4
  7568  030E  3002               	movlw	2
  7569  030F                     u5155:	
  7570  030F  35DC               	lslf	??_heibaiqi+4,f
  7571  0310  3EFF               	addlw	-1
  7572  0311  1D03               	skipz
  7573  0312  2B0F               	goto	u5155
  7574  0313  355C               	lslf	??_heibaiqi+4,w
  7575  0314  3ED8               	addlw	216
  7576  0315  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  7577  0316  00DD               	movwf	??_heibaiqi+5
  7578  0317  085D               	movf	??_heibaiqi+5,w
  7579  0318  00BA               	movwf	set_point@value
  7580  0319  0864               	movf	_temp_cursor,w
  7581  031A  3197  2760         	fcall	_set_point
  7582                           
  7583                           ;heibaiqi.c: 297: break;
  7584  031C  0008               	return
  7585  031D                     l3805:	
  7586                           ;heibaiqi.c: 298: case 5:
  7587                           
  7588                           
  7589                           ;heibaiqi.c: 299: key=0;
  7590  031D  0020               	movlb	0	; select bank0
  7591  031E  01E9               	clrf	_key
  7592                           
  7593                           ;heibaiqi.c: 300: if(!choose_point(temp_cursor.row,temp_cursor.col,player))
  7594  031F  0865               	movf	_temp_cursor+1,w
  7595  0320  00D8               	movwf	??_heibaiqi
  7596  0321  0858               	movf	??_heibaiqi,w
  7597  0322  00C5               	movwf	choose_point@col
  7598  0323  0021               	movlb	1	; select bank1
  7599  0324  0821               	movf	_player^(0+128),w
  7600  0325  0020               	movlb	0	; select bank0
  7601  0326  00D9               	movwf	??_heibaiqi+1
  7602  0327  0859               	movf	??_heibaiqi+1,w
  7603  0328  00C6               	movwf	choose_point@ply
  7604  0329  0864               	movf	_temp_cursor,w
  7605  032A  318E  2672  3180   	fcall	_choose_point
  7606  032D  3A00               	xorlw	0
  7607  032E  1903               	btfsc	3,2
  7608  032F  0008               	return
  7609                           
  7610                           ;heibaiqi.c: 303: result = judge_result(player);
  7611                           
  7612                           ;heibaiqi.c: 301: break;
  7613  0330  0021               	movlb	1	; select bank1
  7614  0331  0821               	movf	_player^(0+128),w
  7615  0332  3195  2577  3180   	fcall	_judge_result
  7616  0335  0020               	movlb	0	; select bank0
  7617  0336  00D8               	movwf	??_heibaiqi
  7618  0337  0858               	movf	??_heibaiqi,w
  7619  0338  0021               	movlb	1	; select bank1
  7620  0339  00A2               	movwf	_result^(0+128)
  7621                           
  7622                           ;heibaiqi.c: 304: if(result==0)
  7623  033A  0822               	movf	_result^(0+128),w
  7624  033B  1D03               	btfss	3,2
  7625  033C  2B46               	goto	l3819
  7626                           
  7627                           ;heibaiqi.c: 305: {
  7628                           ;heibaiqi.c: 306: player=3-player;
  7629  033D  0321               	decf	_player^(0+128),w
  7630  033E  3AFF               	xorlw	255
  7631  033F  3E03               	addlw	3
  7632  0340  0020               	movlb	0	; select bank0
  7633  0341  00D8               	movwf	??_heibaiqi
  7634  0342  0858               	movf	??_heibaiqi,w
  7635  0343  0021               	movlb	1	; select bank1
  7636  0344  00A1               	movwf	_player^(0+128)
  7637                           
  7638                           ;heibaiqi.c: 307: break;
  7639  0345  0008               	return
  7640  0346                     l3819:	
  7641                           ;heibaiqi.c: 308: }
  7642                           
  7643                           
  7644                           ;heibaiqi.c: 309: else if(result==1)
  7645  0346  0322               	decf	_result^(0+128),w
  7646  0347  1D03               	btfss	3,2
  7647  0348  2B4E               	goto	l3823
  7648                           
  7649                           ;heibaiqi.c: 310: {
  7650                           ;heibaiqi.c: 311: Display_Chars(1, "Black Win",1);
  7651  0349  3040               	movlw	low (STR_3| (0+32768))
  7652  034A  0020               	movlb	0	; select bank0
  7653  034B  00B2               	movwf	Display_Chars@string
  7654  034C  3090               	movlw	high (STR_3| (0+32768))
  7655  034D  2B61               	goto	L5
  7656  034E                     l3823:	
  7657                           ;heibaiqi.c: 313: }
  7658                           
  7659                           ;heibaiqi.c: 312: Display_Chars(2, "Press back to exit",1);
  7660                           
  7661                           
  7662                           ;heibaiqi.c: 314: else if(result==2)
  7663  034E  3002               	movlw	2
  7664  034F  0021               	movlb	1	; select bank1
  7665  0350  0622               	xorwf	_result^(0+128),w
  7666  0351  1D03               	btfss	3,2
  7667  0352  2B58               	goto	l3827
  7668                           
  7669                           ;heibaiqi.c: 315: {
  7670                           ;heibaiqi.c: 316: Display_Chars(1, "White Win",1);
  7671  0353  3036               	movlw	low (STR_5| (0+32768))
  7672  0354  0020               	movlb	0	; select bank0
  7673  0355  00B2               	movwf	Display_Chars@string
  7674  0356  3090               	movlw	high (STR_5| (0+32768))
  7675  0357  2B61               	goto	L5
  7676  0358                     l3827:	
  7677                           ;heibaiqi.c: 318: }
  7678                           
  7679                           ;heibaiqi.c: 317: Display_Chars(2, "Press back to exit",1);
  7680                           
  7681                           
  7682                           ;heibaiqi.c: 319: else if(result==3)
  7683  0358  3003               	movlw	3
  7684  0359  0021               	movlb	1	; select bank1
  7685  035A  0622               	xorwf	_result^(0+128),w
  7686  035B  1D03               	btfss	3,2
  7687  035C  2B73               	goto	l3831
  7688                           
  7689                           ;heibaiqi.c: 320: {
  7690                           ;heibaiqi.c: 321: Display_Chars(1, "ping ju",1);
  7691  035D  30BB               	movlw	low (STR_7| (0+32768))
  7692  035E  0020               	movlb	0	; select bank0
  7693  035F  00B2               	movwf	Display_Chars@string
  7694  0360  3090               	movlw	high (STR_7| (0+32768))
  7695  0361                     L5:	
  7696  0361  00B3               	movwf	Display_Chars@string+1
  7697  0362  01B4               	clrf	Display_Chars@y
  7698  0363  0AB4               	incf	Display_Chars@y,f
  7699  0364  3001               	movlw	1
  7700  0365  3194  246C  3180   	fcall	_Display_Chars
  7701                           
  7702                           ;heibaiqi.c: 322: Display_Chars(2, "Press back to exit",1);
  7703  0368  3000               	movlw	low (STR_4| (0+32768))
  7704  0369  0020               	movlb	0	; select bank0
  7705  036A  00B2               	movwf	Display_Chars@string
  7706  036B  3090               	movlw	high (STR_4| (0+32768))
  7707  036C  00B3               	movwf	Display_Chars@string+1
  7708  036D  01B4               	clrf	Display_Chars@y
  7709  036E  0AB4               	incf	Display_Chars@y,f
  7710  036F  3002               	movlw	2
  7711  0370  3194  246C  3180   	fcall	_Display_Chars
  7712  0373                     l3831:	
  7713                           ;heibaiqi.c: 325: ;
  7714                           
  7715                           ;heibaiqi.c: 323: }
  7716                           ;heibaiqi.c: 324: while(key!=6)
  7717                           
  7718  0373  3006               	movlw	6
  7719  0374  0020               	movlb	0	; select bank0
  7720  0375  0669               	xorwf	_key,w
  7721  0376  1D03               	btfss	3,2
  7722  0377  2B73               	goto	l3831
  7723  0378                     l3833:	
  7724                           ;heibaiqi.c: 326: case 6:
  7725                           
  7726                           
  7727                           ;heibaiqi.c: 327: init_environment();
  7728  0378  319F  2774  3180   	fcall	_init_environment
  7729                           
  7730                           ;heibaiqi.c: 328: set_menu();
  7731  037B  3191  211A         	fcall	_set_menu
  7732                           
  7733                           ;heibaiqi.c: 330: }
  7734                           
  7735                           ;heibaiqi.c: 329: break;
  7736  037D  0008               	return
  7737  037E                     l3839:	
  7738  037E  0020               	movlb	0	; select bank0
  7739  037F  0869               	movf	_key,w
  7740                           
  7741                           ; Switch size 1, requested type "space"
  7742                           ; Number of cases is 6, Range of values is 1 to 6
  7743                           ; switch strategies available:
  7744                           ; Name         Instructions Cycles
  7745                           ; simple_byte           19    10 (average)
  7746                           ; direct_byte           21     9 (fixed)
  7747                           ; jumptable            263     9 (fixed)
  7748                           ;	Chosen strategy is simple_byte
  7749  0380  3A01               	xorlw	1	; case 1
  7750  0381  1903               	skipnz
  7751  0382  28C5               	goto	l3757
  7752  0383  3A03               	xorlw	3	; case 2
  7753  0384  1903               	skipnz
  7754  0385  295B               	goto	l3769
  7755  0386  3A01               	xorlw	1	; case 3
  7756  0387  1903               	skipnz
  7757  0388  29F1               	goto	l3781
  7758  0389  3A07               	xorlw	7	; case 4
  7759  038A  1903               	skipnz
  7760  038B  2A87               	goto	l3793
  7761  038C  3A01               	xorlw	1	; case 5
  7762  038D  1903               	skipnz
  7763  038E  2B1D               	goto	l3805
  7764  038F  3A03               	xorlw	3	; case 6
  7765  0390  1903               	skipnz
  7766  0391  2B78               	goto	l3833
  7767  0392  2B93               	goto	l179
  7768  0393                     l179:	
  7769  0393  0008               	return
  7770  0394                     __end_of_heibaiqi:	
  7771                           
  7772                           	psect	text16
  7773  111A                     __ptext16:	
  7774 ;; *************** function _set_menu *****************
  7775 ;; Defined at:
  7776 ;;		line 355 in file "func.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;		None
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;		None
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      void 
  7783 ;; Registers used:
  7784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;Total ram usage:        1 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    8
  7797 ;; This function calls:
  7798 ;;		_Display_Char
  7799 ;;		_Display_Chars
  7800 ;; This function is called by:
  7801 ;;		_heibaiqi
  7802 ;;		_main
  7803 ;;		_choose_level2
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           
  7808                           ;psect for function _set_menu
  7809  111A                     _set_menu:	
  7810                           
  7811                           ;func.c: 357: Display_Chars(1, "heibaiqi",2);
  7812                           
  7813                           ;incstack = 0
  7814                           ; Regs used in _set_menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7815  111A  304A               	movlw	low (STR_12| (0+32768))
  7816  111B  0020               	movlb	0	; select bank0
  7817  111C  00B2               	movwf	Display_Chars@string
  7818  111D  3090               	movlw	high (STR_12| (0+32768))
  7819  111E  00B3               	movwf	Display_Chars@string+1
  7820  111F  3002               	movlw	2
  7821  1120  00BE               	movwf	??_set_menu
  7822  1121  083E               	movf	??_set_menu,w
  7823  1122  00B4               	movwf	Display_Chars@y
  7824  1123  3001               	movlw	1
  7825  1124  3194  246C  3191   	fcall	_Display_Chars
  7826                           
  7827                           ;func.c: 358: Display_Chars(2,"wayout",2);
  7828  1127  30C3               	movlw	low (STR_13| (0+32768))
  7829  1128  0020               	movlb	0	; select bank0
  7830  1129  00B2               	movwf	Display_Chars@string
  7831  112A  3090               	movlw	high (STR_13| (0+32768))
  7832  112B  00B3               	movwf	Display_Chars@string+1
  7833  112C  3002               	movlw	2
  7834  112D  00BE               	movwf	??_set_menu
  7835  112E  083E               	movf	??_set_menu,w
  7836  112F  00B4               	movwf	Display_Chars@y
  7837  1130  3002               	movlw	2
  7838  1131  3194  246C  3191   	fcall	_Display_Chars
  7839                           
  7840                           ;func.c: 360: Display_Char(1, 0x1A, 1);
  7841  1134  301A               	movlw	26
  7842  1135  0020               	movlb	0	; select bank0
  7843  1136  00BE               	movwf	??_set_menu
  7844  1137  083E               	movf	??_set_menu,w
  7845  1138  00B2               	movwf	Display_Char@data
  7846  1139  01B3               	clrf	Display_Char@y
  7847  113A  0AB3               	incf	Display_Char@y,f
  7848  113B  3001               	movlw	1
  7849  113C  3192  22BE         	fcall	_Display_Char
  7850  113E  0008               	return
  7851  113F                     __end_of_set_menu:	
  7852                           
  7853                           	psect	text17
  7854  12BE                     __ptext17:	
  7855 ;; *************** function _Display_Char *****************
  7856 ;; Defined at:
  7857 ;;		line 166 in file "func.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;  x               1    wreg     unsigned char 
  7860 ;;  data            1   18[BANK0 ] unsigned char 
  7861 ;;  y               1   19[BANK0 ] unsigned char 
  7862 ;; Auto vars:     Size  Location     Type
  7863 ;;  x               1   28[BANK0 ] unsigned char 
  7864 ;;  addresses       4   22[BANK0 ] unsigned char [4]
  7865 ;;  i               2   26[BANK0 ] int 
  7866 ;; Return value:  Size  Location     Type
  7867 ;;                  1    wreg      void 
  7868 ;; Registers used:
  7869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7870 ;; Tracked objects:
  7871 ;;		On entry : 0/0
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7875 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;Total ram usage:       11 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:    7
  7882 ;; This function calls:
  7883 ;;		_Write_Com
  7884 ;;		_Write_Data
  7885 ;; This function is called by:
  7886 ;;		_heibaiqi
  7887 ;;		_set_menu
  7888 ;;		_run_game
  7889 ;;		_choose_level2
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           
  7894                           ;psect for function _Display_Char
  7895  12BE                     _Display_Char:	
  7896                           
  7897                           ;incstack = 0
  7898                           ; Regs used in _Display_Char: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7899                           ;Display_Char@x stored from wreg
  7900  12BE  0020               	movlb	0	; select bank0
  7901  12BF  00BC               	movwf	Display_Char@x
  7902                           
  7903                           ;func.c: 167: unsigned char addresses[] = {0x80,0x90,0x88,0x98};
  7904  12C0  0021               	movlb	1	; select bank1
  7905  12C1  0869               	movf	(Display_Char@F6426+3)^(0+128),w
  7906  12C2  0020               	movlb	0	; select bank0
  7907  12C3  00B9               	movwf	Display_Char@addresses+3
  7908  12C4  0021               	movlb	1	; select bank1
  7909  12C5  0868               	movf	(Display_Char@F6426+2)^(0+128),w
  7910  12C6  0020               	movlb	0	; select bank0
  7911  12C7  00B8               	movwf	Display_Char@addresses+2
  7912  12C8  0021               	movlb	1	; select bank1
  7913  12C9  0867               	movf	(Display_Char@F6426+1)^(0+128),w
  7914  12CA  0020               	movlb	0	; select bank0
  7915  12CB  00B7               	movwf	Display_Char@addresses+1
  7916  12CC  0021               	movlb	1	; select bank1
  7917  12CD  0866               	movf	Display_Char@F6426^(0+128),w
  7918  12CE  0020               	movlb	0	; select bank0
  7919  12CF  00B6               	movwf	Display_Char@addresses
  7920                           
  7921                           ;func.c: 168: int i = 0;
  7922  12D0  01BA               	clrf	Display_Char@i
  7923  12D1  01BB               	clrf	Display_Char@i+1
  7924                           
  7925                           ;func.c: 169: Write_Com(0x30);
  7926  12D2  3030               	movlw	48
  7927  12D3  00B0               	movwf	Write_Com@com
  7928  12D4  3000               	movlw	0
  7929  12D5  00B1               	movwf	Write_Com@com+1
  7930  12D6  319F  2734  3192   	fcall	_Write_Com
  7931                           
  7932                           ;func.c: 170: Write_Com(0x06);
  7933  12D9  3006               	movlw	6
  7934  12DA  0020               	movlb	0	; select bank0
  7935  12DB  00B0               	movwf	Write_Com@com
  7936  12DC  3000               	movlw	0
  7937  12DD  00B1               	movwf	Write_Com@com+1
  7938  12DE  319F  2734  3192   	fcall	_Write_Com
  7939                           
  7940                           ;func.c: 173: Write_Com(addresses[x-1]+(y-1));
  7941  12E1  0020               	movlb	0	; select bank0
  7942  12E2  083C               	movf	Display_Char@x,w
  7943  12E3  3EFF               	addlw	255
  7944  12E4  3E36               	addlw	(low (Display_Char@addresses| 0))& (0+255)
  7945  12E5  0086               	movwf	6
  7946  12E6  0187               	clrf	7
  7947  12E7  0833               	movf	Display_Char@y,w
  7948  12E8  0701               	addwf	1,w
  7949  12E9  00B4               	movwf	??_Display_Char
  7950  12EA  01B5               	clrf	??_Display_Char+1
  7951  12EB  0DB5               	rlf	??_Display_Char+1,f
  7952  12EC  0834               	movf	??_Display_Char,w
  7953  12ED  3EFF               	addlw	255
  7954  12EE  00B0               	movwf	Write_Com@com
  7955  12EF  30FF               	movlw	255
  7956  12F0  3D35               	addwfc	??_Display_Char+1,w
  7957  12F1  00B1               	movwf	Write_Com@com+1
  7958  12F2  319F  2734  3192   	fcall	_Write_Com
  7959                           
  7960                           ;func.c: 175: Write_Data(data);
  7961  12F5  0020               	movlb	0	; select bank0
  7962  12F6  0832               	movf	Display_Char@data,w
  7963  12F7  00B4               	movwf	??_Display_Char
  7964  12F8  01B5               	clrf	??_Display_Char+1
  7965  12F9  0834               	movf	??_Display_Char,w
  7966  12FA  00B0               	movwf	Write_Data@dat
  7967  12FB  0835               	movf	??_Display_Char+1,w
  7968  12FC  00B1               	movwf	Write_Data@dat+1
  7969  12FD  319F  2743         	fcall	_Write_Data
  7970  12FF  0008               	return
  7971  1300                     __end_of_Display_Char:	
  7972                           
  7973                           	psect	text18
  7974  1577                     __ptext18:	
  7975 ;; *************** function _judge_result *****************
  7976 ;; Defined at:
  7977 ;;		line 204 in file "heibaiqi.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  player          1    wreg     unsigned char 
  7980 ;; Auto vars:     Size  Location     Type
  7981 ;;  player          1   32[BANK0 ] unsigned char 
  7982 ;;  result          1   33[BANK0 ] unsigned char 
  7983 ;;  col             1   35[BANK0 ] unsigned char 
  7984 ;;  row             1   34[BANK0 ] unsigned char 
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  1    wreg      unsigned char 
  7987 ;; Registers used:
  7988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;Total ram usage:        7 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    6
  8001 ;; This function calls:
  8002 ;;		_check_point
  8003 ;; This function is called by:
  8004 ;;		_heibaiqi
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           
  8009                           ;psect for function _judge_result
  8010  1577                     _judge_result:	
  8011                           
  8012                           ;incstack = 0
  8013                           ; Regs used in _judge_result: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8014                           ;judge_result@player stored from wreg
  8015  1577  0020               	movlb	0	; select bank0
  8016  1578  00C0               	movwf	judge_result@player
  8017                           
  8018                           ;heibaiqi.c: 206: if(black_num==0)
  8019  1579  0868               	movf	_black_num,w
  8020  157A  1D03               	btfss	3,2
  8021  157B  2D7E               	goto	l3411
  8022                           
  8023                           ;heibaiqi.c: 207: return 2;
  8024  157C  3002               	movlw	2
  8025  157D  0008               	return
  8026  157E                     l3411:	
  8027                           
  8028                           ;heibaiqi.c: 208: else if(white_num==0)
  8029  157E  086B               	movf	_white_num,w
  8030  157F  1D03               	btfss	3,2
  8031  1580  2D83               	goto	l3419
  8032                           
  8033                           ;heibaiqi.c: 209: return 1;
  8034  1581  3001               	movlw	1
  8035  1582  0008               	return
  8036  1583                     l3419:	
  8037                           
  8038                           ;heibaiqi.c: 210: else if(empty_num==0)
  8039  1583  0021               	movlb	1	; select bank1
  8040  1584  0820               	movf	_empty_num^(0+128),w
  8041  1585  1D03               	btfss	3,2
  8042  1586  2D9A               	goto	l3443
  8043                           
  8044                           ;heibaiqi.c: 211: {
  8045                           ;heibaiqi.c: 212: if(black_num>white_num)
  8046  1587  0020               	movlb	0	; select bank0
  8047  1588  0868               	movf	_black_num,w
  8048  1589  026B               	subwf	_white_num,w
  8049  158A  1803               	skipnc
  8050  158B  2D8E               	goto	l3429
  8051                           
  8052                           ;heibaiqi.c: 213: return 1;
  8053  158C  3001               	movlw	1
  8054  158D  0008               	return
  8055  158E                     l3429:	
  8056                           
  8057                           ;heibaiqi.c: 214: else if(black_num<white_num)
  8058  158E  086B               	movf	_white_num,w
  8059  158F  0268               	subwf	_black_num,w
  8060  1590  1803               	skipnc
  8061  1591  2D94               	goto	l3437
  8062                           
  8063                           ;heibaiqi.c: 215: return 2;
  8064  1592  3002               	movlw	2
  8065  1593  0008               	return
  8066  1594                     l3437:	
  8067                           
  8068                           ;heibaiqi.c: 216: else if(black_num==white_num)
  8069  1594  0868               	movf	_black_num,w
  8070  1595  066B               	xorwf	_white_num,w
  8071  1596  1D03               	skipz
  8072  1597  0008               	return
  8073                           
  8074                           ;heibaiqi.c: 217: return 3;
  8075  1598  3003               	movlw	3
  8076                           
  8077                           ;heibaiqi.c: 218: }
  8078  1599  0008               	return
  8079  159A                     l3443:	
  8080                           
  8081                           ;heibaiqi.c: 219: else
  8082                           ;heibaiqi.c: 220: {
  8083                           ;heibaiqi.c: 221: for(char row=0;row<8;row++)
  8084  159A  0020               	movlb	0	; select bank0
  8085  159B  01C2               	clrf	judge_result@row
  8086  159C  3008               	movlw	8
  8087  159D  0242               	subwf	judge_result@row,w
  8088  159E  1803               	btfsc	3,0
  8089  159F  2DCC               	goto	l3473
  8090  15A0                     l3449:	
  8091                           
  8092                           ;heibaiqi.c: 222: for(char col=0;col<8;col++)
  8093  15A0  01C3               	clrf	judge_result@col
  8094  15A1  3008               	movlw	8
  8095  15A2  0243               	subwf	judge_result@col,w
  8096  15A3  1803               	btfsc	3,0
  8097  15A4  2DC4               	goto	l3469
  8098  15A5                     l3455:	
  8099                           
  8100                           ;heibaiqi.c: 223: {
  8101                           ;heibaiqi.c: 224: unsigned char result = check_point(row, col, 3-player);
  8102  15A5  0843               	movf	judge_result@col,w
  8103  15A6  00BD               	movwf	??_judge_result
  8104  15A7  083D               	movf	??_judge_result,w
  8105  15A8  00A9               	movwf	check_point@col
  8106  15A9  0340               	decf	judge_result@player,w
  8107  15AA  3AFF               	xorlw	255
  8108  15AB  3E03               	addlw	3
  8109  15AC  00BE               	movwf	??_judge_result+1
  8110  15AD  083E               	movf	??_judge_result+1,w
  8111  15AE  00AA               	movwf	check_point@ply
  8112  15AF  0842               	movf	judge_result@row,w
  8113  15B0  318B  23EB  3195   	fcall	_check_point
  8114  15B3  0020               	movlb	0	; select bank0
  8115  15B4  00BF               	movwf	??_judge_result+2
  8116  15B5  083F               	movf	??_judge_result+2,w
  8117  15B6  00C1               	movwf	judge_result@result
  8118                           
  8119                           ;heibaiqi.c: 225: if(result)
  8120  15B7  0841               	movf	judge_result@result,w
  8121  15B8  1903               	btfsc	3,2
  8122  15B9  2DBC               	goto	l3465
  8123                           
  8124                           ;heibaiqi.c: 226: return 0;
  8125  15BA  3000               	movlw	0
  8126  15BB  0008               	return
  8127  15BC                     l3465:	
  8128                           ;heibaiqi.c: 227: else
  8129                           ;heibaiqi.c: 228: continue;
  8130                           
  8131  15BC  3001               	movlw	1
  8132  15BD  00BD               	movwf	??_judge_result
  8133  15BE  083D               	movf	??_judge_result,w
  8134  15BF  07C3               	addwf	judge_result@col,f
  8135  15C0  3008               	movlw	8
  8136  15C1  0243               	subwf	judge_result@col,w
  8137  15C2  1C03               	skipc
  8138  15C3  2DA5               	goto	l3455
  8139  15C4                     l3469:	
  8140  15C4  3001               	movlw	1
  8141  15C5  00BD               	movwf	??_judge_result
  8142  15C6  083D               	movf	??_judge_result,w
  8143  15C7  07C2               	addwf	judge_result@row,f
  8144  15C8  3008               	movlw	8
  8145  15C9  0242               	subwf	judge_result@row,w
  8146  15CA  1C03               	skipc
  8147  15CB  2DA0               	goto	l3449
  8148  15CC                     l3473:	
  8149                           
  8150                           ;heibaiqi.c: 229: }
  8151                           ;heibaiqi.c: 230: if(black_num>white_num)
  8152  15CC  0868               	movf	_black_num,w
  8153  15CD  026B               	subwf	_white_num,w
  8154  15CE  1803               	skipnc
  8155  15CF  2DD2               	goto	l3481
  8156                           
  8157                           ;heibaiqi.c: 231: return 1;
  8158  15D0  3001               	movlw	1
  8159  15D1  0008               	return
  8160  15D2                     l3481:	
  8161                           
  8162                           ;heibaiqi.c: 232: else if(black_num<white_num)
  8163  15D2  086B               	movf	_white_num,w
  8164  15D3  0268               	subwf	_black_num,w
  8165  15D4  1803               	skipnc
  8166  15D5  2DD8               	goto	l3489
  8167                           
  8168                           ;heibaiqi.c: 233: return 2;
  8169  15D6  3002               	movlw	2
  8170  15D7  0008               	return
  8171  15D8                     l3489:	
  8172                           
  8173                           ;heibaiqi.c: 234: else if(black_num==white_num)
  8174  15D8  0868               	movf	_black_num,w
  8175  15D9  066B               	xorwf	_white_num,w
  8176  15DA  1D03               	skipz
  8177  15DB  0008               	return
  8178                           
  8179                           ;heibaiqi.c: 235: return 3;
  8180  15DC  3003               	movlw	3
  8181  15DD  0008               	return
  8182  15DE                     __end_of_judge_result:	
  8183                           
  8184                           	psect	text19
  8185  1F74                     __ptext19:	
  8186 ;; *************** function _init_environment *****************
  8187 ;; Defined at:
  8188 ;;		line 278 in file "func.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;		None
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;		None
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  1    wreg      void 
  8195 ;; Registers used:
  8196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;Total ram usage:        0 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    8
  8209 ;; This function calls:
  8210 ;;		_Clear_Screen
  8211 ;;		_memset
  8212 ;; This function is called by:
  8213 ;;		_heibaiqi
  8214 ;;		_main
  8215 ;;		_choose_level2
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           
  8220                           ;psect for function _init_environment
  8221  1F74                     _init_environment:	
  8222                           
  8223                           ;func.c: 280: start=0;
  8224                           
  8225                           ;incstack = 0
  8226                           ; Regs used in _init_environment: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8227  1F74  0021               	movlb	1	; select bank1
  8228  1F75  01A3               	clrf	_start^(0+128)
  8229                           
  8230                           ;func.c: 281: key=0;
  8231  1F76  0020               	movlb	0	; select bank0
  8232  1F77  01E9               	clrf	_key
  8233                           
  8234                           ;func.c: 282: arrow=1;
  8235  1F78  01E7               	clrf	_arrow
  8236  1F79  0AE7               	incf	_arrow,f
  8237                           
  8238                           ;func.c: 284: temp_cursor.row=0;
  8239  1F7A  01E4               	clrf	_temp_cursor
  8240                           
  8241                           ;func.c: 285: temp_cursor.col=0;
  8242  1F7B  01E5               	clrf	_temp_cursor+1
  8243                           
  8244                           ;func.c: 287: memset(table,0,sizeof(table));
  8245  1F7C  3000               	movlw	0
  8246  1F7D  00A3               	movwf	memset@c
  8247  1F7E  00A4               	movwf	memset@c+1
  8248  1F7F  3040               	movlw	64
  8249  1F80  00A5               	movwf	memset@n
  8250  1F81  3000               	movlw	0
  8251  1F82  00A6               	movwf	memset@n+1
  8252  1F83  30A6               	movlw	(low (_table| 0))& (0+255)
  8253  1F84  319F  27A9  319F   	fcall	_memset
  8254                           
  8255                           ;func.c: 288: Clear_Screen(0x00);
  8256  1F87  3000               	movlw	0
  8257  1F88  0020               	movlb	0	; select bank0
  8258  1F89  00B2               	movwf	Clear_Screen@value
  8259  1F8A  00B3               	movwf	Clear_Screen@value+1
  8260  1F8B  3195  251A         	fcall	_Clear_Screen
  8261  1F8D  0008               	return
  8262  1F8E                     __end_of_init_environment:	
  8263                           
  8264                           	psect	text20
  8265  1FA9                     __ptext20:	
  8266 ;; *************** function _memset *****************
  8267 ;; Defined at:
  8268 ;;		line 8 in file "E:\xCB\sources\common\memset.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;  p1              1    wreg     PTR void 
  8271 ;;		 -> table(64), 
  8272 ;;  c               2    3[BANK0 ] int 
  8273 ;;  n               2    5[BANK0 ] unsigned int 
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;  p1              1    9[BANK0 ] PTR void 
  8276 ;;		 -> table(64), 
  8277 ;;  p               1    8[BANK0 ] PTR unsigned char 
  8278 ;;		 -> table(64), 
  8279 ;; Return value:  Size  Location     Type
  8280 ;;                  1    wreg      PTR void 
  8281 ;; Registers used:
  8282 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8283 ;; Tracked objects:
  8284 ;;		On entry : 0/0
  8285 ;;		On exit  : 0/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8288 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;Total ram usage:        7 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    4
  8295 ;; This function calls:
  8296 ;;		Nothing
  8297 ;; This function is called by:
  8298 ;;		_init_heibaiqi
  8299 ;;		_init_environment
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           
  8304                           ;psect for function _memset
  8305  1FA9                     _memset:	
  8306                           
  8307                           ;incstack = 0
  8308                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8309                           ;memset@p1 stored from wreg
  8310  1FA9  0020               	movlb	0	; select bank0
  8311  1FAA  00A9               	movwf	memset@p1
  8312  1FAB  0829               	movf	memset@p1,w
  8313  1FAC  00A7               	movwf	??_memset
  8314  1FAD  0827               	movf	??_memset,w
  8315  1FAE  00A8               	movwf	memset@p
  8316  1FAF                     l3041:	
  8317  1FAF  3001               	movlw	1
  8318  1FB0  02A5               	subwf	memset@n,f
  8319  1FB1  3000               	movlw	0
  8320  1FB2  3BA6               	subwfb	memset@n+1,f
  8321  1FB3  0A25               	incf	memset@n,w
  8322  1FB4  1903               	btfsc	3,2
  8323  1FB5  0A26               	incf	memset@n+1,w
  8324  1FB6  1903               	btfsc	3,2
  8325  1FB7  0008               	return
  8326  1FB8  0823               	movf	memset@c,w
  8327  1FB9  00A7               	movwf	??_memset
  8328  1FBA  0828               	movf	memset@p,w
  8329  1FBB  0086               	movwf	6
  8330  1FBC  0187               	clrf	7
  8331  1FBD  0827               	movf	??_memset,w
  8332  1FBE  0081               	movwf	1
  8333  1FBF  3001               	movlw	1
  8334  1FC0  00A7               	movwf	??_memset
  8335  1FC1  0827               	movf	??_memset,w
  8336  1FC2  07A8               	addwf	memset@p,f
  8337  1FC3  2FAF               	goto	l3041
  8338  1FC4                     __end_of_memset:	
  8339                           ;	Return value of _memset is never used
  8340                           
  8341                           
  8342                           	psect	text21
  8343  151A                     __ptext21:	
  8344 ;; *************** function _Clear_Screen *****************
  8345 ;; Defined at:
  8346 ;;		line 131 in file "func.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;  value           2   18[BANK0 ] int 
  8349 ;; Auto vars:     Size  Location     Type
  8350 ;;  i               1   22[BANK0 ] unsigned char 
  8351 ;;  j               1   21[BANK0 ] unsigned char 
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  1    wreg      void 
  8354 ;; Registers used:
  8355 ;;		wreg, status,2, status,0, pclath, cstack
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8361 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;Total ram usage:        5 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    7
  8368 ;; This function calls:
  8369 ;;		_Write_Com
  8370 ;;		_Write_Data
  8371 ;;		_delay_100us
  8372 ;; This function is called by:
  8373 ;;		_init_heibaiqi
  8374 ;;		_init_environment
  8375 ;;		_start_video
  8376 ;;		_choose_level2
  8377 ;;		_init_wayout
  8378 ;;		_wayout
  8379 ;;		_choose_level
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           
  8384                           ;psect for function _Clear_Screen
  8385  151A                     _Clear_Screen:	
  8386                           
  8387                           ;func.c: 132: unsigned char i,j;
  8388                           ;func.c: 133: Write_Com(0x01);
  8389                           
  8390                           ;incstack = 0
  8391                           ; Regs used in _Clear_Screen: [wreg+status,2+status,0+pclath+cstack]
  8392  151A  3001               	movlw	1
  8393  151B  0020               	movlb	0	; select bank0
  8394  151C  00B0               	movwf	Write_Com@com
  8395  151D  3000               	movlw	0
  8396  151E  00B1               	movwf	Write_Com@com+1
  8397  151F  319F  2734  3195   	fcall	_Write_Com
  8398                           
  8399                           ;func.c: 134: delay_100us(100);
  8400  1522  3064               	movlw	100
  8401  1523  0020               	movlb	0	; select bank0
  8402  1524  00A9               	movwf	delay_100us@cnt
  8403  1525  3000               	movlw	0
  8404  1526  00AA               	movwf	delay_100us@cnt+1
  8405  1527  3190  20F5  3195   	fcall	_delay_100us
  8406                           
  8407                           ;func.c: 135: Write_Com(0x34);
  8408  152A  3034               	movlw	52
  8409  152B  0020               	movlb	0	; select bank0
  8410  152C  00B0               	movwf	Write_Com@com
  8411  152D  3000               	movlw	0
  8412  152E  00B1               	movwf	Write_Com@com+1
  8413  152F  319F  2734  3195   	fcall	_Write_Com
  8414                           
  8415                           ;func.c: 136: for(i=0;i<32;i++)
  8416  1532  0020               	movlb	0	; select bank0
  8417  1533  01B6               	clrf	Clear_Screen@i
  8418  1534  3020               	movlw	32
  8419  1535  0236               	subwf	Clear_Screen@i,w
  8420  1536  1803               	btfsc	3,0
  8421  1537  2D68               	goto	l3033
  8422  1538                     l3015:	
  8423                           
  8424                           ;func.c: 137: {
  8425                           ;func.c: 138: Write_Com(0x80+i);
  8426  1538  0836               	movf	Clear_Screen@i,w
  8427  1539  3E80               	addlw	128
  8428  153A  00B0               	movwf	Write_Com@com
  8429  153B  3000               	movlw	0
  8430  153C  1803               	skipnc
  8431  153D  3001               	movlw	1
  8432  153E  00B1               	movwf	Write_Com@com+1
  8433  153F  319F  2734  3195   	fcall	_Write_Com
  8434                           
  8435                           ;func.c: 139: Write_Com(0x80);
  8436  1542  3080               	movlw	128
  8437  1543  0020               	movlb	0	; select bank0
  8438  1544  00B0               	movwf	Write_Com@com
  8439  1545  3000               	movlw	0
  8440  1546  00B1               	movwf	Write_Com@com+1
  8441  1547  319F  2734  3195   	fcall	_Write_Com
  8442                           
  8443                           ;func.c: 140: for(j=0;j<32;j++)
  8444  154A  0020               	movlb	0	; select bank0
  8445  154B  01B5               	clrf	Clear_Screen@j
  8446  154C  3020               	movlw	32
  8447  154D  0235               	subwf	Clear_Screen@j,w
  8448  154E  1803               	btfsc	3,0
  8449  154F  2D60               	goto	l3029
  8450  1550                     l3023:	
  8451                           
  8452                           ;func.c: 141: {
  8453                           ;func.c: 142: Write_Data(value);
  8454  1550  0833               	movf	Clear_Screen@value+1,w
  8455  1551  00B1               	movwf	Write_Data@dat+1
  8456  1552  0832               	movf	Clear_Screen@value,w
  8457  1553  00B0               	movwf	Write_Data@dat
  8458  1554  319F  2743  3195   	fcall	_Write_Data
  8459  1557  3001               	movlw	1
  8460  1558  0020               	movlb	0	; select bank0
  8461  1559  00B4               	movwf	??_Clear_Screen
  8462  155A  0834               	movf	??_Clear_Screen,w
  8463  155B  07B5               	addwf	Clear_Screen@j,f
  8464  155C  3020               	movlw	32
  8465  155D  0235               	subwf	Clear_Screen@j,w
  8466  155E  1C03               	skipc
  8467  155F  2D50               	goto	l3023
  8468  1560                     l3029:	
  8469  1560  3001               	movlw	1
  8470  1561  00B4               	movwf	??_Clear_Screen
  8471  1562  0834               	movf	??_Clear_Screen,w
  8472  1563  07B6               	addwf	Clear_Screen@i,f
  8473  1564  3020               	movlw	32
  8474  1565  0236               	subwf	Clear_Screen@i,w
  8475  1566  1C03               	skipc
  8476  1567  2D38               	goto	l3015
  8477  1568                     l3033:	
  8478                           
  8479                           ;func.c: 143: }
  8480                           ;func.c: 144: }
  8481                           ;func.c: 145: Write_Com(0x36);
  8482  1568  3036               	movlw	54
  8483  1569  00B0               	movwf	Write_Com@com
  8484  156A  3000               	movlw	0
  8485  156B  00B1               	movwf	Write_Com@com+1
  8486  156C  319F  2734  3195   	fcall	_Write_Com
  8487                           
  8488                           ;func.c: 146: Write_Com(0x30);
  8489  156F  3030               	movlw	48
  8490  1570  0020               	movlb	0	; select bank0
  8491  1571  00B0               	movwf	Write_Com@com
  8492  1572  3000               	movlw	0
  8493  1573  00B1               	movwf	Write_Com@com+1
  8494  1574  319F  2734         	fcall	_Write_Com
  8495  1576  0008               	return
  8496  1577                     __end_of_Clear_Screen:	
  8497                           
  8498                           	psect	text22
  8499  0E72                     __ptext22:	
  8500 ;; *************** function _choose_point *****************
  8501 ;; Defined at:
  8502 ;;		line 142 in file "heibaiqi.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  row             1    wreg     unsigned char 
  8505 ;;  col             1   37[BANK0 ] unsigned char 
  8506 ;;  ply             1   38[BANK0 ] unsigned char 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  row             1   54[BANK0 ] unsigned char 
  8509 ;;  j               1   55[BANK0 ] unsigned char 
  8510 ;;  i               1   53[BANK0 ] unsigned char 
  8511 ;;  up              1   52[BANK0 ] unsigned char 
  8512 ;;  right           1   51[BANK0 ] unsigned char 
  8513 ;;  temp            1   50[BANK0 ] unsigned char 
  8514 ;;  result          1   49[BANK0 ] unsigned char 
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  1    wreg      unsigned char 
  8517 ;; Registers used:
  8518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8524 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;Total ram usage:       19 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:    8
  8531 ;; This function calls:
  8532 ;;		_Display_Chars
  8533 ;;		___bmul
  8534 ;;		___wmul
  8535 ;;		_check_point
  8536 ;;		_int2string
  8537 ;;		_set_point
  8538 ;; This function is called by:
  8539 ;;		_heibaiqi
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           
  8544                           ;psect for function _choose_point
  8545  0E72                     _choose_point:	
  8546                           
  8547                           ;incstack = 0
  8548                           ; Regs used in _choose_point: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8549                           ;choose_point@row stored from wreg
  8550  0E72  0020               	movlb	0	; select bank0
  8551  0E73  00D6               	movwf	choose_point@row
  8552                           
  8553                           ;heibaiqi.c: 144: if(table[row][col] & 0x03)
  8554  0E74  0856               	movf	choose_point@row,w
  8555  0E75  00C7               	movwf	??_choose_point
  8556  0E76  3003               	movlw	3
  8557  0E77                     u4105:	
  8558  0E77  35C7               	lslf	??_choose_point,f
  8559  0E78  0B89               	decfsz	9,f
  8560  0E79  2E77               	goto	u4105
  8561  0E7A  30A6               	movlw	(low (_table| 0))& (0+255)
  8562  0E7B  0747               	addwf	??_choose_point,w
  8563  0E7C  00C8               	movwf	??_choose_point+1
  8564  0E7D  0845               	movf	choose_point@col,w
  8565  0E7E  0748               	addwf	??_choose_point+1,w
  8566  0E7F  00C9               	movwf	??_choose_point+2
  8567  0E80  0849               	movf	??_choose_point+2,w
  8568  0E81  0086               	movwf	6
  8569  0E82  0187               	clrf	7
  8570  0E83  0801               	movf	1,w
  8571  0E84  3903               	andlw	3
  8572  0E85  1903               	btfsc	3,2
  8573  0E86  2E89               	goto	l3343
  8574                           
  8575                           ;heibaiqi.c: 145: return 0;
  8576  0E87  3000               	movlw	0
  8577  0E88  0008               	return
  8578  0E89                     l3343:	
  8579                           
  8580                           ;heibaiqi.c: 146: unsigned char result = check_point(row, col, ply);
  8581  0E89  0845               	movf	choose_point@col,w
  8582  0E8A  00C7               	movwf	??_choose_point
  8583  0E8B  0847               	movf	??_choose_point,w
  8584  0E8C  00A9               	movwf	check_point@col
  8585  0E8D  0846               	movf	choose_point@ply,w
  8586  0E8E  00C8               	movwf	??_choose_point+1
  8587  0E8F  0848               	movf	??_choose_point+1,w
  8588  0E90  00AA               	movwf	check_point@ply
  8589  0E91  0856               	movf	choose_point@row,w
  8590  0E92  318B  23EB  318E   	fcall	_check_point
  8591  0E95  0020               	movlb	0	; select bank0
  8592  0E96  00C9               	movwf	??_choose_point+2
  8593  0E97  0849               	movf	??_choose_point+2,w
  8594  0E98  00D1               	movwf	choose_point@result
  8595                           
  8596                           ;heibaiqi.c: 147: if(!result)
  8597  0E99  0851               	movf	choose_point@result,w
  8598  0E9A  1D03               	btfss	3,2
  8599  0E9B  2E9E               	goto	l3351
  8600                           
  8601                           ;heibaiqi.c: 148: return 0;
  8602  0E9C  3000               	movlw	0
  8603  0E9D  0008               	return
  8604  0E9E                     l3351:	
  8605                           
  8606                           ;heibaiqi.c: 149: char right, up;
  8607                           ;heibaiqi.c: 150: unsigned char temp = 0b10000000;
  8608  0E9E  3080               	movlw	128
  8609  0E9F  00C7               	movwf	??_choose_point
  8610  0EA0  0847               	movf	??_choose_point,w
  8611  0EA1  00D2               	movwf	choose_point@temp
  8612                           
  8613                           ;heibaiqi.c: 151: table[row][col] = ply | 0x08;
  8614  0EA2  0846               	movf	choose_point@ply,w
  8615  0EA3  3808               	iorlw	8
  8616  0EA4  00C7               	movwf	??_choose_point
  8617  0EA5  0856               	movf	choose_point@row,w
  8618  0EA6  00C8               	movwf	??_choose_point+1
  8619  0EA7  3003               	movlw	3
  8620  0EA8                     u4135:	
  8621  0EA8  35C8               	lslf	??_choose_point+1,f
  8622  0EA9  0B89               	decfsz	9,f
  8623  0EAA  2EA8               	goto	u4135
  8624  0EAB  30A6               	movlw	(low (_table| 0))& (0+255)
  8625  0EAC  0748               	addwf	??_choose_point+1,w
  8626  0EAD  00C9               	movwf	??_choose_point+2
  8627  0EAE  0845               	movf	choose_point@col,w
  8628  0EAF  0749               	addwf	??_choose_point+2,w
  8629  0EB0  00CA               	movwf	??_choose_point+3
  8630  0EB1  084A               	movf	??_choose_point+3,w
  8631  0EB2  0086               	movwf	6
  8632  0EB3  0187               	clrf	7
  8633  0EB4  0847               	movf	??_choose_point,w
  8634  0EB5  0081               	movwf	1
  8635                           
  8636                           ;heibaiqi.c: 158: if(ply==1)
  8637  0EB6  0346               	decf	choose_point@ply,w
  8638  0EB7  1D03               	btfss	3,2
  8639  0EB8  2EBE               	goto	l3359
  8640                           
  8641                           ;heibaiqi.c: 159: black_num++;
  8642  0EB9  3001               	movlw	1
  8643  0EBA  00C7               	movwf	??_choose_point
  8644  0EBB  0847               	movf	??_choose_point,w
  8645  0EBC  07E8               	addwf	_black_num,f
  8646  0EBD  2EC6               	goto	l114
  8647  0EBE                     l3359:	
  8648                           
  8649                           ;heibaiqi.c: 160: else if(ply==2)
  8650  0EBE  3002               	movlw	2
  8651  0EBF  0646               	xorwf	choose_point@ply,w
  8652  0EC0  1D03               	btfss	3,2
  8653  0EC1  2EC6               	goto	l114
  8654                           
  8655                           ;heibaiqi.c: 161: white_num++;
  8656  0EC2  3001               	movlw	1
  8657  0EC3  00C7               	movwf	??_choose_point
  8658  0EC4  0847               	movf	??_choose_point,w
  8659  0EC5  07EB               	addwf	_white_num,f
  8660  0EC6                     l114:	
  8661                           
  8662                           ;heibaiqi.c: 162: empty_num--;
  8663  0EC6  3001               	movlw	1
  8664  0EC7  0021               	movlb	1	; select bank1
  8665  0EC8  02A0               	subwf	_empty_num^(0+128),f
  8666                           
  8667                           ;heibaiqi.c: 163: for(unsigned char i=0; i<8; i++){
  8668  0EC9  0020               	movlb	0	; select bank0
  8669  0ECA  01D5               	clrf	choose_point@i
  8670  0ECB  3008               	movlw	8
  8671  0ECC  0255               	subwf	choose_point@i,w
  8672  0ECD  1803               	btfsc	3,0
  8673  0ECE  2FB6               	goto	l3393
  8674  0ECF                     l116:	
  8675                           
  8676                           ;heibaiqi.c: 164: char j = 1;
  8677  0ECF  01D7               	clrf	choose_point@j
  8678  0ED0  0AD7               	incf	choose_point@j,f
  8679                           
  8680                           ;heibaiqi.c: 165: if(result & temp){
  8681  0ED1  0851               	movf	choose_point@result,w
  8682  0ED2  0552               	andwf	choose_point@temp,w
  8683  0ED3  1903               	btfsc	3,2
  8684  0ED4  2FAA               	goto	l3389
  8685                           
  8686                           ;heibaiqi.c: 166: right = towards[i][0];
  8687  0ED5  3555               	lslf	choose_point@i,w
  8688  0ED6  3EA0               	addlw	(low (_towards| (0+256)))& (0+255)
  8689  0ED7  0086               	movwf	6
  8690  0ED8  3001               	movlw	1	; select bank3/4
  8691  0ED9  0087               	movwf	7
  8692  0EDA  0801               	movf	1,w
  8693  0EDB  00C7               	movwf	??_choose_point
  8694  0EDC  0847               	movf	??_choose_point,w
  8695  0EDD  00D3               	movwf	choose_point@right
  8696                           
  8697                           ;heibaiqi.c: 167: up = towards[i][1];
  8698  0EDE  1403               	setc
  8699  0EDF  0D55               	rlf	choose_point@i,w
  8700  0EE0  3EA0               	addlw	(low (_towards| (0+256)))& (0+255)
  8701  0EE1  0086               	movwf	6
  8702  0EE2  3001               	movlw	1	; select bank3/4
  8703  0EE3  0087               	movwf	7
  8704  0EE4  0801               	movf	1,w
  8705  0EE5  00C7               	movwf	??_choose_point
  8706  0EE6  0847               	movf	??_choose_point,w
  8707  0EE7  00D4               	movwf	choose_point@up
  8708                           
  8709                           ;heibaiqi.c: 168: while(0 <= (char)(col+j*up) && (char)(col+j*up) < 8 && 0 <= (char)(row
      +                          +j*right) && (char)(row+j*right) < 8){
  8710  0EE8  2F8C               	goto	l3385
  8711  0EE9                     l3373:	
  8712                           
  8713                           ;heibaiqi.c: 169: if(table[row+j*right][col+j*up] != ply){
  8714  0EE9  0854               	movf	choose_point@up,w
  8715  0EEA  00C7               	movwf	??_choose_point
  8716  0EEB  0847               	movf	??_choose_point,w
  8717  0EEC  00A3               	movwf	___bmul@multiplicand
  8718  0EED  0857               	movf	choose_point@j,w
  8719  0EEE  319F  2762  318E   	fcall	___bmul
  8720  0EF1  0020               	movlb	0	; select bank0
  8721  0EF2  0745               	addwf	choose_point@col,w
  8722  0EF3  00C8               	movwf	??_choose_point+1
  8723  0EF4  30A6               	movlw	(low (_table| 0))& (0+255)
  8724  0EF5  0748               	addwf	??_choose_point+1,w
  8725  0EF6  00C9               	movwf	??_choose_point+2
  8726  0EF7  0857               	movf	choose_point@j,w
  8727  0EF8  00CA               	movwf	??_choose_point+3
  8728  0EF9  01CB               	clrf	??_choose_point+4
  8729  0EFA  084A               	movf	??_choose_point+3,w
  8730  0EFB  00A3               	movwf	___wmul@multiplier
  8731  0EFC  084B               	movf	??_choose_point+4,w
  8732  0EFD  00A4               	movwf	___wmul@multiplier+1
  8733  0EFE  0853               	movf	choose_point@right,w
  8734  0EFF  00CC               	movwf	??_choose_point+5
  8735  0F00  01CD               	clrf	??_choose_point+6
  8736  0F01  084C               	movf	??_choose_point+5,w
  8737  0F02  00A5               	movwf	___wmul@multiplicand
  8738  0F03  084D               	movf	??_choose_point+6,w
  8739  0F04  00A6               	movwf	___wmul@multiplicand+1
  8740  0F05  319F  27C4  318E   	fcall	___wmul
  8741  0F08  0020               	movlb	0	; select bank0
  8742  0F09  0823               	movf	?___wmul,w
  8743  0F0A  0756               	addwf	choose_point@row,w
  8744  0F0B  00CE               	movwf	??_choose_point+7
  8745  0F0C  3002               	movlw	2
  8746  0F0D                     u4185:	
  8747  0F0D  35CE               	lslf	??_choose_point+7,f
  8748  0F0E  3EFF               	addlw	-1
  8749  0F0F  1D03               	skipz
  8750  0F10  2F0D               	goto	u4185
  8751  0F11  354E               	lslf	??_choose_point+7,w
  8752  0F12  0749               	addwf	??_choose_point+2,w
  8753  0F13  00CF               	movwf	??_choose_point+8
  8754  0F14  084F               	movf	??_choose_point+8,w
  8755  0F15  0086               	movwf	6
  8756  0F16  0187               	clrf	7
  8757  0F17  0801               	movf	1,w
  8758  0F18  0646               	xorwf	choose_point@ply,w
  8759  0F19  1903               	skipnz
  8760  0F1A  2FAA               	goto	l3389
  8761                           
  8762                           ;heibaiqi.c: 170: table[row+j*right][col+j*up] = ply;
  8763  0F1B  0846               	movf	choose_point@ply,w
  8764  0F1C  00C7               	movwf	??_choose_point
  8765  0F1D  0854               	movf	choose_point@up,w
  8766  0F1E  00C8               	movwf	??_choose_point+1
  8767  0F1F  0848               	movf	??_choose_point+1,w
  8768  0F20  00A3               	movwf	___bmul@multiplicand
  8769  0F21  0857               	movf	choose_point@j,w
  8770  0F22  319F  2762  318E   	fcall	___bmul
  8771  0F25  0020               	movlb	0	; select bank0
  8772  0F26  0745               	addwf	choose_point@col,w
  8773  0F27  00C9               	movwf	??_choose_point+2
  8774  0F28  30A6               	movlw	(low (_table| 0))& (0+255)
  8775  0F29  0749               	addwf	??_choose_point+2,w
  8776  0F2A  00CA               	movwf	??_choose_point+3
  8777  0F2B  0857               	movf	choose_point@j,w
  8778  0F2C  00CB               	movwf	??_choose_point+4
  8779  0F2D  01CC               	clrf	??_choose_point+5
  8780  0F2E  084B               	movf	??_choose_point+4,w
  8781  0F2F  00A3               	movwf	___wmul@multiplier
  8782  0F30  084C               	movf	??_choose_point+5,w
  8783  0F31  00A4               	movwf	___wmul@multiplier+1
  8784  0F32  0853               	movf	choose_point@right,w
  8785  0F33  00CD               	movwf	??_choose_point+6
  8786  0F34  01CE               	clrf	??_choose_point+7
  8787  0F35  084D               	movf	??_choose_point+6,w
  8788  0F36  00A5               	movwf	___wmul@multiplicand
  8789  0F37  084E               	movf	??_choose_point+7,w
  8790  0F38  00A6               	movwf	___wmul@multiplicand+1
  8791  0F39  319F  27C4  318E   	fcall	___wmul
  8792  0F3C  0020               	movlb	0	; select bank0
  8793  0F3D  0823               	movf	?___wmul,w
  8794  0F3E  0756               	addwf	choose_point@row,w
  8795  0F3F  00CF               	movwf	??_choose_point+8
  8796  0F40  3002               	movlw	2
  8797  0F41                     u4205:	
  8798  0F41  35CF               	lslf	??_choose_point+8,f
  8799  0F42  3EFF               	addlw	-1
  8800  0F43  1D03               	skipz
  8801  0F44  2F41               	goto	u4205
  8802  0F45  354F               	lslf	??_choose_point+8,w
  8803  0F46  074A               	addwf	??_choose_point+3,w
  8804  0F47  00D0               	movwf	??_choose_point+9
  8805  0F48  0850               	movf	??_choose_point+9,w
  8806  0F49  0086               	movwf	6
  8807  0F4A  0187               	clrf	7
  8808  0F4B  0847               	movf	??_choose_point,w
  8809  0F4C  0081               	movwf	1
  8810                           
  8811                           ;heibaiqi.c: 177: set_point(row+j*right,col+j*up,screen[ply]);
  8812  0F4D  0854               	movf	choose_point@up,w
  8813  0F4E  00C7               	movwf	??_choose_point
  8814  0F4F  0847               	movf	??_choose_point,w
  8815  0F50  00A3               	movwf	___bmul@multiplicand
  8816  0F51  0857               	movf	choose_point@j,w
  8817  0F52  319F  2762  318E   	fcall	___bmul
  8818  0F55  0020               	movlb	0	; select bank0
  8819  0F56  0745               	addwf	choose_point@col,w
  8820  0F57  00C8               	movwf	??_choose_point+1
  8821  0F58  0848               	movf	??_choose_point+1,w
  8822  0F59  00B9               	movwf	set_point@point_y
  8823  0F5A  0846               	movf	choose_point@ply,w
  8824  0F5B  00C9               	movwf	??_choose_point+2
  8825  0F5C  3002               	movlw	2
  8826  0F5D                     u4215:	
  8827  0F5D  35C9               	lslf	??_choose_point+2,f
  8828  0F5E  3EFF               	addlw	-1
  8829  0F5F  1D03               	skipz
  8830  0F60  2F5D               	goto	u4215
  8831  0F61  3549               	lslf	??_choose_point+2,w
  8832  0F62  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  8833  0F63  00CA               	movwf	??_choose_point+3
  8834  0F64  084A               	movf	??_choose_point+3,w
  8835  0F65  00BA               	movwf	set_point@value
  8836  0F66  0853               	movf	choose_point@right,w
  8837  0F67  00CB               	movwf	??_choose_point+4
  8838  0F68  084B               	movf	??_choose_point+4,w
  8839  0F69  00A3               	movwf	___bmul@multiplicand
  8840  0F6A  0857               	movf	choose_point@j,w
  8841  0F6B  319F  2762  318E   	fcall	___bmul
  8842  0F6E  0020               	movlb	0	; select bank0
  8843  0F6F  0756               	addwf	choose_point@row,w
  8844  0F70  3197  2760  318E   	fcall	_set_point
  8845                           
  8846                           ;heibaiqi.c: 178: if(ply==1)
  8847  0F73  0020               	movlb	0	; select bank0
  8848  0F74  0346               	decf	choose_point@ply,w
  8849  0F75  1D03               	btfss	3,2
  8850  0F76  2F7E               	goto	l3381
  8851                           
  8852                           ;heibaiqi.c: 179: {
  8853                           ;heibaiqi.c: 180: black_num++;
  8854  0F77  3001               	movlw	1
  8855  0F78  00C7               	movwf	??_choose_point
  8856  0F79  0847               	movf	??_choose_point,w
  8857  0F7A  07E8               	addwf	_black_num,f
  8858                           
  8859                           ;heibaiqi.c: 181: white_num--;
  8860  0F7B  3001               	movlw	1
  8861  0F7C  02EB               	subwf	_white_num,f
  8862                           
  8863                           ;heibaiqi.c: 182: }
  8864  0F7D  2F88               	goto	l123
  8865  0F7E                     l3381:	
  8866                           
  8867                           ;heibaiqi.c: 183: else if(ply==2)
  8868  0F7E  3002               	movlw	2
  8869  0F7F  0646               	xorwf	choose_point@ply,w
  8870  0F80  1D03               	btfss	3,2
  8871  0F81  2F88               	goto	l123
  8872                           
  8873                           ;heibaiqi.c: 184: {
  8874                           ;heibaiqi.c: 185: black_num--;
  8875  0F82  3001               	movlw	1
  8876  0F83  02E8               	subwf	_black_num,f
  8877                           
  8878                           ;heibaiqi.c: 186: white_num++;
  8879  0F84  3001               	movlw	1
  8880  0F85  00C7               	movwf	??_choose_point
  8881  0F86  0847               	movf	??_choose_point,w
  8882  0F87  07EB               	addwf	_white_num,f
  8883  0F88                     l123:	
  8884                           
  8885                           ;heibaiqi.c: 187: }
  8886                           ;heibaiqi.c: 188: j++;
  8887  0F88  3001               	movlw	1
  8888  0F89  00C7               	movwf	??_choose_point
  8889  0F8A  0847               	movf	??_choose_point,w
  8890  0F8B  07D7               	addwf	choose_point@j,f
  8891  0F8C                     l3385:	
  8892                           ;heibaiqi.c: 190: else
  8893                           ;heibaiqi.c: 191: break;
  8894                           
  8895                           ;heibaiqi.c: 189: }
  8896                           
  8897  0F8C  0854               	movf	choose_point@up,w
  8898  0F8D  00C7               	movwf	??_choose_point
  8899  0F8E  0847               	movf	??_choose_point,w
  8900  0F8F  00A3               	movwf	___bmul@multiplicand
  8901  0F90  0857               	movf	choose_point@j,w
  8902  0F91  319F  2762  318E   	fcall	___bmul
  8903  0F94  0020               	movlb	0	; select bank0
  8904  0F95  0745               	addwf	choose_point@col,w
  8905  0F96  00C8               	movwf	??_choose_point+1
  8906  0F97  3008               	movlw	8
  8907  0F98  0248               	subwf	??_choose_point+1,w
  8908  0F99  1803               	skipnc
  8909  0F9A  2FAA               	goto	l3389
  8910  0F9B  0853               	movf	choose_point@right,w
  8911  0F9C  00C7               	movwf	??_choose_point
  8912  0F9D  0847               	movf	??_choose_point,w
  8913  0F9E  00A3               	movwf	___bmul@multiplicand
  8914  0F9F  0857               	movf	choose_point@j,w
  8915  0FA0  319F  2762  318E   	fcall	___bmul
  8916  0FA3  0020               	movlb	0	; select bank0
  8917  0FA4  0756               	addwf	choose_point@row,w
  8918  0FA5  00C8               	movwf	??_choose_point+1
  8919  0FA6  3008               	movlw	8
  8920  0FA7  0248               	subwf	??_choose_point+1,w
  8921  0FA8  1C03               	skipc
  8922  0FA9  2EE9               	goto	l3373
  8923  0FAA                     l3389:	
  8924                           
  8925                           ;heibaiqi.c: 192: }
  8926                           ;heibaiqi.c: 193: }
  8927                           ;heibaiqi.c: 194: temp = temp >> 1;
  8928  0FAA  3652               	lsrf	choose_point@temp,w
  8929  0FAB  00C7               	movwf	??_choose_point
  8930  0FAC  0847               	movf	??_choose_point,w
  8931  0FAD  00D2               	movwf	choose_point@temp
  8932  0FAE  3001               	movlw	1
  8933  0FAF  00C7               	movwf	??_choose_point
  8934  0FB0  0847               	movf	??_choose_point,w
  8935  0FB1  07D5               	addwf	choose_point@i,f
  8936  0FB2  3008               	movlw	8
  8937  0FB3  0255               	subwf	choose_point@i,w
  8938  0FB4  1C03               	skipc
  8939  0FB5  2ECF               	goto	l116
  8940  0FB6                     l3393:	
  8941                           
  8942                           ;heibaiqi.c: 195: }
  8943                           ;heibaiqi.c: 196: set_point(row,col,screen[ply+3]);
  8944  0FB6  0845               	movf	choose_point@col,w
  8945  0FB7  00C7               	movwf	??_choose_point
  8946  0FB8  0847               	movf	??_choose_point,w
  8947  0FB9  00B9               	movwf	set_point@point_y
  8948  0FBA  0846               	movf	choose_point@ply,w
  8949  0FBB  00C8               	movwf	??_choose_point+1
  8950  0FBC  3002               	movlw	2
  8951  0FBD                     u4275:	
  8952  0FBD  35C8               	lslf	??_choose_point+1,f
  8953  0FBE  3EFF               	addlw	-1
  8954  0FBF  1D03               	skipz
  8955  0FC0  2FBD               	goto	u4275
  8956  0FC1  3548               	lslf	??_choose_point+1,w
  8957  0FC2  3E18               	addlw	24
  8958  0FC3  3EB0               	addlw	(low (_screen| (0+256)))& (0+255)
  8959  0FC4  00C9               	movwf	??_choose_point+2
  8960  0FC5  0849               	movf	??_choose_point+2,w
  8961  0FC6  00BA               	movwf	set_point@value
  8962  0FC7  0856               	movf	choose_point@row,w
  8963  0FC8  3197  2760  318E   	fcall	_set_point
  8964                           
  8965                           ;heibaiqi.c: 197: int2string(display_black,5,black_num);
  8966  0FCB  3005               	movlw	5
  8967  0FCC  0020               	movlb	0	; select bank0
  8968  0FCD  00C7               	movwf	??_choose_point
  8969  0FCE  0847               	movf	??_choose_point,w
  8970  0FCF  00AC               	movwf	int2string@begin
  8971  0FD0  0868               	movf	_black_num,w
  8972  0FD1  00C8               	movwf	??_choose_point+1
  8973  0FD2  0848               	movf	??_choose_point+1,w
  8974  0FD3  00AD               	movwf	int2string@num
  8975  0FD4  3020               	movlw	(low (_display_black| (0+256)))& (0+255)
  8976  0FD5  3193  23D1  318E   	fcall	_int2string
  8977                           
  8978                           ;heibaiqi.c: 198: Display_Chars(2,display_black,5);
  8979  0FD8  3020               	movlw	low _display_black
  8980  0FD9  0020               	movlb	0	; select bank0
  8981  0FDA  00B2               	movwf	Display_Chars@string
  8982  0FDB  3001               	movlw	high _display_black
  8983  0FDC  00B3               	movwf	Display_Chars@string+1
  8984  0FDD  3005               	movlw	5
  8985  0FDE  00C7               	movwf	??_choose_point
  8986  0FDF  0847               	movf	??_choose_point,w
  8987  0FE0  00B4               	movwf	Display_Chars@y
  8988  0FE1  3002               	movlw	2
  8989  0FE2  3194  246C  318E   	fcall	_Display_Chars
  8990                           
  8991                           ;heibaiqi.c: 199: int2string(display_white,5,white_num);
  8992  0FE5  3005               	movlw	5
  8993  0FE6  0020               	movlb	0	; select bank0
  8994  0FE7  00C7               	movwf	??_choose_point
  8995  0FE8  0847               	movf	??_choose_point,w
  8996  0FE9  00AC               	movwf	int2string@begin
  8997  0FEA  086B               	movf	_white_num,w
  8998  0FEB  00C8               	movwf	??_choose_point+1
  8999  0FEC  0848               	movf	??_choose_point+1,w
  9000  0FED  00AD               	movwf	int2string@num
  9001  0FEE  3034               	movlw	(low (_display_white| (0+256)))& (0+255)
  9002  0FEF  3193  23D1  318E   	fcall	_int2string
  9003                           
  9004                           ;heibaiqi.c: 200: Display_Chars(3,display_white,5);
  9005  0FF2  3034               	movlw	low _display_white
  9006  0FF3  0020               	movlb	0	; select bank0
  9007  0FF4  00B2               	movwf	Display_Chars@string
  9008  0FF5  3001               	movlw	high _display_white
  9009  0FF6  00B3               	movwf	Display_Chars@string+1
  9010  0FF7  3005               	movlw	5
  9011  0FF8  00C7               	movwf	??_choose_point
  9012  0FF9  0847               	movf	??_choose_point,w
  9013  0FFA  00B4               	movwf	Display_Chars@y
  9014  0FFB  3003               	movlw	3
  9015  0FFC  3194  246C         	fcall	_Display_Chars
  9016                           
  9017                           ;heibaiqi.c: 201: return 1;
  9018  0FFE  3001               	movlw	1
  9019  0FFF  0008               	return
  9020  1000                     __end_of_choose_point:	
  9021                           
  9022                           	psect	text23
  9023  1760                     __ptext23:	
  9024 ;; *************** function _set_point *****************
  9025 ;; Defined at:
  9026 ;;		line 219 in file "func.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;  point_x         1    wreg     unsigned char 
  9029 ;;  point_y         1   25[BANK0 ] unsigned char 
  9030 ;;  value           1   26[BANK0 ] PTR unsigned char 
  9031 ;;		 -> choose_second(8), choose_empty(8), empty(8), screen(48), 
  9032 ;;		 -> second_chess(8), first_chess(8), choose_first(8), 
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;  point_x         1   34[BANK0 ] unsigned char 
  9035 ;;  i               2   35[BANK0 ] int 
  9036 ;;  is_Offset_Po    2   30[BANK0 ] int 
  9037 ;;  j               2    0        int 
  9038 ;;  init_Y_Addr     1   33[BANK0 ] unsigned char 
  9039 ;;  init_X_Addr     1   32[BANK0 ] unsigned char 
  9040 ;; Return value:  Size  Location     Type
  9041 ;;                  1    wreg      void 
  9042 ;; Registers used:
  9043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9044 ;; Tracked objects:
  9045 ;;		On entry : 0/0
  9046 ;;		On exit  : 0/0
  9047 ;;		Unchanged: 0/0
  9048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9049 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9053 ;;Total ram usage:       12 bytes
  9054 ;; Hardware stack levels used:    1
  9055 ;; Hardware stack levels required when called:    7
  9056 ;; This function calls:
  9057 ;;		_Write_Com
  9058 ;;		_Write_Data
  9059 ;;		_check_Pos
  9060 ;;		_get_X_Addr
  9061 ;;		_get_Y_Addr
  9062 ;;		_readFromTable
  9063 ;; This function is called by:
  9064 ;;		_init_heibaiqi
  9065 ;;		_choose_point
  9066 ;;		_heibaiqi
  9067 ;;		_change_near
  9068 ;;		_choose
  9069 ;;		_init_wayout
  9070 ;;		_wayout
  9071 ;;		_write_table_from_setPoint
  9072 ;;		_choose_level
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           
  9077                           ;psect for function _set_point
  9078  1760                     _set_point:	
  9079                           
  9080                           ;incstack = 0
  9081                           ; Regs used in _set_point: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9082                           ;set_point@point_x stored from wreg
  9083  1760  0020               	movlb	0	; select bank0
  9084  1761  00C2               	movwf	set_point@point_x
  9085                           
  9086                           ;func.c: 220: int i,j;
  9087                           ;func.c: 221: int is_Offset_Pos;
  9088                           ;func.c: 222: unsigned char init_X_Addr, init_Y_Addr;
  9089                           ;func.c: 223: init_X_Addr = get_X_Addr(point_x, point_y);
  9090  1762  0839               	movf	set_point@point_y,w
  9091  1763  00BB               	movwf	??_set_point
  9092  1764  083B               	movf	??_set_point,w
  9093  1765  00A3               	movwf	get_X_Addr@y
  9094  1766  0842               	movf	set_point@point_x,w
  9095  1767  3191  21B8  3197   	fcall	_get_X_Addr
  9096  176A  0020               	movlb	0	; select bank0
  9097  176B  00BC               	movwf	??_set_point+1
  9098  176C  083C               	movf	??_set_point+1,w
  9099  176D  00C0               	movwf	set_point@init_X_Addr
  9100                           
  9101                           ;func.c: 224: init_Y_Addr = get_Y_Addr(point_x, point_y);
  9102  176E  0839               	movf	set_point@point_y,w
  9103  176F  00BB               	movwf	??_set_point
  9104  1770  083B               	movf	??_set_point,w
  9105  1771  00AC               	movwf	get_Y_Addr@y
  9106  1772  0842               	movf	set_point@point_x,w
  9107  1773  3193  2300  3197   	fcall	_get_Y_Addr
  9108  1776  0020               	movlb	0	; select bank0
  9109  1777  00BC               	movwf	??_set_point+1
  9110  1778  083C               	movf	??_set_point+1,w
  9111  1779  00C1               	movwf	set_point@init_Y_Addr
  9112                           
  9113                           ;func.c: 225: is_Offset_Pos = check_Pos(point_x, point_y);
  9114  177A  0839               	movf	set_point@point_y,w
  9115  177B  00BB               	movwf	??_set_point
  9116  177C  083B               	movf	??_set_point,w
  9117  177D  00A3               	movwf	check_Pos@y
  9118  177E  0842               	movf	set_point@point_x,w
  9119  177F  319F  2726  3197   	fcall	_check_Pos
  9120  1782  0020               	movlb	0	; select bank0
  9121  1783  0824               	movf	?_check_Pos+1,w
  9122  1784  00BF               	movwf	set_point@is_Offset_Pos+1
  9123  1785  0823               	movf	?_check_Pos,w
  9124  1786  00BE               	movwf	set_point@is_Offset_Pos
  9125                           
  9126                           ;func.c: 227: Write_Com(0x34);
  9127  1787  3034               	movlw	52
  9128  1788  00B0               	movwf	Write_Com@com
  9129  1789  3000               	movlw	0
  9130  178A  00B1               	movwf	Write_Com@com+1
  9131  178B  319F  2734  3197   	fcall	_Write_Com
  9132                           
  9133                           ;func.c: 229: for(i=0;i<8;i++){
  9134  178E  0020               	movlb	0	; select bank0
  9135  178F  01C3               	clrf	set_point@i
  9136  1790  01C4               	clrf	set_point@i+1
  9137  1791  0844               	movf	set_point@i+1,w
  9138  1792  3A80               	xorlw	128
  9139  1793  00BB               	movwf	??_set_point
  9140  1794  3080               	movlw	128
  9141  1795  023B               	subwf	??_set_point,w
  9142  1796  3008               	movlw	8
  9143  1797  1903               	btfsc	3,2
  9144  1798  0243               	subwf	set_point@i,w
  9145  1799  1803               	btfsc	3,0
  9146  179A  2FF0               	goto	l3069
  9147  179B                     l3055:	
  9148                           
  9149                           ;func.c: 230: Write_Com(init_X_Addr+i);
  9150  179B  0020               	movlb	0	; select bank0
  9151  179C  0840               	movf	set_point@init_X_Addr,w
  9152  179D  0743               	addwf	set_point@i,w
  9153  179E  00B0               	movwf	Write_Com@com
  9154  179F  0844               	movf	set_point@i+1,w
  9155  17A0  1803               	skipnc
  9156  17A1  0A44               	incf	set_point@i+1,w
  9157  17A2  00B1               	movwf	Write_Com@com+1
  9158  17A3  319F  2734  3197   	fcall	_Write_Com
  9159                           
  9160                           ;func.c: 231: Write_Com(init_Y_Addr);
  9161  17A6  0020               	movlb	0	; select bank0
  9162  17A7  0841               	movf	set_point@init_Y_Addr,w
  9163  17A8  00BB               	movwf	??_set_point
  9164  17A9  01BC               	clrf	??_set_point+1
  9165  17AA  083B               	movf	??_set_point,w
  9166  17AB  00B0               	movwf	Write_Com@com
  9167  17AC  083C               	movf	??_set_point+1,w
  9168  17AD  00B1               	movwf	Write_Com@com+1
  9169  17AE  319F  2734  3197   	fcall	_Write_Com
  9170                           
  9171                           ;func.c: 233: if(is_Offset_Pos == 0) Write_Data(*value);
  9172  17B1  0020               	movlb	0	; select bank0
  9173  17B2  083E               	movf	set_point@is_Offset_Pos,w
  9174  17B3  043F               	iorwf	set_point@is_Offset_Pos+1,w
  9175  17B4  1903               	btfsc	3,2
  9176  17B5  2FCF               	goto	L6
  9177                           
  9178                           ;func.c: 234: else {
  9179                           ;func.c: 235: Write_Data(readFromTable(point_x,point_y-1,i));
  9180  17B6  0020               	movlb	0	; select bank0
  9181  17B7  0839               	movf	set_point@point_y,w
  9182  17B8  3EFF               	addlw	255
  9183  17B9  00BB               	movwf	??_set_point
  9184  17BA  083B               	movf	??_set_point,w
  9185  17BB  00A3               	movwf	readFromTable@y
  9186  17BC  0844               	movf	set_point@i+1,w
  9187  17BD  00A5               	movwf	readFromTable@offset+1
  9188  17BE  0843               	movf	set_point@i,w
  9189  17BF  00A4               	movwf	readFromTable@offset
  9190  17C0  0842               	movf	set_point@point_x,w
  9191  17C1  3194  24C2  3197   	fcall	_readFromTable
  9192  17C4  0020               	movlb	0	; select bank0
  9193  17C5  00BC               	movwf	??_set_point+1
  9194  17C6  01BD               	clrf	??_set_point+2
  9195  17C7  083C               	movf	??_set_point+1,w
  9196  17C8  00B0               	movwf	Write_Data@dat
  9197  17C9  083D               	movf	??_set_point+2,w
  9198  17CA  00B1               	movwf	Write_Data@dat+1
  9199  17CB  319F  2743  3197   	fcall	_Write_Data
  9200                           
  9201                           ;func.c: 236: Write_Data(*value);
  9202  17CE  0020               	movlb	0	; select bank0
  9203  17CF                     L6:	
  9204  17CF  083A               	movf	set_point@value,w
  9205  17D0  0086               	movwf	6
  9206  17D1  3001               	movlw	1	; select bank2/3
  9207  17D2  0087               	movwf	7
  9208  17D3  0801               	movf	1,w
  9209  17D4  00BB               	movwf	??_set_point
  9210  17D5  01BC               	clrf	??_set_point+1
  9211  17D6  083B               	movf	??_set_point,w
  9212  17D7  00B0               	movwf	Write_Data@dat
  9213  17D8  083C               	movf	??_set_point+1,w
  9214  17D9  00B1               	movwf	Write_Data@dat+1
  9215  17DA  319F  2743  3197   	fcall	_Write_Data
  9216                           
  9217                           ;func.c: 237: }
  9218                           ;func.c: 238: value++;
  9219  17DD  3001               	movlw	1
  9220  17DE  0020               	movlb	0	; select bank0
  9221  17DF  00BB               	movwf	??_set_point
  9222  17E0  083B               	movf	??_set_point,w
  9223  17E1  07BA               	addwf	set_point@value,f
  9224  17E2  3001               	movlw	1
  9225  17E3  07C3               	addwf	set_point@i,f
  9226  17E4  3000               	movlw	0
  9227  17E5  3DC4               	addwfc	set_point@i+1,f
  9228  17E6  0844               	movf	set_point@i+1,w
  9229  17E7  3A80               	xorlw	128
  9230  17E8  00BB               	movwf	??_set_point
  9231  17E9  3080               	movlw	128
  9232  17EA  023B               	subwf	??_set_point,w
  9233  17EB  3008               	movlw	8
  9234  17EC  1903               	btfsc	3,2
  9235  17ED  0243               	subwf	set_point@i,w
  9236  17EE  1C03               	skipc
  9237  17EF  2F9B               	goto	l3055
  9238  17F0                     l3069:	
  9239                           
  9240                           ;func.c: 239: }
  9241                           ;func.c: 240: Write_Com(0x36);
  9242  17F0  3036               	movlw	54
  9243  17F1  0020               	movlb	0	; select bank0
  9244  17F2  00B0               	movwf	Write_Com@com
  9245  17F3  3000               	movlw	0
  9246  17F4  00B1               	movwf	Write_Com@com+1
  9247  17F5  319F  2734  3197   	fcall	_Write_Com
  9248                           
  9249                           ;func.c: 241: Write_Com(0x30);
  9250  17F8  3030               	movlw	48
  9251  17F9  0020               	movlb	0	; select bank0
  9252  17FA  00B0               	movwf	Write_Com@com
  9253  17FB  3000               	movlw	0
  9254  17FC  00B1               	movwf	Write_Com@com+1
  9255  17FD  319F  2734         	fcall	_Write_Com
  9256  17FF  0008               	return
  9257  1800                     __end_of_set_point:	
  9258                           
  9259                           	psect	text24
  9260  14C2                     __ptext24:	
  9261 ;; *************** function _readFromTable *****************
  9262 ;; Defined at:
  9263 ;;		line 209 in file "func.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;  x               1    wreg     unsigned char 
  9266 ;;  y               1    3[BANK0 ] unsigned char 
  9267 ;;  offset          2    4[BANK0 ] int 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;  x               1   13[BANK0 ] unsigned char 
  9270 ;; Return value:  Size  Location     Type
  9271 ;;                  1    wreg      unsigned char 
  9272 ;; Registers used:
  9273 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9279 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;Total ram usage:       11 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    4
  9286 ;; This function calls:
  9287 ;;		Nothing
  9288 ;; This function is called by:
  9289 ;;		_set_point
  9290 ;; This function uses a non-reentrant model
  9291 ;;
  9292                           
  9293                           
  9294                           ;psect for function _readFromTable
  9295  14C2                     _readFromTable:	
  9296                           
  9297                           ;incstack = 0
  9298                           ; Regs used in _readFromTable: [wreg+fsr1l+fsr1h+status,2+status,0]
  9299                           ;readFromTable@x stored from wreg
  9300  14C2  0020               	movlb	0	; select bank0
  9301  14C3  00AD               	movwf	readFromTable@x
  9302                           
  9303                           ;func.c: 213: if(table[x][y] & 0x08)
  9304  14C4  082D               	movf	readFromTable@x,w
  9305  14C5  00A6               	movwf	??_readFromTable
  9306  14C6  3003               	movlw	3
  9307  14C7                     u3315:	
  9308  14C7  35A6               	lslf	??_readFromTable,f
  9309  14C8  0B89               	decfsz	9,f
  9310  14C9  2CC7               	goto	u3315
  9311  14CA  30A6               	movlw	(low (_table| 0))& (0+255)
  9312  14CB  0726               	addwf	??_readFromTable,w
  9313  14CC  00A7               	movwf	??_readFromTable+1
  9314  14CD  0823               	movf	readFromTable@y,w
  9315  14CE  0727               	addwf	??_readFromTable+1,w
  9316  14CF  00A8               	movwf	??_readFromTable+2
  9317  14D0  0828               	movf	??_readFromTable+2,w
  9318  14D1  0086               	movwf	6
  9319  14D2  0187               	clrf	7
  9320  14D3  1D81               	btfss	1,3
  9321  14D4  2CF9               	goto	l2941
  9322                           
  9323                           ;func.c: 214: return screen[table[x][y]-5][offset];
  9324  14D5  082D               	movf	readFromTable@x,w
  9325  14D6  00A6               	movwf	??_readFromTable
  9326  14D7  3003               	movlw	3
  9327  14D8                     u3335:	
  9328  14D8  35A6               	lslf	??_readFromTable,f
  9329  14D9  0B89               	decfsz	9,f
  9330  14DA  2CD8               	goto	u3335
  9331  14DB  30A6               	movlw	(low (_table| 0))& (0+255)
  9332  14DC  0726               	addwf	??_readFromTable,w
  9333  14DD  00A7               	movwf	??_readFromTable+1
  9334  14DE  0823               	movf	readFromTable@y,w
  9335  14DF  0727               	addwf	??_readFromTable+1,w
  9336  14E0  00A8               	movwf	??_readFromTable+2
  9337  14E1  0828               	movf	??_readFromTable+2,w
  9338  14E2  0086               	movwf	6
  9339  14E3  0187               	clrf	7
  9340  14E4  0801               	movf	1,w
  9341  14E5  00A9               	movwf	??_readFromTable+3
  9342  14E6  3003               	movlw	3
  9343  14E7                     u3345:	
  9344  14E7  35A9               	lslf	??_readFromTable+3,f
  9345  14E8  0B89               	decfsz	9,f
  9346  14E9  2CE7               	goto	u3345
  9347  14EA  30D8               	movlw	216
  9348  14EB  0729               	addwf	??_readFromTable+3,w
  9349  14EC  00AA               	movwf	??_readFromTable+4
  9350  14ED  30B0               	movlw	(low (_screen| (0+256)))& (0+255)
  9351  14EE  072A               	addwf	??_readFromTable+4,w
  9352  14EF  00AB               	movwf	??_readFromTable+5
  9353  14F0  0824               	movf	readFromTable@offset,w
  9354  14F1  072B               	addwf	??_readFromTable+5,w
  9355  14F2  00AC               	movwf	??_readFromTable+6
  9356  14F3  082C               	movf	??_readFromTable+6,w
  9357  14F4  0086               	movwf	6
  9358  14F5  3001               	movlw	1	; select bank3/4
  9359  14F6  0087               	movwf	7
  9360  14F7  0801               	movf	1,w
  9361  14F8  0008               	return
  9362  14F9                     l2941:	
  9363                           
  9364                           ;func.c: 215: else
  9365                           ;func.c: 216: return screen[table[x][y]][offset];
  9366  14F9  082D               	movf	readFromTable@x,w
  9367  14FA  00A6               	movwf	??_readFromTable
  9368  14FB  3003               	movlw	3
  9369  14FC                     u3355:	
  9370  14FC  35A6               	lslf	??_readFromTable,f
  9371  14FD  0B89               	decfsz	9,f
  9372  14FE  2CFC               	goto	u3355
  9373  14FF  30A6               	movlw	(low (_table| 0))& (0+255)
  9374  1500  0726               	addwf	??_readFromTable,w
  9375  1501  00A7               	movwf	??_readFromTable+1
  9376  1502  0823               	movf	readFromTable@y,w
  9377  1503  0727               	addwf	??_readFromTable+1,w
  9378  1504  00A8               	movwf	??_readFromTable+2
  9379  1505  0828               	movf	??_readFromTable+2,w
  9380  1506  0086               	movwf	6
  9381  1507  0187               	clrf	7
  9382  1508  0801               	movf	1,w
  9383  1509  00A9               	movwf	??_readFromTable+3
  9384  150A  3003               	movlw	3
  9385  150B                     u3365:	
  9386  150B  35A9               	lslf	??_readFromTable+3,f
  9387  150C  0B89               	decfsz	9,f
  9388  150D  2D0B               	goto	u3365
  9389  150E  30B0               	movlw	(low (_screen| (0+256)))& (0+255)
  9390  150F  0729               	addwf	??_readFromTable+3,w
  9391  1510  00AA               	movwf	??_readFromTable+4
  9392  1511  0824               	movf	readFromTable@offset,w
  9393  1512  072A               	addwf	??_readFromTable+4,w
  9394  1513  00AB               	movwf	??_readFromTable+5
  9395  1514  082B               	movf	??_readFromTable+5,w
  9396  1515  0086               	movwf	6
  9397  1516  3001               	movlw	1	; select bank3/4
  9398  1517  0087               	movwf	7
  9399  1518  0801               	movf	1,w
  9400  1519  0008               	return
  9401  151A                     __end_of_readFromTable:	
  9402                           
  9403                           	psect	text25
  9404  1300                     __ptext25:	
  9405 ;; *************** function _get_Y_Addr *****************
  9406 ;; Defined at:
  9407 ;;		line 184 in file "func.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;  x               1    wreg     unsigned char 
  9410 ;;  y               1   12[BANK0 ] unsigned char 
  9411 ;; Auto vars:     Size  Location     Type
  9412 ;;  x               1   17[BANK0 ] unsigned char 
  9413 ;;  addresses       2   15[BANK0 ] unsigned char [2]
  9414 ;;  addr_Offset     1   24[BANK0 ] unsigned char 
  9415 ;;  addr            1   23[BANK0 ] unsigned char 
  9416 ;;  init_Addr       1   22[BANK0 ] unsigned char 
  9417 ;; Return value:  Size  Location     Type
  9418 ;;                  1    wreg      unsigned char 
  9419 ;; Registers used:
  9420 ;;		wreg, status,2, status,0, pclath, cstack
  9421 ;; Tracked objects:
  9422 ;;		On entry : 0/0
  9423 ;;		On exit  : 0/0
  9424 ;;		Unchanged: 0/0
  9425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9426 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;Total ram usage:       13 bytes
  9431 ;; Hardware stack levels used:    1
  9432 ;; Hardware stack levels required when called:    5
  9433 ;; This function calls:
  9434 ;;		___awdiv
  9435 ;; This function is called by:
  9436 ;;		_set_point
  9437 ;; This function uses a non-reentrant model
  9438 ;;
  9439                           
  9440                           
  9441                           ;psect for function _get_Y_Addr
  9442  1300                     _get_Y_Addr:	
  9443                           
  9444                           ;incstack = 0
  9445                           ; Regs used in _get_Y_Addr: [wreg+status,2+status,0+pclath+cstack]
  9446                           ;get_Y_Addr@x stored from wreg
  9447  1300  0020               	movlb	0	; select bank0
  9448  1301  00B1               	movwf	get_Y_Addr@x
  9449                           
  9450                           ;func.c: 185: unsigned char addresses[] = {0x80,0x88};
  9451  1302  0021               	movlb	1	; select bank1
  9452  1303  086F               	movf	(get_Y_Addr@F6431+1)^(0+128),w
  9453  1304  0020               	movlb	0	; select bank0
  9454  1305  00B0               	movwf	get_Y_Addr@addresses+1
  9455  1306  0021               	movlb	1	; select bank1
  9456  1307  086E               	movf	get_Y_Addr@F6431^(0+128),w
  9457  1308  0020               	movlb	0	; select bank0
  9458  1309  00AF               	movwf	get_Y_Addr@addresses
  9459                           
  9460                           ;func.c: 186: unsigned char init_Addr, addr, addr_Offset;
  9461                           ;func.c: 187: init_Addr = (x<4) ? addresses[0] : addresses[1];
  9462  130A  3004               	movlw	4
  9463  130B  0231               	subwf	get_Y_Addr@x,w
  9464  130C  1C03               	skipc
  9465  130D  2B10               	goto	l2881
  9466  130E  0830               	movf	get_Y_Addr@addresses+1,w
  9467  130F  2B11               	goto	L7
  9468  1310                     l2881:	
  9469  1310  082F               	movf	get_Y_Addr@addresses,w
  9470  1311                     L7:	
  9471  1311  00AD               	movwf	??_get_Y_Addr
  9472  1312  01AE               	clrf	??_get_Y_Addr+1
  9473  1313  082D               	movf	??_get_Y_Addr,w
  9474  1314  00B2               	movwf	_get_Y_Addr$456
  9475  1315  082E               	movf	??_get_Y_Addr+1,w
  9476  1316  00B3               	movwf	_get_Y_Addr$456+1
  9477  1317  0832               	movf	_get_Y_Addr$456,w
  9478  1318  00AD               	movwf	??_get_Y_Addr
  9479  1319  082D               	movf	??_get_Y_Addr,w
  9480  131A  00B6               	movwf	get_Y_Addr@init_Addr
  9481                           
  9482                           ;func.c: 188: addr_Offset = (y%2 == 0) ? y/2 : (y-1)/2;
  9483  131B  1C2C               	btfss	get_Y_Addr@y,0
  9484  131C  2B28               	goto	l2887
  9485  131D  3002               	movlw	2
  9486  131E  00A3               	movwf	___awdiv@divisor
  9487  131F  3000               	movlw	0
  9488  1320  00A4               	movwf	___awdiv@divisor+1
  9489  1321  082C               	movf	get_Y_Addr@y,w
  9490  1322  3EFF               	addlw	255
  9491  1323  00A5               	movwf	___awdiv@dividend
  9492  1324  30FF               	movlw	255
  9493  1325  1803               	skipnc
  9494  1326  3000               	movlw	0
  9495  1327  2B32               	goto	L9
  9496  1328                     l2887:	
  9497  1328  3002               	movlw	2
  9498  1329  00A3               	movwf	___awdiv@divisor
  9499  132A  3000               	movlw	0
  9500  132B  00A4               	movwf	___awdiv@divisor+1
  9501  132C  082C               	movf	get_Y_Addr@y,w
  9502  132D  00AD               	movwf	??_get_Y_Addr
  9503  132E  01AE               	clrf	??_get_Y_Addr+1
  9504  132F  082D               	movf	??_get_Y_Addr,w
  9505  1330  00A5               	movwf	___awdiv@dividend
  9506  1331  082E               	movf	??_get_Y_Addr+1,w
  9507  1332                     L9:	
  9508  1332  00A6               	movwf	___awdiv@dividend+1
  9509  1333  3194  241A         	fcall	___awdiv
  9510  1335  0020               	movlb	0	; select bank0
  9511  1336  0824               	movf	?___awdiv+1,w
  9512  1337  00B5               	movwf	_get_Y_Addr$457+1
  9513  1338  0823               	movf	?___awdiv,w
  9514  1339  00B4               	movwf	_get_Y_Addr$457
  9515  133A  0834               	movf	_get_Y_Addr$457,w
  9516  133B  00AD               	movwf	??_get_Y_Addr
  9517  133C  082D               	movf	??_get_Y_Addr,w
  9518  133D  00B8               	movwf	get_Y_Addr@addr_Offset
  9519                           
  9520                           ;func.c: 189: addr = init_Addr + addr_Offset;
  9521  133E  0836               	movf	get_Y_Addr@init_Addr,w
  9522  133F  0738               	addwf	get_Y_Addr@addr_Offset,w
  9523  1340  00AD               	movwf	??_get_Y_Addr
  9524  1341  082D               	movf	??_get_Y_Addr,w
  9525  1342  00B7               	movwf	get_Y_Addr@addr
  9526                           
  9527                           ;func.c: 191: return addr;
  9528  1343  0837               	movf	get_Y_Addr@addr,w
  9529  1344  0008               	return
  9530  1345                     __end_of_get_Y_Addr:	
  9531                           
  9532                           	psect	text26
  9533  11B8                     __ptext26:	
  9534 ;; *************** function _get_X_Addr *****************
  9535 ;; Defined at:
  9536 ;;		line 194 in file "func.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  x               1    wreg     unsigned char 
  9539 ;;  y               1    3[BANK0 ] unsigned char 
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;  x               1    6[BANK0 ] unsigned char 
  9542 ;;  addr            1    5[BANK0 ] unsigned char 
  9543 ;; Return value:  Size  Location     Type
  9544 ;;                  1    wreg      unsigned char 
  9545 ;; Registers used:
  9546 ;;		wreg, status,2, status,0
  9547 ;; Tracked objects:
  9548 ;;		On entry : 0/0
  9549 ;;		On exit  : 0/0
  9550 ;;		Unchanged: 0/0
  9551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9552 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;Total ram usage:        4 bytes
  9557 ;; Hardware stack levels used:    1
  9558 ;; Hardware stack levels required when called:    4
  9559 ;; This function calls:
  9560 ;;		Nothing
  9561 ;; This function is called by:
  9562 ;;		_set_point
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           
  9567                           ;psect for function _get_X_Addr
  9568  11B8                     _get_X_Addr:	
  9569                           
  9570                           ;incstack = 0
  9571                           ; Regs used in _get_X_Addr: [wreg+status,2+status,0]
  9572                           ;get_X_Addr@x stored from wreg
  9573  11B8  0020               	movlb	0	; select bank0
  9574  11B9  00A6               	movwf	get_X_Addr@x
  9575                           
  9576                           ;func.c: 195: unsigned char addr;
  9577                           ;func.c: 196: if(x == 0 || x == 4) addr = 0x80;
  9578  11BA  0826               	movf	get_X_Addr@x,w
  9579  11BB  1903               	btfsc	3,2
  9580  11BC  29C1               	goto	l2901
  9581  11BD  3004               	movlw	4
  9582  11BE  0626               	xorwf	get_X_Addr@x,w
  9583  11BF  1D03               	btfss	3,2
  9584  11C0  29C3               	goto	l2903
  9585  11C1                     l2901:	
  9586  11C1  3080               	movlw	128
  9587  11C2  29DF               	goto	L12
  9588  11C3                     l2903:	
  9589                           
  9590                           ;func.c: 197: else if(x == 1 || x == 5) addr = 0x88;
  9591  11C3  0326               	decf	get_X_Addr@x,w
  9592  11C4  1903               	btfsc	3,2
  9593  11C5  29CA               	goto	l2907
  9594  11C6  3005               	movlw	5
  9595  11C7  0626               	xorwf	get_X_Addr@x,w
  9596  11C8  1D03               	btfss	3,2
  9597  11C9  29CC               	goto	l2909
  9598  11CA                     l2907:	
  9599  11CA  3088               	movlw	136
  9600  11CB  29DF               	goto	L12
  9601  11CC                     l2909:	
  9602                           
  9603                           ;func.c: 198: else if(x == 2 || x == 6) addr = 0x90;
  9604  11CC  3002               	movlw	2
  9605  11CD  0626               	xorwf	get_X_Addr@x,w
  9606  11CE  1903               	btfsc	3,2
  9607  11CF  29D4               	goto	l2913
  9608  11D0  3006               	movlw	6
  9609  11D1  0626               	xorwf	get_X_Addr@x,w
  9610  11D2  1D03               	btfss	3,2
  9611  11D3  29D6               	goto	l2915
  9612  11D4                     l2913:	
  9613  11D4  3090               	movlw	144
  9614  11D5  29DF               	goto	L12
  9615  11D6                     l2915:	
  9616                           
  9617                           ;func.c: 199: else if(x == 3 || x == 7) addr = 0x98;
  9618  11D6  3003               	movlw	3
  9619  11D7  0626               	xorwf	get_X_Addr@x,w
  9620  11D8  1903               	btfsc	3,2
  9621  11D9  29DE               	goto	l2919
  9622  11DA  3007               	movlw	7
  9623  11DB  0626               	xorwf	get_X_Addr@x,w
  9624  11DC  1D03               	btfss	3,2
  9625  11DD  29E2               	goto	l379
  9626  11DE                     l2919:	
  9627  11DE  3098               	movlw	152
  9628  11DF                     L12:	
  9629  11DF  00A4               	movwf	??_get_X_Addr
  9630  11E0  0824               	movf	??_get_X_Addr,w
  9631  11E1  00A5               	movwf	get_X_Addr@addr
  9632  11E2                     l379:	
  9633                           
  9634                           ;func.c: 200: return addr;
  9635  11E2  0825               	movf	get_X_Addr@addr,w
  9636  11E3  0008               	return
  9637  11E4                     __end_of_get_X_Addr:	
  9638                           
  9639                           	psect	text27
  9640  1F26                     __ptext27:	
  9641 ;; *************** function _check_Pos *****************
  9642 ;; Defined at:
  9643 ;;		line 203 in file "func.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;  x               1    wreg     unsigned char 
  9646 ;;  y               1    3[BANK0 ] unsigned char 
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;  x               1    0[COMMON] unsigned char 
  9649 ;;  result          2    6[BANK0 ] int 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  2    3[BANK0 ] int 
  9652 ;; Registers used:
  9653 ;;		wreg, status,2
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9659 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;Total ram usage:        5 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    4
  9666 ;; This function calls:
  9667 ;;		Nothing
  9668 ;; This function is called by:
  9669 ;;		_set_point
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           
  9674                           ;psect for function _check_Pos
  9675  1F26                     _check_Pos:	
  9676                           
  9677                           ;func.c: 204: int result = 0;
  9678                           
  9679                           ;incstack = 0
  9680                           ; Regs used in _check_Pos: [wreg+status,2]
  9681  1F26  0020               	movlb	0	; select bank0
  9682  1F27  01A6               	clrf	check_Pos@result
  9683  1F28  01A7               	clrf	check_Pos@result+1
  9684                           
  9685                           ;func.c: 205: if(y%2 != 0) result = 1;
  9686  1F29  1C23               	btfss	check_Pos@y,0
  9687  1F2A  2F2F               	goto	l2929
  9688  1F2B  3001               	movlw	1
  9689  1F2C  00A6               	movwf	check_Pos@result
  9690  1F2D  3000               	movlw	0
  9691  1F2E  00A7               	movwf	check_Pos@result+1
  9692  1F2F                     l2929:	
  9693                           
  9694                           ;func.c: 206: return result;
  9695  1F2F  0827               	movf	check_Pos@result+1,w
  9696  1F30  00A4               	movwf	?_check_Pos+1
  9697  1F31  0826               	movf	check_Pos@result,w
  9698  1F32  00A3               	movwf	?_check_Pos
  9699  1F33  0008               	return
  9700  1F34                     __end_of_check_Pos:	
  9701                           
  9702                           	psect	text28
  9703  13D1                     __ptext28:	
  9704 ;; *************** function _int2string *****************
  9705 ;; Defined at:
  9706 ;;		line 3 in file "func.c"
  9707 ;; Parameters:    Size  Location     Type
  9708 ;;  a               1    wreg     PTR unsigned char 
  9709 ;;		 -> display_step(10), display_white(10), display_black(10), 
  9710 ;;  begin           1   12[BANK0 ] unsigned char 
  9711 ;;  num             1   13[BANK0 ] unsigned char 
  9712 ;; Auto vars:     Size  Location     Type
  9713 ;;  a               1   20[BANK0 ] PTR unsigned char 
  9714 ;;		 -> display_step(10), display_white(10), display_black(10), 
  9715 ;;  i               2   18[BANK0 ] int 
  9716 ;; Return value:  Size  Location     Type
  9717 ;;                  1    wreg      void 
  9718 ;; Registers used:
  9719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9725 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;Total ram usage:        9 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    5
  9732 ;; This function calls:
  9733 ;;		___awdiv
  9734 ;;		___awmod
  9735 ;; This function is called by:
  9736 ;;		_draw_heibaiqi_right
  9737 ;;		_choose_point
  9738 ;;		_draw_wayout_right
  9739 ;;		_wayout
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           
  9744                           ;psect for function _int2string
  9745  13D1                     _int2string:	
  9746                           
  9747                           ;incstack = 0
  9748                           ; Regs used in _int2string: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9749                           ;int2string@a stored from wreg
  9750  13D1  0020               	movlb	0	; select bank0
  9751  13D2  00B4               	movwf	int2string@a
  9752                           
  9753                           ;func.c: 5: int i=begin;
  9754  13D3  082C               	movf	int2string@begin,w
  9755  13D4  00AE               	movwf	??_int2string
  9756  13D5  01AF               	clrf	??_int2string+1
  9757  13D6  082E               	movf	??_int2string,w
  9758  13D7  00B2               	movwf	int2string@i
  9759  13D8  082F               	movf	??_int2string+1,w
  9760  13D9  00B3               	movwf	int2string@i+1
  9761                           
  9762                           ;func.c: 6: a[i]=num/10+'0';
  9763  13DA  300A               	movlw	10
  9764  13DB  00A3               	movwf	___awdiv@divisor
  9765  13DC  3000               	movlw	0
  9766  13DD  00A4               	movwf	___awdiv@divisor+1
  9767  13DE  082D               	movf	int2string@num,w
  9768  13DF  00AE               	movwf	??_int2string
  9769  13E0  01AF               	clrf	??_int2string+1
  9770  13E1  082E               	movf	??_int2string,w
  9771  13E2  00A5               	movwf	___awdiv@dividend
  9772  13E3  082F               	movf	??_int2string+1,w
  9773  13E4  00A6               	movwf	___awdiv@dividend+1
  9774  13E5  3194  241A  3193   	fcall	___awdiv
  9775  13E8  0020               	movlb	0	; select bank0
  9776  13E9  0823               	movf	?___awdiv,w
  9777  13EA  3E30               	addlw	48
  9778  13EB  00B0               	movwf	??_int2string+2
  9779  13EC  0832               	movf	int2string@i,w
  9780  13ED  0734               	addwf	int2string@a,w
  9781  13EE  00B1               	movwf	??_int2string+3
  9782  13EF  0831               	movf	??_int2string+3,w
  9783  13F0  0086               	movwf	6
  9784  13F1  3001               	movlw	1	; select bank2/3
  9785  13F2  0087               	movwf	7
  9786  13F3  0830               	movf	??_int2string+2,w
  9787  13F4  0081               	movwf	1
  9788                           
  9789                           ;func.c: 7: a[i+1]=num%10+'0';
  9790  13F5  300A               	movlw	10
  9791  13F6  00A3               	movwf	___awmod@divisor
  9792  13F7  3000               	movlw	0
  9793  13F8  00A4               	movwf	___awmod@divisor+1
  9794  13F9  082D               	movf	int2string@num,w
  9795  13FA  00AE               	movwf	??_int2string
  9796  13FB  01AF               	clrf	??_int2string+1
  9797  13FC  082E               	movf	??_int2string,w
  9798  13FD  00A5               	movwf	___awmod@dividend
  9799  13FE  082F               	movf	??_int2string+1,w
  9800  13FF  00A6               	movwf	___awmod@dividend+1
  9801  1400  3193  2345         	fcall	___awmod
  9802  1402  0020               	movlb	0	; select bank0
  9803  1403  0823               	movf	?___awmod,w
  9804  1404  3E30               	addlw	48
  9805  1405  00B0               	movwf	??_int2string+2
  9806  1406  0832               	movf	int2string@i,w
  9807  1407  3E01               	addlw	1
  9808  1408  0734               	addwf	int2string@a,w
  9809  1409  00B1               	movwf	??_int2string+3
  9810  140A  0831               	movf	??_int2string+3,w
  9811  140B  0086               	movwf	6
  9812  140C  3001               	movlw	1	; select bank2/3
  9813  140D  0087               	movwf	7
  9814  140E  0830               	movf	??_int2string+2,w
  9815  140F  0081               	movwf	1
  9816                           
  9817                           ;func.c: 8: a[i+2]='\0';
  9818  1410  0832               	movf	int2string@i,w
  9819  1411  3E02               	addlw	2
  9820  1412  0734               	addwf	int2string@a,w
  9821  1413  00AE               	movwf	??_int2string
  9822  1414  082E               	movf	??_int2string,w
  9823  1415  0086               	movwf	6
  9824  1416  3001               	movlw	1	; select bank2/3
  9825  1417  0087               	movwf	7
  9826  1418  0181               	clrf	1
  9827  1419  0008               	return
  9828  141A                     __end_of_int2string:	
  9829                           
  9830                           	psect	text29
  9831  1345                     __ptext29:	
  9832 ;; *************** function ___awmod *****************
  9833 ;; Defined at:
  9834 ;;		line 6 in file "E:\xCB\sources\common\awmod.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;  divisor         2    3[BANK0 ] int 
  9837 ;;  dividend        2    5[BANK0 ] int 
  9838 ;; Auto vars:     Size  Location     Type
  9839 ;;  sign            1    9[BANK0 ] unsigned char 
  9840 ;;  counter         1    8[BANK0 ] unsigned char 
  9841 ;; Return value:  Size  Location     Type
  9842 ;;                  2    3[BANK0 ] int 
  9843 ;; Registers used:
  9844 ;;		wreg, status,2, status,0
  9845 ;; Tracked objects:
  9846 ;;		On entry : 0/0
  9847 ;;		On exit  : 0/0
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9850 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;Total ram usage:        7 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:    4
  9857 ;; This function calls:
  9858 ;;		Nothing
  9859 ;; This function is called by:
  9860 ;;		_int2string
  9861 ;;		_choose_level
  9862 ;; This function uses a non-reentrant model
  9863 ;;
  9864                           
  9865                           
  9866                           ;psect for function ___awmod
  9867  1345                     ___awmod:	
  9868                           
  9869                           ;incstack = 0
  9870                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9871  1345  0020               	movlb	0	; select bank0
  9872  1346  01A9               	clrf	___awmod@sign
  9873  1347  1FA6               	btfss	___awmod@dividend+1,7
  9874  1348  2B50               	goto	l2953
  9875  1349  09A5               	comf	___awmod@dividend,f
  9876  134A  09A6               	comf	___awmod@dividend+1,f
  9877  134B  0AA5               	incf	___awmod@dividend,f
  9878  134C  1903               	skipnz
  9879  134D  0AA6               	incf	___awmod@dividend+1,f
  9880  134E  01A9               	clrf	___awmod@sign
  9881  134F  0AA9               	incf	___awmod@sign,f
  9882  1350                     l2953:	
  9883  1350  1FA4               	btfss	___awmod@divisor+1,7
  9884  1351  2B57               	goto	l2957
  9885  1352  09A3               	comf	___awmod@divisor,f
  9886  1353  09A4               	comf	___awmod@divisor+1,f
  9887  1354  0AA3               	incf	___awmod@divisor,f
  9888  1355  1903               	skipnz
  9889  1356  0AA4               	incf	___awmod@divisor+1,f
  9890  1357                     l2957:	
  9891  1357  0823               	movf	___awmod@divisor,w
  9892  1358  0424               	iorwf	___awmod@divisor+1,w
  9893  1359  1903               	btfsc	3,2
  9894  135A  2B7E               	goto	l2975
  9895  135B  01A8               	clrf	___awmod@counter
  9896  135C  0AA8               	incf	___awmod@counter,f
  9897  135D                     l2965:	
  9898  135D  1BA4               	btfsc	___awmod@divisor+1,7
  9899  135E  2B69               	goto	l2967
  9900  135F  3001               	movlw	1
  9901  1360                     u3405:	
  9902  1360  35A3               	lslf	___awmod@divisor,f
  9903  1361  0DA4               	rlf	___awmod@divisor+1,f
  9904  1362  0B89               	decfsz	9,f
  9905  1363  2B60               	goto	u3405
  9906  1364  3001               	movlw	1
  9907  1365  00A7               	movwf	??___awmod
  9908  1366  0827               	movf	??___awmod,w
  9909  1367  07A8               	addwf	___awmod@counter,f
  9910  1368  2B5D               	goto	l2965
  9911  1369                     l2967:	
  9912  1369  0824               	movf	___awmod@divisor+1,w
  9913  136A  0226               	subwf	___awmod@dividend+1,w
  9914  136B  1D03               	skipz
  9915  136C  2B6F               	goto	u3425
  9916  136D  0823               	movf	___awmod@divisor,w
  9917  136E  0225               	subwf	___awmod@dividend,w
  9918  136F                     u3425:	
  9919  136F  1C03               	skipc
  9920  1370  2B75               	goto	l2971
  9921  1371  0823               	movf	___awmod@divisor,w
  9922  1372  02A5               	subwf	___awmod@dividend,f
  9923  1373  0824               	movf	___awmod@divisor+1,w
  9924  1374  3BA6               	subwfb	___awmod@dividend+1,f
  9925  1375                     l2971:	
  9926  1375  3001               	movlw	1
  9927  1376                     u3435:	
  9928  1376  36A4               	lsrf	___awmod@divisor+1,f
  9929  1377  0CA3               	rrf	___awmod@divisor,f
  9930  1378  0B89               	decfsz	9,f
  9931  1379  2B76               	goto	u3435
  9932  137A  3001               	movlw	1
  9933  137B  02A8               	subwf	___awmod@counter,f
  9934  137C  1D03               	btfss	3,2
  9935  137D  2B69               	goto	l2967
  9936  137E                     l2975:	
  9937  137E  0829               	movf	___awmod@sign,w
  9938  137F  1903               	btfsc	3,2
  9939  1380  2B86               	goto	l2979
  9940  1381  09A5               	comf	___awmod@dividend,f
  9941  1382  09A6               	comf	___awmod@dividend+1,f
  9942  1383  0AA5               	incf	___awmod@dividend,f
  9943  1384  1903               	skipnz
  9944  1385  0AA6               	incf	___awmod@dividend+1,f
  9945  1386                     l2979:	
  9946  1386  0826               	movf	___awmod@dividend+1,w
  9947  1387  00A4               	movwf	?___awmod+1
  9948  1388  0825               	movf	___awmod@dividend,w
  9949  1389  00A3               	movwf	?___awmod
  9950  138A  0008               	return
  9951  138B                     __end_of___awmod:	
  9952                           
  9953                           	psect	text30
  9954  141A                     __ptext30:	
  9955 ;; *************** function ___awdiv *****************
  9956 ;; Defined at:
  9957 ;;		line 6 in file "E:\xCB\sources\common\awdiv.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;  divisor         2    3[BANK0 ] int 
  9960 ;;  dividend        2    5[BANK0 ] int 
  9961 ;; Auto vars:     Size  Location     Type
  9962 ;;  quotient        2   10[BANK0 ] int 
  9963 ;;  sign            1    9[BANK0 ] unsigned char 
  9964 ;;  counter         1    8[BANK0 ] unsigned char 
  9965 ;; Return value:  Size  Location     Type
  9966 ;;                  2    3[BANK0 ] int 
  9967 ;; Registers used:
  9968 ;;		wreg, status,2, status,0
  9969 ;; Tracked objects:
  9970 ;;		On entry : 0/0
  9971 ;;		On exit  : 0/0
  9972 ;;		Unchanged: 0/0
  9973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9974 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;Total ram usage:        9 bytes
  9979 ;; Hardware stack levels used:    1
  9980 ;; Hardware stack levels required when called:    4
  9981 ;; This function calls:
  9982 ;;		Nothing
  9983 ;; This function is called by:
  9984 ;;		_int2string
  9985 ;;		_get_Y_Addr
  9986 ;;		_music_delay
  9987 ;;		_music
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           
  9992                           ;psect for function ___awdiv
  9993  141A                     ___awdiv:	
  9994                           
  9995                           ;incstack = 0
  9996                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9997  141A  0020               	movlb	0	; select bank0
  9998  141B  01A9               	clrf	___awdiv@sign
  9999  141C  1FA4               	btfss	___awdiv@divisor+1,7
 10000  141D  2C25               	goto	l2825
 10001  141E  09A3               	comf	___awdiv@divisor,f
 10002  141F  09A4               	comf	___awdiv@divisor+1,f
 10003  1420  0AA3               	incf	___awdiv@divisor,f
 10004  1421  1903               	skipnz
 10005  1422  0AA4               	incf	___awdiv@divisor+1,f
 10006  1423  01A9               	clrf	___awdiv@sign
 10007  1424  0AA9               	incf	___awdiv@sign,f
 10008  1425                     l2825:	
 10009  1425  1FA6               	btfss	___awdiv@dividend+1,7
 10010  1426  2C30               	goto	l2831
 10011  1427  09A5               	comf	___awdiv@dividend,f
 10012  1428  09A6               	comf	___awdiv@dividend+1,f
 10013  1429  0AA5               	incf	___awdiv@dividend,f
 10014  142A  1903               	skipnz
 10015  142B  0AA6               	incf	___awdiv@dividend+1,f
 10016  142C  3001               	movlw	1
 10017  142D  00A7               	movwf	??___awdiv
 10018  142E  0827               	movf	??___awdiv,w
 10019  142F  06A9               	xorwf	___awdiv@sign,f
 10020  1430                     l2831:	
 10021  1430  01AA               	clrf	___awdiv@quotient
 10022  1431  01AB               	clrf	___awdiv@quotient+1
 10023  1432  0823               	movf	___awdiv@divisor,w
 10024  1433  0424               	iorwf	___awdiv@divisor+1,w
 10025  1434  1903               	btfsc	3,2
 10026  1435  2C5F               	goto	l2853
 10027  1436  01A8               	clrf	___awdiv@counter
 10028  1437  0AA8               	incf	___awdiv@counter,f
 10029  1438                     l2841:	
 10030  1438  1BA4               	btfsc	___awdiv@divisor+1,7
 10031  1439  2C44               	goto	l2843
 10032  143A  3001               	movlw	1
 10033  143B                     u3135:	
 10034  143B  35A3               	lslf	___awdiv@divisor,f
 10035  143C  0DA4               	rlf	___awdiv@divisor+1,f
 10036  143D  0B89               	decfsz	9,f
 10037  143E  2C3B               	goto	u3135
 10038  143F  3001               	movlw	1
 10039  1440  00A7               	movwf	??___awdiv
 10040  1441  0827               	movf	??___awdiv,w
 10041  1442  07A8               	addwf	___awdiv@counter,f
 10042  1443  2C38               	goto	l2841
 10043  1444                     l2843:	
 10044  1444  3001               	movlw	1
 10045  1445                     u3155:	
 10046  1445  35AA               	lslf	___awdiv@quotient,f
 10047  1446  0DAB               	rlf	___awdiv@quotient+1,f
 10048  1447  0B89               	decfsz	9,f
 10049  1448  2C45               	goto	u3155
 10050  1449  0824               	movf	___awdiv@divisor+1,w
 10051  144A  0226               	subwf	___awdiv@dividend+1,w
 10052  144B  1D03               	skipz
 10053  144C  2C4F               	goto	u3165
 10054  144D  0823               	movf	___awdiv@divisor,w
 10055  144E  0225               	subwf	___awdiv@dividend,w
 10056  144F                     u3165:	
 10057  144F  1C03               	skipc
 10058  1450  2C56               	goto	l2849
 10059  1451  0823               	movf	___awdiv@divisor,w
 10060  1452  02A5               	subwf	___awdiv@dividend,f
 10061  1453  0824               	movf	___awdiv@divisor+1,w
 10062  1454  3BA6               	subwfb	___awdiv@dividend+1,f
 10063  1455  142A               	bsf	___awdiv@quotient,0
 10064  1456                     l2849:	
 10065  1456  3001               	movlw	1
 10066  1457                     u3175:	
 10067  1457  36A4               	lsrf	___awdiv@divisor+1,f
 10068  1458  0CA3               	rrf	___awdiv@divisor,f
 10069  1459  0B89               	decfsz	9,f
 10070  145A  2C57               	goto	u3175
 10071  145B  3001               	movlw	1
 10072  145C  02A8               	subwf	___awdiv@counter,f
 10073  145D  1D03               	btfss	3,2
 10074  145E  2C44               	goto	l2843
 10075  145F                     l2853:	
 10076  145F  0829               	movf	___awdiv@sign,w
 10077  1460  1903               	btfsc	3,2
 10078  1461  2C67               	goto	l2857
 10079  1462  09AA               	comf	___awdiv@quotient,f
 10080  1463  09AB               	comf	___awdiv@quotient+1,f
 10081  1464  0AAA               	incf	___awdiv@quotient,f
 10082  1465  1903               	skipnz
 10083  1466  0AAB               	incf	___awdiv@quotient+1,f
 10084  1467                     l2857:	
 10085  1467  082B               	movf	___awdiv@quotient+1,w
 10086  1468  00A4               	movwf	?___awdiv+1
 10087  1469  082A               	movf	___awdiv@quotient,w
 10088  146A  00A3               	movwf	?___awdiv
 10089  146B  0008               	return
 10090  146C                     __end_of___awdiv:	
 10091                           
 10092                           	psect	text31
 10093  0BEB                     __ptext31:	
 10094 ;; *************** function _check_point *****************
 10095 ;; Defined at:
 10096 ;;		line 85 in file "heibaiqi.c"
 10097 ;; Parameters:    Size  Location     Type
 10098 ;;  row             1    wreg     unsigned char 
 10099 ;;  col             1    9[BANK0 ] unsigned char 
 10100 ;;  ply             1   10[BANK0 ] unsigned char 
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;  row             1   23[BANK0 ] unsigned char 
 10103 ;;  i               1   28[BANK0 ] unsigned char 
 10104 ;;  flag            1   27[BANK0 ] unsigned char 
 10105 ;;  j               1   26[BANK0 ] unsigned char 
 10106 ;;  add_col         1   25[BANK0 ] unsigned char 
 10107 ;;  add_row         1   24[BANK0 ] unsigned char 
 10108 ;;  temp            1   22[BANK0 ] unsigned char 
 10109 ;;  oppo            1   21[BANK0 ] unsigned char 
 10110 ;;  result          1   20[BANK0 ] unsigned char 
 10111 ;; Return value:  Size  Location     Type
 10112 ;;                  1    wreg      unsigned char 
 10113 ;; Registers used:
 10114 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10115 ;; Tracked objects:
 10116 ;;		On entry : 0/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10120 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;Total ram usage:       20 bytes
 10125 ;; Hardware stack levels used:    1
 10126 ;; Hardware stack levels required when called:    5
 10127 ;; This function calls:
 10128 ;;		___bmul
 10129 ;;		___wmul
 10130 ;; This function is called by:
 10131 ;;		_choose_point
 10132 ;;		_judge_result
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           
 10137                           ;psect for function _check_point
 10138  0BEB                     _check_point:	
 10139                           
 10140                           ;incstack = 0
 10141                           ; Regs used in _check_point: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10142                           ;check_point@row stored from wreg
 10143  0BEB  0020               	movlb	0	; select bank0
 10144  0BEC  00B7               	movwf	check_point@row
 10145                           
 10146                           ;heibaiqi.c: 87: unsigned char result = 0;
 10147  0BED  01B4               	clrf	check_point@result
 10148                           
 10149                           ;heibaiqi.c: 88: char add_row, add_col;
 10150                           ;heibaiqi.c: 89: unsigned char oppo = 3- ply;
 10151  0BEE  032A               	decf	check_point@ply,w
 10152  0BEF  3AFF               	xorlw	255
 10153  0BF0  3E03               	addlw	3
 10154  0BF1  00AB               	movwf	??_check_point
 10155  0BF2  082B               	movf	??_check_point,w
 10156  0BF3  00B5               	movwf	check_point@oppo
 10157                           
 10158                           ;heibaiqi.c: 90: unsigned char temp = 0b10000000;
 10159  0BF4  3080               	movlw	128
 10160  0BF5  00AB               	movwf	??_check_point
 10161  0BF6  082B               	movf	??_check_point,w
 10162  0BF7  00B6               	movwf	check_point@temp
 10163                           
 10164                           ;heibaiqi.c: 93: for(unsigned char j=0; j<8; j++){
 10165  0BF8  01BA               	clrf	check_point@j
 10166  0BF9  3008               	movlw	8
 10167  0BFA  023A               	subwf	check_point@j,w
 10168  0BFB  1803               	btfsc	3,0
 10169  0BFC  2CF0               	goto	l3165
 10170  0BFD                     l3125:	
 10171                           
 10172                           ;heibaiqi.c: 94: add_row = towards[j][0];
 10173  0BFD  353A               	lslf	check_point@j,w
 10174  0BFE  3EA0               	addlw	(low (_towards| (0+256)))& (0+255)
 10175  0BFF  0086               	movwf	6
 10176  0C00  3001               	movlw	1	; select bank3/4
 10177  0C01  0087               	movwf	7
 10178  0C02  0801               	movf	1,w
 10179  0C03  00AB               	movwf	??_check_point
 10180  0C04  082B               	movf	??_check_point,w
 10181  0C05  00B8               	movwf	check_point@add_row
 10182                           
 10183                           ;heibaiqi.c: 95: add_col = towards[j][1];
 10184  0C06  1403               	setc
 10185  0C07  0D3A               	rlf	check_point@j,w
 10186  0C08  3EA0               	addlw	(low (_towards| (0+256)))& (0+255)
 10187  0C09  0086               	movwf	6
 10188  0C0A  3001               	movlw	1	; select bank3/4
 10189  0C0B  0087               	movwf	7
 10190  0C0C  0801               	movf	1,w
 10191  0C0D  00AB               	movwf	??_check_point
 10192  0C0E  082B               	movf	??_check_point,w
 10193  0C0F  00B9               	movwf	check_point@add_col
 10194                           
 10195                           ;heibaiqi.c: 96: unsigned char flag=0;
 10196  0C10  01BB               	clrf	check_point@flag
 10197                           
 10198                           ;heibaiqi.c: 97: char i=1;
 10199  0C11  01BC               	clrf	check_point@i
 10200  0C12  0ABC               	incf	check_point@i,f
 10201                           
 10202                           ;heibaiqi.c: 111: while(0 <= (char)(row+i*add_row) && (char)(row+i*add_row) < 8 && 0 <= 
      +                          (char)(col+i*add_col) && (char)(col+i*add_col) < 8){
 10203  0C13  2CBE               	goto	l3155
 10204  0C14                     l3131:	
 10205                           
 10206                           ;heibaiqi.c: 112: if(flag == 0){
 10207  0C14  083B               	movf	check_point@flag,w
 10208  0C15  1D03               	btfss	3,2
 10209  0C16  2C4A               	goto	l3139
 10210                           
 10211                           ;heibaiqi.c: 113: if(table[row+i*add_row][col+i*add_col] == oppo)
 10212  0C17  0839               	movf	check_point@add_col,w
 10213  0C18  00AB               	movwf	??_check_point
 10214  0C19  082B               	movf	??_check_point,w
 10215  0C1A  00A3               	movwf	___bmul@multiplicand
 10216  0C1B  083C               	movf	check_point@i,w
 10217  0C1C  319F  2762  318B   	fcall	___bmul
 10218  0C1F  0020               	movlb	0	; select bank0
 10219  0C20  0729               	addwf	check_point@col,w
 10220  0C21  00AC               	movwf	??_check_point+1
 10221  0C22  30A6               	movlw	(low (_table| 0))& (0+255)
 10222  0C23  072C               	addwf	??_check_point+1,w
 10223  0C24  00AD               	movwf	??_check_point+2
 10224  0C25  083C               	movf	check_point@i,w
 10225  0C26  00AE               	movwf	??_check_point+3
 10226  0C27  01AF               	clrf	??_check_point+4
 10227  0C28  082E               	movf	??_check_point+3,w
 10228  0C29  00A3               	movwf	___wmul@multiplier
 10229  0C2A  082F               	movf	??_check_point+4,w
 10230  0C2B  00A4               	movwf	___wmul@multiplier+1
 10231  0C2C  0838               	movf	check_point@add_row,w
 10232  0C2D  00B0               	movwf	??_check_point+5
 10233  0C2E  01B1               	clrf	??_check_point+6
 10234  0C2F  0830               	movf	??_check_point+5,w
 10235  0C30  00A5               	movwf	___wmul@multiplicand
 10236  0C31  0831               	movf	??_check_point+6,w
 10237  0C32  00A6               	movwf	___wmul@multiplicand+1
 10238  0C33  319F  27C4  318B   	fcall	___wmul
 10239  0C36  0020               	movlb	0	; select bank0
 10240  0C37  0823               	movf	?___wmul,w
 10241  0C38  0737               	addwf	check_point@row,w
 10242  0C39  00B2               	movwf	??_check_point+7
 10243  0C3A  3002               	movlw	2
 10244  0C3B                     u3635:	
 10245  0C3B  35B2               	lslf	??_check_point+7,f
 10246  0C3C  3EFF               	addlw	-1
 10247  0C3D  1D03               	skipz
 10248  0C3E  2C3B               	goto	u3635
 10249  0C3F  3532               	lslf	??_check_point+7,w
 10250  0C40  072D               	addwf	??_check_point+2,w
 10251  0C41  00B3               	movwf	??_check_point+8
 10252  0C42  0833               	movf	??_check_point+8,w
 10253  0C43  0086               	movwf	6
 10254  0C44  0187               	clrf	7
 10255  0C45  0801               	movf	1,w
 10256  0C46  0635               	xorwf	check_point@oppo,w
 10257  0C47  1D03               	skipz
 10258  0C48  2CB3               	goto	l3147
 10259  0C49  2C7F               	goto	l3143
 10260  0C4A                     l3139:	
 10261                           ;heibaiqi.c: 118: }
 10262                           ;heibaiqi.c: 119: }
 10263                           
 10264                           ;heibaiqi.c: 117: break;
 10265                           
 10266                           ;heibaiqi.c: 115: else{
 10267                           ;heibaiqi.c: 116: flag = 0;
 10268                           
 10269                           ;heibaiqi.c: 114: flag = 1;
 10270                           
 10271                           
 10272                           ;heibaiqi.c: 120: else if(flag == 1){
 10273  0C4A  033B               	decf	check_point@flag,w
 10274  0C4B  1D03               	btfss	3,2
 10275  0C4C  2CBA               	goto	l3153
 10276                           
 10277                           ;heibaiqi.c: 121: if(table[row+i*add_row][col+i*add_col] == oppo)
 10278  0C4D  0839               	movf	check_point@add_col,w
 10279  0C4E  00AB               	movwf	??_check_point
 10280  0C4F  082B               	movf	??_check_point,w
 10281  0C50  00A3               	movwf	___bmul@multiplicand
 10282  0C51  083C               	movf	check_point@i,w
 10283  0C52  319F  2762  318B   	fcall	___bmul
 10284  0C55  0020               	movlb	0	; select bank0
 10285  0C56  0729               	addwf	check_point@col,w
 10286  0C57  00AC               	movwf	??_check_point+1
 10287  0C58  30A6               	movlw	(low (_table| 0))& (0+255)
 10288  0C59  072C               	addwf	??_check_point+1,w
 10289  0C5A  00AD               	movwf	??_check_point+2
 10290  0C5B  083C               	movf	check_point@i,w
 10291  0C5C  00AE               	movwf	??_check_point+3
 10292  0C5D  01AF               	clrf	??_check_point+4
 10293  0C5E  082E               	movf	??_check_point+3,w
 10294  0C5F  00A3               	movwf	___wmul@multiplier
 10295  0C60  082F               	movf	??_check_point+4,w
 10296  0C61  00A4               	movwf	___wmul@multiplier+1
 10297  0C62  0838               	movf	check_point@add_row,w
 10298  0C63  00B0               	movwf	??_check_point+5
 10299  0C64  01B1               	clrf	??_check_point+6
 10300  0C65  0830               	movf	??_check_point+5,w
 10301  0C66  00A5               	movwf	___wmul@multiplicand
 10302  0C67  0831               	movf	??_check_point+6,w
 10303  0C68  00A6               	movwf	___wmul@multiplicand+1
 10304  0C69  319F  27C4  318B   	fcall	___wmul
 10305  0C6C  0020               	movlb	0	; select bank0
 10306  0C6D  0823               	movf	?___wmul,w
 10307  0C6E  0737               	addwf	check_point@row,w
 10308  0C6F  00B2               	movwf	??_check_point+7
 10309  0C70  3002               	movlw	2
 10310  0C71                     u3665:	
 10311  0C71  35B2               	lslf	??_check_point+7,f
 10312  0C72  3EFF               	addlw	-1
 10313  0C73  1D03               	skipz
 10314  0C74  2C71               	goto	u3665
 10315  0C75  3532               	lslf	??_check_point+7,w
 10316  0C76  072D               	addwf	??_check_point+2,w
 10317  0C77  00B3               	movwf	??_check_point+8
 10318  0C78  0833               	movf	??_check_point+8,w
 10319  0C79  0086               	movwf	6
 10320  0C7A  0187               	clrf	7
 10321  0C7B  0801               	movf	1,w
 10322  0C7C  0635               	xorwf	check_point@oppo,w
 10323  0C7D  1D03               	skipz
 10324  0C7E  2C82               	goto	l3145
 10325  0C7F                     l3143:	
 10326                           
 10327                           ;heibaiqi.c: 122: flag = 1;
 10328  0C7F  01BB               	clrf	check_point@flag
 10329  0C80  0ABB               	incf	check_point@flag,f
 10330  0C81  2CBA               	goto	l3153
 10331  0C82                     l3145:	
 10332                           
 10333                           ;heibaiqi.c: 123: else if(table[row+i*add_row][col+i*add_col] == 0){
 10334  0C82  0839               	movf	check_point@add_col,w
 10335  0C83  00AB               	movwf	??_check_point
 10336  0C84  082B               	movf	??_check_point,w
 10337  0C85  00A3               	movwf	___bmul@multiplicand
 10338  0C86  083C               	movf	check_point@i,w
 10339  0C87  319F  2762  318B   	fcall	___bmul
 10340  0C8A  0020               	movlb	0	; select bank0
 10341  0C8B  0729               	addwf	check_point@col,w
 10342  0C8C  00AC               	movwf	??_check_point+1
 10343  0C8D  30A6               	movlw	(low (_table| 0))& (0+255)
 10344  0C8E  072C               	addwf	??_check_point+1,w
 10345  0C8F  00AD               	movwf	??_check_point+2
 10346  0C90  083C               	movf	check_point@i,w
 10347  0C91  00AE               	movwf	??_check_point+3
 10348  0C92  01AF               	clrf	??_check_point+4
 10349  0C93  082E               	movf	??_check_point+3,w
 10350  0C94  00A3               	movwf	___wmul@multiplier
 10351  0C95  082F               	movf	??_check_point+4,w
 10352  0C96  00A4               	movwf	___wmul@multiplier+1
 10353  0C97  0838               	movf	check_point@add_row,w
 10354  0C98  00B0               	movwf	??_check_point+5
 10355  0C99  01B1               	clrf	??_check_point+6
 10356  0C9A  0830               	movf	??_check_point+5,w
 10357  0C9B  00A5               	movwf	___wmul@multiplicand
 10358  0C9C  0831               	movf	??_check_point+6,w
 10359  0C9D  00A6               	movwf	___wmul@multiplicand+1
 10360  0C9E  319F  27C4  318B   	fcall	___wmul
 10361  0CA1  0020               	movlb	0	; select bank0
 10362  0CA2  0823               	movf	?___wmul,w
 10363  0CA3  0737               	addwf	check_point@row,w
 10364  0CA4  00B2               	movwf	??_check_point+7
 10365  0CA5  3002               	movlw	2
 10366  0CA6                     u3685:	
 10367  0CA6  35B2               	lslf	??_check_point+7,f
 10368  0CA7  3EFF               	addlw	-1
 10369  0CA8  1D03               	skipz
 10370  0CA9  2CA6               	goto	u3685
 10371  0CAA  3532               	lslf	??_check_point+7,w
 10372  0CAB  072D               	addwf	??_check_point+2,w
 10373  0CAC  00B3               	movwf	??_check_point+8
 10374  0CAD  0833               	movf	??_check_point+8,w
 10375  0CAE  0086               	movwf	6
 10376  0CAF  0187               	clrf	7
 10377  0CB0  0801               	movf	1,w
 10378  0CB1  1D03               	btfss	3,2
 10379  0CB2  2CB5               	goto	l3151
 10380  0CB3                     l3147:	
 10381                           
 10382                           ;heibaiqi.c: 124: flag = 0;
 10383  0CB3  01BB               	clrf	check_point@flag
 10384                           
 10385                           ;heibaiqi.c: 125: break;
 10386  0CB4  2CDC               	goto	l3159
 10387  0CB5                     l3151:	
 10388                           ;heibaiqi.c: 126: }
 10389                           
 10390                           
 10391                           ;heibaiqi.c: 127: else{
 10392                           ;heibaiqi.c: 128: flag = 2;
 10393  0CB5  3002               	movlw	2
 10394  0CB6  00AB               	movwf	??_check_point
 10395  0CB7  082B               	movf	??_check_point,w
 10396  0CB8  00BB               	movwf	check_point@flag
 10397                           
 10398                           ;heibaiqi.c: 129: break;
 10399  0CB9  2CDC               	goto	l3159
 10400  0CBA                     l3153:	
 10401                           
 10402                           ;heibaiqi.c: 130: }
 10403                           ;heibaiqi.c: 131: }
 10404                           ;heibaiqi.c: 132: i += 1;
 10405  0CBA  3001               	movlw	1
 10406  0CBB  00AB               	movwf	??_check_point
 10407  0CBC  082B               	movf	??_check_point,w
 10408  0CBD  07BC               	addwf	check_point@i,f
 10409  0CBE                     l3155:	
 10410  0CBE  0838               	movf	check_point@add_row,w
 10411  0CBF  00AB               	movwf	??_check_point
 10412  0CC0  082B               	movf	??_check_point,w
 10413  0CC1  00A3               	movwf	___bmul@multiplicand
 10414  0CC2  083C               	movf	check_point@i,w
 10415  0CC3  319F  2762  318B   	fcall	___bmul
 10416  0CC6  0020               	movlb	0	; select bank0
 10417  0CC7  0737               	addwf	check_point@row,w
 10418  0CC8  00AC               	movwf	??_check_point+1
 10419  0CC9  3008               	movlw	8
 10420  0CCA  022C               	subwf	??_check_point+1,w
 10421  0CCB  1803               	skipnc
 10422  0CCC  2CDC               	goto	l3159
 10423  0CCD  0839               	movf	check_point@add_col,w
 10424  0CCE  00AB               	movwf	??_check_point
 10425  0CCF  082B               	movf	??_check_point,w
 10426  0CD0  00A3               	movwf	___bmul@multiplicand
 10427  0CD1  083C               	movf	check_point@i,w
 10428  0CD2  319F  2762  318B   	fcall	___bmul
 10429  0CD5  0020               	movlb	0	; select bank0
 10430  0CD6  0729               	addwf	check_point@col,w
 10431  0CD7  00AC               	movwf	??_check_point+1
 10432  0CD8  3008               	movlw	8
 10433  0CD9  022C               	subwf	??_check_point+1,w
 10434  0CDA  1C03               	skipc
 10435  0CDB  2C14               	goto	l3131
 10436  0CDC                     l3159:	
 10437                           
 10438                           ;heibaiqi.c: 133: }
 10439                           ;heibaiqi.c: 134: if(flag == 2){
 10440  0CDC  3002               	movlw	2
 10441  0CDD  063B               	xorwf	check_point@flag,w
 10442  0CDE  1D03               	btfss	3,2
 10443  0CDF  2CE4               	goto	l106
 10444                           
 10445                           ;heibaiqi.c: 135: result |= temp;
 10446  0CE0  0836               	movf	check_point@temp,w
 10447  0CE1  00AB               	movwf	??_check_point
 10448  0CE2  082B               	movf	??_check_point,w
 10449  0CE3  04B4               	iorwf	check_point@result,f
 10450  0CE4                     l106:	
 10451                           
 10452                           ;heibaiqi.c: 136: }
 10453                           ;heibaiqi.c: 137: temp = temp >> 1;
 10454  0CE4  3636               	lsrf	check_point@temp,w
 10455  0CE5  00AB               	movwf	??_check_point
 10456  0CE6  082B               	movf	??_check_point,w
 10457  0CE7  00B6               	movwf	check_point@temp
 10458  0CE8  3001               	movlw	1
 10459  0CE9  00AB               	movwf	??_check_point
 10460  0CEA  082B               	movf	??_check_point,w
 10461  0CEB  07BA               	addwf	check_point@j,f
 10462  0CEC  3008               	movlw	8
 10463  0CED  023A               	subwf	check_point@j,w
 10464  0CEE  1C03               	skipc
 10465  0CEF  2BFD               	goto	l3125
 10466  0CF0                     l3165:	
 10467                           
 10468                           ;heibaiqi.c: 138: }
 10469                           ;heibaiqi.c: 139: return result;
 10470  0CF0  0834               	movf	check_point@result,w
 10471  0CF1  0008               	return
 10472  0CF2                     __end_of_check_point:	
 10473                           
 10474                           	psect	text32
 10475  1F62                     __ptext32:	
 10476 ;; *************** function ___bmul *****************
 10477 ;; Defined at:
 10478 ;;		line 4 in file "E:\xCB\sources\common\Umul8.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  multiplier      1    wreg     unsigned char 
 10481 ;;  multiplicand    1    3[BANK0 ] unsigned char 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  multiplier      1    6[BANK0 ] unsigned char 
 10484 ;;  product         1    5[BANK0 ] unsigned char 
 10485 ;; Return value:  Size  Location     Type
 10486 ;;                  1    wreg      unsigned char 
 10487 ;; Registers used:
 10488 ;;		wreg, status,2, status,0
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10494 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;Total ram usage:        4 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; Hardware stack levels required when called:    4
 10501 ;; This function calls:
 10502 ;;		Nothing
 10503 ;; This function is called by:
 10504 ;;		_check_point
 10505 ;;		_choose_point
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           
 10510                           ;psect for function ___bmul
 10511  1F62                     ___bmul:	
 10512                           
 10513                           ;incstack = 0
 10514                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10515                           ;___bmul@multiplier stored from wreg
 10516  1F62  0020               	movlb	0	; select bank0
 10517  1F63  00A6               	movwf	___bmul@multiplier
 10518  1F64  01A5               	clrf	___bmul@product
 10519  1F65                     l3101:	
 10520  1F65  1C26               	btfss	___bmul@multiplier,0
 10521  1F66  2F6B               	goto	l3105
 10522  1F67  0823               	movf	___bmul@multiplicand,w
 10523  1F68  00A4               	movwf	??___bmul
 10524  1F69  0824               	movf	??___bmul,w
 10525  1F6A  07A5               	addwf	___bmul@product,f
 10526  1F6B                     l3105:	
 10527  1F6B  1003               	clrc
 10528  1F6C  0DA3               	rlf	___bmul@multiplicand,f
 10529  1F6D  1003               	clrc
 10530  1F6E  0CA6               	rrf	___bmul@multiplier,f
 10531  1F6F  0826               	movf	___bmul@multiplier,w
 10532  1F70  1D03               	btfss	3,2
 10533  1F71  2F65               	goto	l3101
 10534  1F72  0825               	movf	___bmul@product,w
 10535  1F73  0008               	return
 10536  1F74                     __end_of___bmul:	
 10537                           
 10538                           	psect	text33
 10539  146C                     __ptext33:	
 10540 ;; *************** function _Display_Chars *****************
 10541 ;; Defined at:
 10542 ;;		line 149 in file "func.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;  x               1    wreg     unsigned char 
 10545 ;;  string          2   18[BANK0 ] PTR unsigned char 
 10546 ;;		 -> STR_33(19), STR_32(8), STR_31(2), STR_30(2), 
 10547 ;;		 -> STR_29(8), STR_28(8), STR_27(8), STR_26(5), 
 10548 ;;		 -> STR_25(4), STR_24(8), STR_23(8), STR_22(8), 
 10549 ;;		 -> STR_21(8), STR_20(8), STR_19(8), STR_18(8), 
 10550 ;;		 -> STR_17(8), STR_16(8), display_step(10), STR_15(2), 
 10551 ;;		 -> STR_14(2), STR_13(7), STR_12(9), STR_11(13), 
 10552 ;;		 -> STR_10(11), STR_9(11), STR_8(19), STR_7(8), 
 10553 ;;		 -> STR_6(19), STR_5(10), STR_4(19), STR_3(10), 
 10554 ;;		 -> STR_2(2), STR_1(2), display_white(10), display_black(10), 
 10555 ;;  y               1   20[BANK0 ] unsigned char 
 10556 ;; Auto vars:     Size  Location     Type
 10557 ;;  x               1   29[BANK0 ] unsigned char 
 10558 ;;  addresses       4   23[BANK0 ] unsigned char [4]
 10559 ;;  i               2   27[BANK0 ] int 
 10560 ;; Return value:  Size  Location     Type
 10561 ;;                  1    wreg      void 
 10562 ;; Registers used:
 10563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10564 ;; Tracked objects:
 10565 ;;		On entry : 0/0
 10566 ;;		On exit  : 0/0
 10567 ;;		Unchanged: 0/0
 10568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10569 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10570 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10571 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;Total ram usage:       12 bytes
 10574 ;; Hardware stack levels used:    1
 10575 ;; Hardware stack levels required when called:    7
 10576 ;; This function calls:
 10577 ;;		_Write_Com
 10578 ;;		_Write_Data
 10579 ;; This function is called by:
 10580 ;;		_draw_heibaiqi_right
 10581 ;;		_choose_point
 10582 ;;		_heibaiqi
 10583 ;;		_start_video
 10584 ;;		_set_menu
 10585 ;;		_run_game
 10586 ;;		_draw_wayout_right
 10587 ;;		_wayout_display1
 10588 ;;		_wayout_display2
 10589 ;;		_choose_level2
 10590 ;;		_wayout
 10591 ;; This function uses a non-reentrant model
 10592 ;;
 10593                           
 10594                           
 10595                           ;psect for function _Display_Chars
 10596  146C                     _Display_Chars:	
 10597                           
 10598                           ;incstack = 0
 10599                           ; Regs used in _Display_Chars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10600                           ;Display_Chars@x stored from wreg
 10601  146C  0020               	movlb	0	; select bank0
 10602  146D  00BD               	movwf	Display_Chars@x
 10603                           
 10604                           ;func.c: 150: unsigned char addresses[] = {0x80,0x90,0x88,0x98};
 10605  146E  0021               	movlb	1	; select bank1
 10606  146F  086D               	movf	(Display_Chars@F6420+3)^(0+128),w
 10607  1470  0020               	movlb	0	; select bank0
 10608  1471  00BA               	movwf	Display_Chars@addresses+3
 10609  1472  0021               	movlb	1	; select bank1
 10610  1473  086C               	movf	(Display_Chars@F6420+2)^(0+128),w
 10611  1474  0020               	movlb	0	; select bank0
 10612  1475  00B9               	movwf	Display_Chars@addresses+2
 10613  1476  0021               	movlb	1	; select bank1
 10614  1477  086B               	movf	(Display_Chars@F6420+1)^(0+128),w
 10615  1478  0020               	movlb	0	; select bank0
 10616  1479  00B8               	movwf	Display_Chars@addresses+1
 10617  147A  0021               	movlb	1	; select bank1
 10618  147B  086A               	movf	Display_Chars@F6420^(0+128),w
 10619  147C  0020               	movlb	0	; select bank0
 10620  147D  00B7               	movwf	Display_Chars@addresses
 10621                           
 10622                           ;func.c: 151: int i = 0;
 10623  147E  01BB               	clrf	Display_Chars@i
 10624  147F  01BC               	clrf	Display_Chars@i+1
 10625                           
 10626                           ;func.c: 152: Write_Com(0x30);
 10627  1480  3030               	movlw	48
 10628  1481  00B0               	movwf	Write_Com@com
 10629  1482  3000               	movlw	0
 10630  1483  00B1               	movwf	Write_Com@com+1
 10631  1484  319F  2734  3194   	fcall	_Write_Com
 10632                           
 10633                           ;func.c: 153: Write_Com(0x06);
 10634  1487  3006               	movlw	6
 10635  1488  0020               	movlb	0	; select bank0
 10636  1489  00B0               	movwf	Write_Com@com
 10637  148A  3000               	movlw	0
 10638  148B  00B1               	movwf	Write_Com@com+1
 10639  148C  319F  2734  3194   	fcall	_Write_Com
 10640                           
 10641                           ;func.c: 156: Write_Com(addresses[x-1]+(y-1));
 10642  148F  0020               	movlb	0	; select bank0
 10643  1490  083D               	movf	Display_Chars@x,w
 10644  1491  3EFF               	addlw	255
 10645  1492  3E37               	addlw	(low (Display_Chars@addresses| 0))& (0+255)
 10646  1493  0086               	movwf	6
 10647  1494  0187               	clrf	7
 10648  1495  0834               	movf	Display_Chars@y,w
 10649  1496  0701               	addwf	1,w
 10650  1497  00B5               	movwf	??_Display_Chars
 10651  1498  01B6               	clrf	??_Display_Chars+1
 10652  1499  0DB6               	rlf	??_Display_Chars+1,f
 10653  149A  0835               	movf	??_Display_Chars,w
 10654  149B  3EFF               	addlw	255
 10655  149C  00B0               	movwf	Write_Com@com
 10656  149D  30FF               	movlw	255
 10657  149E  3D36               	addwfc	??_Display_Chars+1,w
 10658  149F  00B1               	movwf	Write_Com@com+1
 10659  14A0  319F  2734  3194   	fcall	_Write_Com
 10660  14A3                     l3005:	
 10661                           ;func.c: 159: while(string[i] != '\0'){
 10662                           
 10663  14A3  0020               	movlb	0	; select bank0
 10664  14A4  0832               	movf	Display_Chars@string,w
 10665  14A5  073B               	addwf	Display_Chars@i,w
 10666  14A6  0084               	movwf	4
 10667  14A7  0833               	movf	Display_Chars@string+1,w
 10668  14A8  3D3C               	addwfc	Display_Chars@i+1,w
 10669  14A9  0085               	movwf	5
 10670  14AA  0012               	moviw fsr0++
 10671  14AB  1903               	btfsc	3,2
 10672  14AC  0008               	return
 10673                           
 10674                           ;func.c: 160: Write_Data(*string);
 10675  14AD  0020               	movlb	0	; select bank0
 10676  14AE  0832               	movf	Display_Chars@string,w
 10677  14AF  0084               	movwf	4
 10678  14B0  0833               	movf	Display_Chars@string+1,w
 10679  14B1  0085               	movwf	5
 10680  14B2  0800               	movf	0,w	;code access
 10681  14B3  00B5               	movwf	??_Display_Chars
 10682  14B4  01B6               	clrf	??_Display_Chars+1
 10683  14B5  0835               	movf	??_Display_Chars,w
 10684  14B6  00B0               	movwf	Write_Data@dat
 10685  14B7  0836               	movf	??_Display_Chars+1,w
 10686  14B8  00B1               	movwf	Write_Data@dat+1
 10687  14B9  319F  2743  3194   	fcall	_Write_Data
 10688                           
 10689                           ;func.c: 161: string++;
 10690  14BC  3001               	movlw	1
 10691  14BD  0020               	movlb	0	; select bank0
 10692  14BE  07B2               	addwf	Display_Chars@string,f
 10693  14BF  3000               	movlw	0
 10694  14C0  3DB3               	addwfc	Display_Chars@string+1,f
 10695  14C1  2CA3               	goto	l3005
 10696  14C2                     __end_of_Display_Chars:	
 10697                           
 10698                           	psect	text34
 10699  1F43                     __ptext34:	
 10700 ;; *************** function _Write_Data *****************
 10701 ;; Defined at:
 10702 ;;		line 47 in file "func.c"
 10703 ;; Parameters:    Size  Location     Type
 10704 ;;  dat             2   16[BANK0 ] int 
 10705 ;; Auto vars:     Size  Location     Type
 10706 ;;		None
 10707 ;; Return value:  Size  Location     Type
 10708 ;;                  1    wreg      void 
 10709 ;; Registers used:
 10710 ;;		wreg, status,2, status,0, pclath, cstack
 10711 ;; Tracked objects:
 10712 ;;		On entry : 0/0
 10713 ;;		On exit  : 0/0
 10714 ;;		Unchanged: 0/0
 10715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10716 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;Total ram usage:        2 bytes
 10721 ;; Hardware stack levels used:    1
 10722 ;; Hardware stack levels required when called:    6
 10723 ;; This function calls:
 10724 ;;		_delay_100us
 10725 ;; This function is called by:
 10726 ;;		_draw_heibaiqi_right
 10727 ;;		_Clear_Screen
 10728 ;;		_Display_Chars
 10729 ;;		_Display_Char
 10730 ;;		_set_point
 10731 ;;		_draw_wayout_right
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           
 10736                           ;psect for function _Write_Data
 10737  1F43                     _Write_Data:	
 10738                           
 10739                           ;func.c: 49: RB1 = 0;
 10740                           
 10741                           ;incstack = 0
 10742                           ; Regs used in _Write_Data: [wreg+status,2+status,0+pclath+cstack]
 10743  1F43  0020               	movlb	0	; select bank0
 10744  1F44  108D               	bcf	13,1	;volatile
 10745                           
 10746                           ;func.c: 50: RB2 = 0;
 10747  1F45  110D               	bcf	13,2	;volatile
 10748                           
 10749                           ;func.c: 51: RB3 = 1;
 10750  1F46  158D               	bsf	13,3	;volatile
 10751                           
 10752                           ;func.c: 53: RB1 = 1;
 10753  1F47  148D               	bsf	13,1	;volatile
 10754                           
 10755                           ;func.c: 54: PORTA = dat;
 10756  1F48  0830               	movf	Write_Data@dat,w
 10757  1F49  008C               	movwf	12	;volatile
 10758                           
 10759                           ;func.c: 55: RB1 = 0;
 10760  1F4A  108D               	bcf	13,1	;volatile
 10761                           
 10762                           ;func.c: 56: delay_100us(1);
 10763  1F4B  3001               	movlw	1
 10764  1F4C  00A9               	movwf	delay_100us@cnt
 10765  1F4D  3000               	movlw	0
 10766  1F4E  00AA               	movwf	delay_100us@cnt+1
 10767  1F4F  3190  20F5         	fcall	_delay_100us
 10768  1F51  0008               	return
 10769  1F52                     __end_of_Write_Data:	
 10770                           
 10771                           	psect	text35
 10772  15DE                     __ptext35:	
 10773 ;; *************** function _init_cfg *****************
 10774 ;; Defined at:
 10775 ;;		line 87 in file "func.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;		None
 10778 ;; Auto vars:     Size  Location     Type
 10779 ;;		None
 10780 ;; Return value:  Size  Location     Type
 10781 ;;                  1    wreg      void 
 10782 ;; Registers used:
 10783 ;;		wreg, status,2, status,0, pclath, cstack
 10784 ;; Tracked objects:
 10785 ;;		On entry : 0/0
 10786 ;;		On exit  : 0/0
 10787 ;;		Unchanged: 0/0
 10788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;Total ram usage:        0 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; Hardware stack levels required when called:    7
 10796 ;; This function calls:
 10797 ;;		_Write_Com
 10798 ;;		_delay_100us
 10799 ;; This function is called by:
 10800 ;;		_main
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           
 10805                           ;psect for function _init_cfg
 10806  15DE                     _init_cfg:	
 10807                           
 10808                           ;func.c: 90: TRISA = 0b00000000;
 10809                           
 10810                           ;incstack = 0
 10811                           ; Regs used in _init_cfg: [wreg+status,2+status,0+pclath+cstack]
 10812  15DE  0021               	movlb	1	; select bank1
 10813  15DF  018C               	clrf	12	;volatile
 10814                           
 10815                           ;func.c: 91: LATA=0;
 10816  15E0  0022               	movlb	2	; select bank2
 10817  15E1  018C               	clrf	12	;volatile
 10818                           
 10819                           ;func.c: 92: ANSELA=0;
 10820  15E2  0023               	movlb	3	; select bank3
 10821  15E3  018C               	clrf	12	;volatile
 10822                           
 10823                           ;func.c: 93: TRISB = 0b00000000;
 10824  15E4  0021               	movlb	1	; select bank1
 10825  15E5  018D               	clrf	13	;volatile
 10826                           
 10827                           ;func.c: 94: ANSELB=0;
 10828  15E6  0023               	movlb	3	; select bank3
 10829  15E7  018D               	clrf	13	;volatile
 10830                           
 10831                           ;func.c: 95: TRISC = 0b00000000;
 10832  15E8  0021               	movlb	1	; select bank1
 10833  15E9  018E               	clrf	14	;volatile
 10834                           
 10835                           ;func.c: 96: LATC=0;
 10836  15EA  0022               	movlb	2	; select bank2
 10837  15EB  018E               	clrf	14	;volatile
 10838                           
 10839                           ;func.c: 97: OSCCON = 0b01111010;
 10840  15EC  307A               	movlw	122
 10841  15ED  0021               	movlb	1	; select bank1
 10842  15EE  0099               	movwf	25	;volatile
 10843                           
 10844                           ;func.c: 100: INTCONbits.GIE = 1;
 10845  15EF  178B               	bsf	11,7	;volatile
 10846                           
 10847                           ;func.c: 101: INTCONbits.PEIE = 1;
 10848  15F0  170B               	bsf	11,6	;volatile
 10849                           
 10850                           ;func.c: 108: PIE1 = 2;
 10851  15F1  3002               	movlw	2
 10852  15F2  0091               	movwf	17	;volatile
 10853                           
 10854                           ;func.c: 109: PIR1 = 0;
 10855  15F3  0020               	movlb	0	; select bank0
 10856  15F4  0191               	clrf	17	;volatile
 10857                           
 10858                           ;func.c: 110: PR2 = 0b01111111;
 10859  15F5  307F               	movlw	127
 10860  15F6  009B               	movwf	27	;volatile
 10861                           
 10862                           ;func.c: 111: T2CONbits.T2OUTPS = 0b1111;
 10863  15F7  3078               	movlw	120
 10864  15F8  049C               	iorwf	28,f	;volatile
 10865                           
 10866                           ;func.c: 112: T2CONbits.TMR2ON = 1;
 10867  15F9  151C               	bsf	28,2	;volatile
 10868                           
 10869                           ;func.c: 113: T2CONbits.T2CKPS = 0b11;
 10870  15FA  3003               	movlw	3
 10871  15FB  049C               	iorwf	28,f	;volatile
 10872                           
 10873                           ;func.c: 116: RB0 = 0;
 10874  15FC  100D               	bcf	13,0	;volatile
 10875                           
 10876                           ;func.c: 117: delay_100us(20);
 10877  15FD  3014               	movlw	20
 10878  15FE  00A9               	movwf	delay_100us@cnt
 10879  15FF  3000               	movlw	0
 10880  1600  00AA               	movwf	delay_100us@cnt+1
 10881  1601  3190  20F5  3195   	fcall	_delay_100us
 10882                           
 10883                           ;func.c: 118: RB0 = 1;
 10884  1604  0020               	movlb	0	; select bank0
 10885  1605  140D               	bsf	13,0	;volatile
 10886                           
 10887                           ;func.c: 119: delay_100us(20);
 10888  1606  3014               	movlw	20
 10889  1607  00A9               	movwf	delay_100us@cnt
 10890  1608  3000               	movlw	0
 10891  1609  00AA               	movwf	delay_100us@cnt+1
 10892  160A  3190  20F5  3195   	fcall	_delay_100us
 10893                           
 10894                           ;func.c: 121: Write_Com(0x30);
 10895  160D  3030               	movlw	48
 10896  160E  0020               	movlb	0	; select bank0
 10897  160F  00B0               	movwf	Write_Com@com
 10898  1610  3000               	movlw	0
 10899  1611  00B1               	movwf	Write_Com@com+1
 10900  1612  319F  2734  3195   	fcall	_Write_Com
 10901                           
 10902                           ;func.c: 122: delay_100us(100);
 10903  1615  3064               	movlw	100
 10904  1616  0020               	movlb	0	; select bank0
 10905  1617  00A9               	movwf	delay_100us@cnt
 10906  1618  3000               	movlw	0
 10907  1619  00AA               	movwf	delay_100us@cnt+1
 10908  161A  3190  20F5  3195   	fcall	_delay_100us
 10909                           
 10910                           ;func.c: 123: Write_Com(0x30);
 10911  161D  3030               	movlw	48
 10912  161E  0020               	movlb	0	; select bank0
 10913  161F  00B0               	movwf	Write_Com@com
 10914  1620  3000               	movlw	0
 10915  1621  00B1               	movwf	Write_Com@com+1
 10916  1622  319F  2734  3195   	fcall	_Write_Com
 10917                           
 10918                           ;func.c: 124: delay_100us(100);
 10919  1625  3064               	movlw	100
 10920  1626  0020               	movlb	0	; select bank0
 10921  1627  00A9               	movwf	delay_100us@cnt
 10922  1628  3000               	movlw	0
 10923  1629  00AA               	movwf	delay_100us@cnt+1
 10924  162A  3190  20F5  3195   	fcall	_delay_100us
 10925                           
 10926                           ;func.c: 125: Write_Com(0x0c);
 10927  162D  300C               	movlw	12
 10928  162E  0020               	movlb	0	; select bank0
 10929  162F  00B0               	movwf	Write_Com@com
 10930  1630  3000               	movlw	0
 10931  1631  00B1               	movwf	Write_Com@com+1
 10932  1632  319F  2734  3195   	fcall	_Write_Com
 10933                           
 10934                           ;func.c: 126: delay_100us(100);
 10935  1635  3064               	movlw	100
 10936  1636  0020               	movlb	0	; select bank0
 10937  1637  00A9               	movwf	delay_100us@cnt
 10938  1638  3000               	movlw	0
 10939  1639  00AA               	movwf	delay_100us@cnt+1
 10940  163A  3190  20F5  3195   	fcall	_delay_100us
 10941                           
 10942                           ;func.c: 127: Write_Com(0x01);
 10943  163D  3001               	movlw	1
 10944  163E  0020               	movlb	0	; select bank0
 10945  163F  00B0               	movwf	Write_Com@com
 10946  1640  3000               	movlw	0
 10947  1641  00B1               	movwf	Write_Com@com+1
 10948  1642  319F  2734  3195   	fcall	_Write_Com
 10949                           
 10950                           ;func.c: 128: delay_100us(100);
 10951  1645  3064               	movlw	100
 10952  1646  0020               	movlb	0	; select bank0
 10953  1647  00A9               	movwf	delay_100us@cnt
 10954  1648  3000               	movlw	0
 10955  1649  00AA               	movwf	delay_100us@cnt+1
 10956  164A  3190  20F5         	fcall	_delay_100us
 10957  164C  0008               	return
 10958  164D                     __end_of_init_cfg:	
 10959                           
 10960                           	psect	text36
 10961  1F34                     __ptext36:	
 10962 ;; *************** function _Write_Com *****************
 10963 ;; Defined at:
 10964 ;;		line 59 in file "func.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;  com             2   16[BANK0 ] int 
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;		None
 10969 ;; Return value:  Size  Location     Type
 10970 ;;                  1    wreg      void 
 10971 ;; Registers used:
 10972 ;;		wreg, status,2, status,0, pclath, cstack
 10973 ;; Tracked objects:
 10974 ;;		On entry : 0/0
 10975 ;;		On exit  : 0/0
 10976 ;;		Unchanged: 0/0
 10977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10978 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;Total ram usage:        2 bytes
 10983 ;; Hardware stack levels used:    1
 10984 ;; Hardware stack levels required when called:    6
 10985 ;; This function calls:
 10986 ;;		_delay_100us
 10987 ;; This function is called by:
 10988 ;;		_draw_heibaiqi_right
 10989 ;;		_init_cfg
 10990 ;;		_Clear_Screen
 10991 ;;		_Display_Chars
 10992 ;;		_Display_Char
 10993 ;;		_set_point
 10994 ;;		_draw_wayout_right
 10995 ;; This function uses a non-reentrant model
 10996 ;;
 10997                           
 10998                           
 10999                           ;psect for function _Write_Com
 11000  1F34                     _Write_Com:	
 11001                           
 11002                           ;func.c: 61: RB1 = 0;
 11003                           
 11004                           ;incstack = 0
 11005                           ; Regs used in _Write_Com: [wreg+status,2+status,0+pclath+cstack]
 11006  1F34  0020               	movlb	0	; select bank0
 11007  1F35  108D               	bcf	13,1	;volatile
 11008                           
 11009                           ;func.c: 62: RB2 = 0;
 11010  1F36  110D               	bcf	13,2	;volatile
 11011                           
 11012                           ;func.c: 63: RB3 = 0;
 11013  1F37  118D               	bcf	13,3	;volatile
 11014                           
 11015                           ;func.c: 65: RB1 = 1;
 11016  1F38  148D               	bsf	13,1	;volatile
 11017                           
 11018                           ;func.c: 66: PORTA = com;
 11019  1F39  0830               	movf	Write_Com@com,w
 11020  1F3A  008C               	movwf	12	;volatile
 11021                           
 11022                           ;func.c: 67: RB1 = 0;
 11023  1F3B  108D               	bcf	13,1	;volatile
 11024                           
 11025                           ;func.c: 68: delay_100us(1);
 11026  1F3C  3001               	movlw	1
 11027  1F3D  00A9               	movwf	delay_100us@cnt
 11028  1F3E  3000               	movlw	0
 11029  1F3F  00AA               	movwf	delay_100us@cnt+1
 11030  1F40  3190  20F5         	fcall	_delay_100us
 11031  1F42  0008               	return
 11032  1F43                     __end_of_Write_Com:	
 11033                           
 11034                           	psect	text37
 11035  10F5                     __ptext37:	
 11036 ;; *************** function _delay_100us *****************
 11037 ;; Defined at:
 11038 ;;		line 11 in file "func.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;  cnt             2    9[BANK0 ] int 
 11041 ;; Auto vars:     Size  Location     Type
 11042 ;;  h               2   14[BANK0 ] int 
 11043 ;;  i               2   12[BANK0 ] int 
 11044 ;; Return value:  Size  Location     Type
 11045 ;;                  1    wreg      void 
 11046 ;; Registers used:
 11047 ;;		wreg, status,2, status,0, pclath, cstack
 11048 ;; Tracked objects:
 11049 ;;		On entry : 0/0
 11050 ;;		On exit  : 0/0
 11051 ;;		Unchanged: 0/0
 11052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;Total ram usage:        7 bytes
 11058 ;; Hardware stack levels used:    1
 11059 ;; Hardware stack levels required when called:    5
 11060 ;; This function calls:
 11061 ;;		___wmul
 11062 ;; This function is called by:
 11063 ;;		_draw_heibaiqi_right
 11064 ;;		_Write_Data
 11065 ;;		_Write_Com
 11066 ;;		_init_cfg
 11067 ;;		_Clear_Screen
 11068 ;;		_draw_wayout_right
 11069 ;;		_music_delay
 11070 ;;		_little_star
 11071 ;;		_music
 11072 ;; This function uses a non-reentrant model
 11073 ;;
 11074                           
 11075                           
 11076                           ;psect for function _delay_100us
 11077  10F5                     _delay_100us:	
 11078                           
 11079                           ;func.c: 12: int i,h;
 11080                           ;func.c: 13: for(h=0;h<6*cnt;h++) {
 11081                           
 11082                           ;incstack = 0
 11083                           ; Regs used in _delay_100us: [wreg+status,2+status,0+pclath+cstack]
 11084  10F5  0020               	movlb	0	; select bank0
 11085  10F6  01AE               	clrf	delay_100us@h
 11086  10F7  01AF               	clrf	delay_100us@h+1
 11087  10F8                     l2815:	
 11088  10F8  082A               	movf	delay_100us@cnt+1,w
 11089  10F9  00A4               	movwf	___wmul@multiplier+1
 11090  10FA  0829               	movf	delay_100us@cnt,w
 11091  10FB  00A3               	movwf	___wmul@multiplier
 11092  10FC  3006               	movlw	6
 11093  10FD  00A5               	movwf	___wmul@multiplicand
 11094  10FE  3000               	movlw	0
 11095  10FF  00A6               	movwf	___wmul@multiplicand+1
 11096  1100  319F  27C4  3190   	fcall	___wmul
 11097  1103  0020               	movlb	0	; select bank0
 11098  1104  082F               	movf	delay_100us@h+1,w
 11099  1105  3A80               	xorlw	128
 11100  1106  00AB               	movwf	??_delay_100us
 11101  1107  0824               	movf	?___wmul+1,w
 11102  1108  3A80               	xorlw	128
 11103  1109  022B               	subwf	??_delay_100us,w
 11104  110A  1D03               	skipz
 11105  110B  290E               	goto	u3095
 11106  110C  0823               	movf	?___wmul,w
 11107  110D  022E               	subwf	delay_100us@h,w
 11108  110E                     u3095:	
 11109  110E  1803               	btfsc	3,0
 11110  110F  0008               	return
 11111                           
 11112                           ;func.c: 14: i++;
 11113  1110  3001               	movlw	1
 11114  1111  0020               	movlb	0	; select bank0
 11115  1112  07AC               	addwf	delay_100us@i,f
 11116  1113  3000               	movlw	0
 11117  1114  3DAD               	addwfc	delay_100us@i+1,f
 11118  1115  3001               	movlw	1
 11119  1116  07AE               	addwf	delay_100us@h,f
 11120  1117  3000               	movlw	0
 11121  1118  3DAF               	addwfc	delay_100us@h+1,f
 11122  1119  28F8               	goto	l2815
 11123  111A                     __end_of_delay_100us:	
 11124                           
 11125                           	psect	text38
 11126  1FC4                     __ptext38:	
 11127 ;; *************** function ___wmul *****************
 11128 ;; Defined at:
 11129 ;;		line 15 in file "E:\xCB\sources\common\Umul16.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;  multiplier      2    3[BANK0 ] unsigned int 
 11132 ;;  multiplicand    2    5[BANK0 ] unsigned int 
 11133 ;; Auto vars:     Size  Location     Type
 11134 ;;  product         2    7[BANK0 ] unsigned int 
 11135 ;; Return value:  Size  Location     Type
 11136 ;;                  2    3[BANK0 ] unsigned int 
 11137 ;; Registers used:
 11138 ;;		wreg, status,2, status,0
 11139 ;; Tracked objects:
 11140 ;;		On entry : 0/0
 11141 ;;		On exit  : 0/0
 11142 ;;		Unchanged: 0/0
 11143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11144 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;Total ram usage:        6 bytes
 11149 ;; Hardware stack levels used:    1
 11150 ;; Hardware stack levels required when called:    4
 11151 ;; This function calls:
 11152 ;;		Nothing
 11153 ;; This function is called by:
 11154 ;;		_check_point
 11155 ;;		_choose_point
 11156 ;;		_delay_100us
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           
 11161                           ;psect for function ___wmul
 11162  1FC4                     ___wmul:	
 11163                           
 11164                           ;incstack = 0
 11165                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11166  1FC4  0020               	movlb	0	; select bank0
 11167  1FC5  01A7               	clrf	___wmul@product
 11168  1FC6  01A8               	clrf	___wmul@product+1
 11169  1FC7                     l2799:	
 11170  1FC7  1C23               	btfss	___wmul@multiplier,0
 11171  1FC8  2FCD               	goto	l863
 11172  1FC9  0825               	movf	___wmul@multiplicand,w
 11173  1FCA  07A7               	addwf	___wmul@product,f
 11174  1FCB  0826               	movf	___wmul@multiplicand+1,w
 11175  1FCC  3DA8               	addwfc	___wmul@product+1,f
 11176  1FCD                     l863:	
 11177  1FCD  3001               	movlw	1
 11178  1FCE                     u3065:	
 11179  1FCE  35A5               	lslf	___wmul@multiplicand,f
 11180  1FCF  0DA6               	rlf	___wmul@multiplicand+1,f
 11181  1FD0  0B89               	decfsz	9,f
 11182  1FD1  2FCE               	goto	u3065
 11183  1FD2  3001               	movlw	1
 11184  1FD3                     u3075:	
 11185  1FD3  36A4               	lsrf	___wmul@multiplier+1,f
 11186  1FD4  0CA3               	rrf	___wmul@multiplier,f
 11187  1FD5  0B89               	decfsz	9,f
 11188  1FD6  2FD3               	goto	u3075
 11189  1FD7  0823               	movf	___wmul@multiplier,w
 11190  1FD8  0424               	iorwf	___wmul@multiplier+1,w
 11191  1FD9  1D03               	btfss	3,2
 11192  1FDA  2FC7               	goto	l2799
 11193  1FDB  0828               	movf	___wmul@product+1,w
 11194  1FDC  00A4               	movwf	?___wmul+1
 11195  1FDD  0827               	movf	___wmul@product,w
 11196  1FDE  00A3               	movwf	?___wmul
 11197  1FDF  0008               	return
 11198  1FE0                     __end_of___wmul:	
 11199                           
 11200                           	psect	intentry
 11201  0004                     __pintentry:	
 11202 ;; *************** function _ISR *****************
 11203 ;; Defined at:
 11204 ;;		line 9 in file "main.c"
 11205 ;; Parameters:    Size  Location     Type
 11206 ;;		None
 11207 ;; Auto vars:     Size  Location     Type
 11208 ;;		None
 11209 ;; Return value:  Size  Location     Type
 11210 ;;                  1    wreg      void 
 11211 ;; Registers used:
 11212 ;;		wreg, status,2, status,0, pclath, cstack
 11213 ;; Tracked objects:
 11214 ;;		On entry : 0/0
 11215 ;;		On exit  : 0/0
 11216 ;;		Unchanged: 0/0
 11217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;Total ram usage:        2 bytes
 11223 ;; Hardware stack levels used:    1
 11224 ;; Hardware stack levels required when called:    3
 11225 ;; This function calls:
 11226 ;;		_get_key
 11227 ;;		i1_delay_100us
 11228 ;; This function is called by:
 11229 ;;		Interrupt level 1
 11230 ;; This function uses a non-reentrant model
 11231 ;;
 11232                           
 11233  0004                     _ISR:	
 11234                           
 11235                           ;incstack = 0
 11236  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11237                           
 11238                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
 11239  0005  3180               	pagesel	$
 11240  0006  0020               	movlb	0	; select bank0
 11241  0007  087F               	movf	127,w
 11242  0008  00A2               	movwf	??_ISR+1
 11243                           
 11244                           ;main.c: 11: if(1==TMR2IF)
 11245  0009  1C91               	btfss	17,1	;volatile
 11246  000A  281E               	goto	i1l576
 11247                           
 11248                           ;main.c: 12: {
 11249                           ;main.c: 15: key=get_key();
 11250  000B  3191  218E  3180   	fcall	_get_key
 11251  000E  0020               	movlb	0	; select bank0
 11252  000F  00A1               	movwf	??_ISR
 11253  0010  0821               	movf	??_ISR,w
 11254  0011  00E9               	movwf	_key
 11255                           
 11256                           ;main.c: 16: if(key != 0) {
 11257  0012  0869               	movf	_key,w
 11258  0013  1903               	btfsc	3,2
 11259  0014  281B               	goto	i1l4227
 11260                           
 11261                           ;main.c: 17: delay_100us(1000);
 11262  0015  30E8               	movlw	232
 11263  0016  00F6               	movwf	i1delay_100us@cnt
 11264  0017  3003               	movlw	3
 11265  0018  00F7               	movwf	i1delay_100us@cnt+1
 11266  0019  3190  20D3         	fcall	i1_delay_100us
 11267  001B                     i1l4227:	
 11268                           
 11269                           ;main.c: 18: }
 11270                           ;main.c: 20: TMR2=0;
 11271  001B  0020               	movlb	0	; select bank0
 11272  001C  019A               	clrf	26	;volatile
 11273                           
 11274                           ;main.c: 21: TMR2IF=0;
 11275  001D  1091               	bcf	17,1	;volatile
 11276  001E                     i1l576:	
 11277  001E  0822               	movf	??_ISR+1,w
 11278  001F  00FF               	movwf	127
 11279  0020  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11280  0021  0009               	retfie
 11281  0022                     __end_of_ISR:	
 11282                           
 11283                           	psect	text40
 11284  118E                     __ptext40:	
 11285 ;; *************** function _get_key *****************
 11286 ;; Defined at:
 11287 ;;		line 391 in file "func.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;		None
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;  last_key        1    0[BANK0 ] unsigned char 
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  1    wreg      unsigned char 
 11294 ;; Registers used:
 11295 ;;		wreg, status,2, status,0, pclath, cstack
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;Total ram usage:        2 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    2
 11308 ;; This function calls:
 11309 ;;		_read_key
 11310 ;;		i1_delay_100us
 11311 ;; This function is called by:
 11312 ;;		_ISR
 11313 ;; This function uses a non-reentrant model
 11314 ;;
 11315                           
 11316                           
 11317                           ;psect for function _get_key
 11318  118E                     _get_key:	
 11319                           
 11320                           ;func.c: 393: unsigned char last_key = temp_key;
 11321                           
 11322                           ;incstack = 0
 11323                           ; Regs used in _get_key: [wreg+status,2+status,0+pclath+cstack]
 11324  118E  0021               	movlb	1	; select bank1
 11325  118F  0824               	movf	_temp_key^(0+128),w
 11326  1190  00FD               	movwf	??_get_key
 11327  1191  087D               	movf	??_get_key,w
 11328  1192  0020               	movlb	0	; select bank0
 11329  1193  00A0               	movwf	get_key@last_key
 11330                           
 11331                           ;func.c: 394: temp_key = read_key();
 11332  1194  3191  213F  3191   	fcall	_read_key
 11333  1197  00FD               	movwf	??_get_key
 11334  1198  087D               	movf	??_get_key,w
 11335  1199  0021               	movlb	1	; select bank1
 11336  119A  00A4               	movwf	_temp_key^(0+128)
 11337                           
 11338                           ;func.c: 395: if(temp_key == 0)
 11339  119B  0824               	movf	_temp_key^(0+128),w
 11340  119C  1D03               	btfss	3,2
 11341  119D  29A0               	goto	i1l4083
 11342                           
 11343                           ;func.c: 396: last_key = 0;
 11344  119E  0020               	movlb	0	; select bank0
 11345  119F  01A0               	clrf	get_key@last_key
 11346  11A0                     i1l4083:	
 11347                           
 11348                           ;func.c: 397: if(last_key == temp_key && temp_key != 0) {
 11349  11A0  0020               	movlb	0	; select bank0
 11350  11A1  0820               	movf	get_key@last_key,w
 11351  11A2  0021               	movlb	1	; select bank1
 11352  11A3  0624               	xorwf	_temp_key^(0+128),w
 11353  11A4  1D03               	skipz
 11354  11A5  29B6               	goto	i1l4095
 11355  11A6  0824               	movf	_temp_key^(0+128),w
 11356  11A7  1903               	btfsc	3,2
 11357  11A8  29B6               	goto	i1l4095
 11358                           
 11359                           ;func.c: 398: delay_100us(200);
 11360  11A9  30C8               	movlw	200
 11361  11AA  00F6               	movwf	i1delay_100us@cnt
 11362  11AB  3000               	movlw	0
 11363  11AC  00F7               	movwf	i1delay_100us@cnt+1
 11364  11AD  3190  20D3  3191   	fcall	i1_delay_100us
 11365                           
 11366                           ;func.c: 399: if(temp_key != 0) return temp_key;
 11367  11B0  0021               	movlb	1	; select bank1
 11368  11B1  0824               	movf	_temp_key^(0+128),w
 11369  11B2  1903               	btfsc	3,2
 11370  11B3  29B6               	goto	i1l4095
 11371  11B4  0824               	movf	_temp_key^(0+128),w
 11372  11B5  0008               	return
 11373  11B6                     i1l4095:	
 11374                           
 11375                           ;func.c: 400: }
 11376                           ;func.c: 401: return 0;
 11377  11B6  3000               	movlw	0
 11378  11B7  0008               	return
 11379  11B8                     __end_of_get_key:	
 11380                           
 11381                           	psect	text41
 11382  10D3                     __ptext41:	
 11383 ;; *************** function i1_delay_100us *****************
 11384 ;; Defined at:
 11385 ;;		line 11 in file "func.c"
 11386 ;; Parameters:    Size  Location     Type
 11387 ;;  cnt             2    6[COMMON] int 
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;  delay_100us     2   11[COMMON] int 
 11390 ;;  delay_100us     2    9[COMMON] int 
 11391 ;; Return value:  Size  Location     Type
 11392 ;;                  1    wreg      void 
 11393 ;; Registers used:
 11394 ;;		wreg, status,2, status,0, pclath, cstack
 11395 ;; Tracked objects:
 11396 ;;		On entry : 0/0
 11397 ;;		On exit  : 0/0
 11398 ;;		Unchanged: 0/0
 11399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11400 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11401 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11402 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11404 ;;Total ram usage:        7 bytes
 11405 ;; Hardware stack levels used:    1
 11406 ;; Hardware stack levels required when called:    1
 11407 ;; This function calls:
 11408 ;;		i1___wmul
 11409 ;; This function is called by:
 11410 ;;		_get_key
 11411 ;;		_ISR
 11412 ;; This function uses a non-reentrant model
 11413 ;;
 11414                           
 11415                           
 11416                           ;psect for function i1_delay_100us
 11417  10D3                     i1_delay_100us:	
 11418                           
 11419                           ;func.c: 12: int i,h;
 11420                           ;func.c: 13: for(h=0;h<6*cnt;h++) {
 11421                           
 11422                           ;incstack = 0
 11423                           ; Regs used in i1_delay_100us: [wreg+status,2+status,0+pclath+cstack]
 11424  10D3  01FB               	clrf	i1delay_100us@h
 11425  10D4  01FC               	clrf	i1delay_100us@h+1
 11426  10D5                     i1l3991:	
 11427  10D5  0877               	movf	i1delay_100us@cnt+1,w
 11428  10D6  00F1               	movwf	i1___wmul@multiplier+1
 11429  10D7  0876               	movf	i1delay_100us@cnt,w
 11430  10D8  00F0               	movwf	i1___wmul@multiplier
 11431  10D9  3006               	movlw	6
 11432  10DA  00F2               	movwf	i1___wmul@multiplicand
 11433  10DB  3000               	movlw	0
 11434  10DC  00F3               	movwf	i1___wmul@multiplicand+1
 11435  10DD  319F  278E  3190   	fcall	i1___wmul
 11436  10E0  087C               	movf	i1delay_100us@h+1,w
 11437  10E1  3A80               	xorlw	128
 11438  10E2  00F8               	movwf	??i1_delay_100us
 11439  10E3  0871               	movf	?i1___wmul+1,w
 11440  10E4  3A80               	xorlw	128
 11441  10E5  0278               	subwf	??i1_delay_100us,w
 11442  10E6  1D03               	skipz
 11443  10E7  28EA               	goto	u565_25
 11444  10E8  0870               	movf	?i1___wmul,w
 11445  10E9  027B               	subwf	i1delay_100us@h,w
 11446  10EA                     u565_25:	
 11447  10EA  1803               	btfsc	3,0
 11448  10EB  0008               	return
 11449                           
 11450                           ;func.c: 14: i++;
 11451  10EC  3001               	movlw	1
 11452  10ED  07F9               	addwf	i1delay_100us@i,f
 11453  10EE  3000               	movlw	0
 11454  10EF  3DFA               	addwfc	i1delay_100us@i+1,f
 11455  10F0  3001               	movlw	1
 11456  10F1  07FB               	addwf	i1delay_100us@h,f
 11457  10F2  3000               	movlw	0
 11458  10F3  3DFC               	addwfc	i1delay_100us@h+1,f
 11459  10F4  28D5               	goto	i1l3991
 11460  10F5                     __end_ofi1_delay_100us:	
 11461                           
 11462                           	psect	text42
 11463  1F8E                     __ptext42:	
 11464 ;; *************** function i1___wmul *****************
 11465 ;; Defined at:
 11466 ;;		line 15 in file "E:\xCB\sources\common\Umul16.c"
 11467 ;; Parameters:    Size  Location     Type
 11468 ;;  multiplier      2    0[COMMON] unsigned int 
 11469 ;;  multiplicand    2    2[COMMON] unsigned int 
 11470 ;; Auto vars:     Size  Location     Type
 11471 ;;  __wmul          2    4[COMMON] unsigned int 
 11472 ;; Return value:  Size  Location     Type
 11473 ;;                  2    0[COMMON] unsigned int 
 11474 ;; Registers used:
 11475 ;;		wreg, status,2, status,0
 11476 ;; Tracked objects:
 11477 ;;		On entry : 0/0
 11478 ;;		On exit  : 0/0
 11479 ;;		Unchanged: 0/0
 11480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11481 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11482 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11484 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;Total ram usage:        6 bytes
 11486 ;; Hardware stack levels used:    1
 11487 ;; This function calls:
 11488 ;;		Nothing
 11489 ;; This function is called by:
 11490 ;;		i1_delay_100us
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           
 11495                           ;psect for function i1___wmul
 11496  1F8E                     i1___wmul:	
 11497                           
 11498                           ;incstack = 0
 11499                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 11500  1F8E  01F4               	clrf	i1___wmul@product
 11501  1F8F  01F5               	clrf	i1___wmul@product+1
 11502  1F90                     i1l3697:	
 11503  1F90  1C70               	btfss	i1___wmul@multiplier,0
 11504  1F91  2F96               	goto	i1l863
 11505  1F92  0872               	movf	i1___wmul@multiplicand,w
 11506  1F93  07F4               	addwf	i1___wmul@product,f
 11507  1F94  0873               	movf	i1___wmul@multiplicand+1,w
 11508  1F95  3DF5               	addwfc	i1___wmul@product+1,f
 11509  1F96                     i1l863:	
 11510  1F96  3001               	movlw	1
 11511  1F97                     u479_25:	
 11512  1F97  35F2               	lslf	i1___wmul@multiplicand,f
 11513  1F98  0DF3               	rlf	i1___wmul@multiplicand+1,f
 11514  1F99  0B89               	decfsz	9,f
 11515  1F9A  2F97               	goto	u479_25
 11516  1F9B  3001               	movlw	1
 11517  1F9C                     u480_25:	
 11518  1F9C  36F1               	lsrf	i1___wmul@multiplier+1,f
 11519  1F9D  0CF0               	rrf	i1___wmul@multiplier,f
 11520  1F9E  0B89               	decfsz	9,f
 11521  1F9F  2F9C               	goto	u480_25
 11522  1FA0  0870               	movf	i1___wmul@multiplier,w
 11523  1FA1  0471               	iorwf	i1___wmul@multiplier+1,w
 11524  1FA2  1D03               	btfss	3,2
 11525  1FA3  2F90               	goto	i1l3697
 11526  1FA4  0875               	movf	i1___wmul@product+1,w
 11527  1FA5  00F1               	movwf	?i1___wmul+1
 11528  1FA6  0874               	movf	i1___wmul@product,w
 11529  1FA7  00F0               	movwf	?i1___wmul
 11530  1FA8  0008               	return
 11531  1FA9                     __end_ofi1___wmul:	
 11532                           
 11533                           	psect	text43
 11534  113F                     __ptext43:	
 11535 ;; *************** function _read_key *****************
 11536 ;; Defined at:
 11537 ;;		line 364 in file "func.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;		None
 11540 ;; Auto vars:     Size  Location     Type
 11541 ;;		None
 11542 ;; Return value:  Size  Location     Type
 11543 ;;                  1    wreg      unsigned char 
 11544 ;; Registers used:
 11545 ;;		wreg
 11546 ;; Tracked objects:
 11547 ;;		On entry : 0/0
 11548 ;;		On exit  : 0/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;Total ram usage:        0 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; This function calls:
 11558 ;;		Nothing
 11559 ;; This function is called by:
 11560 ;;		_get_key
 11561 ;; This function uses a non-reentrant model
 11562 ;;
 11563                           
 11564                           
 11565                           ;psect for function _read_key
 11566  113F                     _read_key:	
 11567                           
 11568                           ;func.c: 369: TRISBbits.TRISB5 = 1;
 11569                           
 11570                           ;incstack = 0
 11571                           ; Regs used in _read_key: [wreg]
 11572  113F  0021               	movlb	1	; select bank1
 11573  1140  168D               	bsf	13,5	;volatile
 11574                           
 11575                           ;func.c: 370: WPUBbits.WPUB5 = 1;
 11576  1141  0024               	movlb	4	; select bank4
 11577  1142  168D               	bsf	13,5	;volatile
 11578                           
 11579                           ;func.c: 371: TRISC = 0b00101111;
 11580  1143  302F               	movlw	47
 11581  1144  0021               	movlb	1	; select bank1
 11582  1145  008E               	movwf	14	;volatile
 11583                           
 11584                           ;func.c: 372: WPUC = 0b00101111;
 11585  1146  302F               	movlw	47
 11586  1147  0024               	movlb	4	; select bank4
 11587  1148  008E               	movwf	14	;volatile
 11588                           
 11589                           ;func.c: 373: OPTION_REGbits.nWPUEN = 0;
 11590  1149  0021               	movlb	1	; select bank1
 11591  114A  1395               	bcf	21,7	;volatile
 11592                           
 11593                           ;func.c: 374: if(RC3==0)
 11594  114B  0020               	movlb	0	; select bank0
 11595  114C  198E               	btfsc	14,3	;volatile
 11596  114D  2950               	goto	i1l464
 11597                           
 11598                           ;func.c: 375: return 1;
 11599  114E  3001               	movlw	1
 11600  114F  0008               	return
 11601  1150                     i1l464:	
 11602                           
 11603                           ;func.c: 376: else if(RC0==0)
 11604  1150  180E               	btfsc	14,0	;volatile
 11605  1151  2954               	goto	i1l467
 11606                           
 11607                           ;func.c: 377: return 2;
 11608  1152  3002               	movlw	2
 11609  1153  0008               	return
 11610  1154                     i1l467:	
 11611                           
 11612                           ;func.c: 378: else if(RC2==0)
 11613  1154  190E               	btfsc	14,2	;volatile
 11614  1155  2958               	goto	i1l469
 11615                           
 11616                           ;func.c: 379: return 3;
 11617  1156  3003               	movlw	3
 11618  1157  0008               	return
 11619  1158                     i1l469:	
 11620                           
 11621                           ;func.c: 380: else if(RC1==0)
 11622  1158  188E               	btfsc	14,1	;volatile
 11623  1159  295C               	goto	i1l471
 11624                           
 11625                           ;func.c: 381: return 4;
 11626  115A  3004               	movlw	4
 11627  115B  0008               	return
 11628  115C                     i1l471:	
 11629                           
 11630                           ;func.c: 382: else if(RB5==0)
 11631  115C  1A8D               	btfsc	13,5	;volatile
 11632  115D  2960               	goto	i1l473
 11633                           
 11634                           ;func.c: 383: return 5;
 11635  115E  3005               	movlw	5
 11636  115F  0008               	return
 11637  1160                     i1l473:	
 11638                           
 11639                           ;func.c: 384: else if(RC5==0)
 11640  1160  1A8E               	btfsc	14,5	;volatile
 11641  1161  2964               	goto	i1l3885
 11642                           
 11643                           ;func.c: 385: return 6;
 11644  1162  3006               	movlw	6
 11645  1163  0008               	return
 11646  1164                     i1l3885:	
 11647                           
 11648                           ;func.c: 386: else
 11649                           ;func.c: 387: return 0;
 11650  1164  3000               	movlw	0
 11651  1165  0008               	return
 11652  1166                     __end_of_read_key:	
 11653  007E                     btemp	set	126	;btemp
 11654  007E                     int$flags	set	126
 11655  007E                     wtemp	set	126
 11656  007E                     wtemp0	set	126
 11657  0080                     wtemp1	set	128
 11658  0082                     wtemp2	set	130
 11659  0084                     wtemp3	set	132
 11660  0086                     wtemp4	set	134
 11661  0088                     wtemp5	set	136
 11662  007F                     wtemp6	set	127
 11663  007E                     ttemp	set	126
 11664  007E                     ttemp0	set	126
 11665  0081                     ttemp1	set	129
 11666  0084                     ttemp2	set	132
 11667  0087                     ttemp3	set	135
 11668  007F                     ttemp4	set	127
 11669  007E                     ltemp	set	126
 11670  007E                     ltemp0	set	126
 11671  0082                     ltemp1	set	130
 11672  0086                     ltemp2	set	134
 11673  0080                     ltemp3	set	128


Data Sizes:
    Strings     209
    Constant    0
    Data        528
    BSS         150
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     68      76
    BANK1            80      0      80
    BANK2            80      0      78
    BANK3            80      4      68
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            64      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(1) Largest target is 64
		 -> table(BANK1[64]), 

    memset@p	PTR unsigned char  size(1) Largest target is 64
		 -> table(BANK1[64]), 

    set_point@value	PTR unsigned char  size(1) Largest target is 48
		 -> choose_second(BANK2[8]), choose_empty(BANK2[8]), empty(BANK2[8]), screen(BANK3[48]), 
		 -> second_chess(BANK2[8]), first_chess(BANK2[8]), choose_first(BANK2[8]), 

    Display_Chars@string	PTR unsigned char  size(2) Largest target is 19
		 -> STR_33(CODE[19]), STR_32(CODE[8]), STR_31(CODE[2]), STR_30(CODE[2]), 
		 -> STR_29(CODE[8]), STR_28(CODE[8]), STR_27(CODE[8]), STR_26(CODE[5]), 
		 -> STR_25(CODE[4]), STR_24(CODE[8]), STR_23(CODE[8]), STR_22(CODE[8]), 
		 -> STR_21(CODE[8]), STR_20(CODE[8]), STR_19(CODE[8]), STR_18(CODE[8]), 
		 -> STR_17(CODE[8]), STR_16(CODE[8]), display_step(BANK2[10]), STR_15(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[7]), STR_12(CODE[9]), STR_11(CODE[13]), 
		 -> STR_10(CODE[11]), STR_9(CODE[11]), STR_8(CODE[19]), STR_7(CODE[8]), 
		 -> STR_6(CODE[19]), STR_5(CODE[10]), STR_4(CODE[19]), STR_3(CODE[10]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), display_white(BANK2[10]), display_black(BANK2[10]), 

    int2string@a	PTR unsigned char  size(1) Largest target is 10
		 -> display_step(BANK2[10]), display_white(BANK2[10]), display_black(BANK2[10]), 

    sp__memset	PTR void  size(1) Largest target is 64
		 -> table(BANK1[64]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_get_key
    _get_key->i1_delay_100us
    i1_delay_100us->i1___wmul

Critical Paths under _main in BANK0

    _main->_run_game
    _start_video->_Display_Chars
    _run_game->_wayout
    _wayout->_choose
    _init_wayout->_set_point
    _draw_wayout_right->_Display_Chars
    _choose_level2->_set_menu
    _choose_level2->_wayout_display1
    _choose_level2->_wayout_display2
    _wayout_display2->_Display_Chars
    _wayout_display1->_Display_Chars
    _choose->_change_near
    _change_near->_set_point
    _init_heibaiqi->_set_point
    _draw_heibaiqi_right->_Display_Chars
    _heibaiqi->_choose_point
    _set_menu->_Display_Chars
    _Display_Char->_Write_Com
    _Display_Char->_Write_Data
    _judge_result->_check_point
    _init_environment->_Clear_Screen
    _Clear_Screen->_Write_Com
    _Clear_Screen->_Write_Data
    _choose_point->_set_point
    _set_point->_get_Y_Addr
    _get_Y_Addr->___awdiv
    _int2string->___awdiv
    _check_point->___wmul
    _Display_Chars->_Write_Com
    _Display_Chars->_Write_Data
    _Write_Data->_delay_100us
    _init_cfg->_Write_Com
    _Write_Com->_delay_100us
    _delay_100us->___wmul

Critical Paths under _ISR in BANK0

    _ISR->_get_key

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  542649
                                              0 BANK3      4     0      4
                           _init_cfg
                   _init_environment
                           _run_game
                           _set_menu
                        _start_video
 ---------------------------------------------------------------------------------
 (1) _start_video                                          0     0      0   21013
                       _Clear_Screen
                      _Display_Chars
 ---------------------------------------------------------------------------------
 (1) _run_game                                             2     2      0  485850
                                             66 BANK0      2     2      0
                       _Display_Char
                      _Display_Chars
                      _choose_level2
                           _heibaiqi
                      _init_heibaiqi
                        _init_wayout
                             _wayout
 ---------------------------------------------------------------------------------
 (2) _wayout                                               7     7      0  193814
                                             59 BANK0      7     7      0
                       _Clear_Screen
                      _Display_Chars
                  _check_if_complete
                             _choose
                      _choose_level2
                        _init_wayout
                         _int2string
                          _set_point
 ---------------------------------------------------------------------------------
 (3) _init_wayout                                         21    21      0   46745
                                             37 BANK0     21    21      0
                       _Clear_Screen
                  _draw_wayout_right
                          _set_point
 ---------------------------------------------------------------------------------
 (4) _draw_wayout_right                                    6     4      2   23468
                                             30 BANK0      6     4      2
                      _Display_Chars
                          _Write_Com
                         _Write_Data
                        _delay_100us
                         _int2string
 ---------------------------------------------------------------------------------
 (3) _choose_level2                                        8     8      0   81678
                                             31 BANK0      8     8      0
                       _Clear_Screen
                       _Display_Char
                      _Display_Chars
                   _init_environment
                           _set_menu
                    _wayout_display1
                    _wayout_display2
 ---------------------------------------------------------------------------------
 (4) _wayout_display2                                      1     1      0   11335
                                             30 BANK0      1     1      0
                      _Display_Chars
 ---------------------------------------------------------------------------------
 (4) _wayout_display1                                      1     1      0   11335
                                             30 BANK0      1     1      0
                      _Display_Chars
 ---------------------------------------------------------------------------------
 (3) _choose                                              11     7      4   28452
                                             48 BANK0     11     7      4
                        _change_near
                        _if_in_table
                          _set_point
 ---------------------------------------------------------------------------------
 (4) _change_near                                         11     7      4   14319
                                             37 BANK0     11     7      4
                        _if_in_table
                          _set_point
 ---------------------------------------------------------------------------------
 (4) _if_in_table                                          5     1      4     300
                                              3 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _check_if_complete                                    5     5      0     136
                                              3 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _init_heibaiqi                                        2     2      0   46456
                                             37 BANK0      2     2      0
                       _Clear_Screen
                _draw_heibaiqi_right
                             _memset
                          _set_point
 ---------------------------------------------------------------------------------
 (3) _draw_heibaiqi_right                                  4     4      0   23173
                                             30 BANK0      4     4      0
                      _Display_Chars
                          _Write_Com
                         _Write_Data
                        _delay_100us
                         _int2string
 ---------------------------------------------------------------------------------
 (2) _heibaiqi                                             7     7      0   97606
                                             56 BANK0      7     7      0
                       _Display_Char
                      _Display_Chars
                       _choose_point
                   _init_environment
                       _judge_result
                           _set_menu
                          _set_point
 ---------------------------------------------------------------------------------
 (1) _set_menu                                             1     1      0   19551
                                             30 BANK0      1     1      0
                       _Display_Char
                      _Display_Chars
 ---------------------------------------------------------------------------------
 (2) _Display_Char                                        11     9      2    8216
                                             18 BANK0     11     9      2
                          _Write_Com
                         _Write_Data
 ---------------------------------------------------------------------------------
 (3) _judge_result                                         7     7      0    2762
                                             29 BANK0      7     7      0
                        _check_point
 ---------------------------------------------------------------------------------
 (4) _init_environment                                     0     0      0   10040
                       _Clear_Screen
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               7     3      4     362
                                              3 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _Clear_Screen                                         5     3      2    9678
                                             18 BANK0      5     3      2
                          _Write_Com
                         _Write_Data
                        _delay_100us
 ---------------------------------------------------------------------------------
 (3) _choose_point                                        19    17      2   32459
                                             37 BANK0     19    17      2
                      _Display_Chars
                             ___bmul
                             ___wmul
                        _check_point
                         _int2string
                          _set_point
 ---------------------------------------------------------------------------------
 (3) _set_point                                           14    12      2   13243
                                             25 BANK0     12    10      2
                          _Write_Com
                         _Write_Data
                             ___bmul (ARG)
                          _check_Pos
                         _get_X_Addr
                         _get_Y_Addr
                      _readFromTable
 ---------------------------------------------------------------------------------
 (4) _readFromTable                                       11     8      3     282
                                              3 BANK0     11     8      3
 ---------------------------------------------------------------------------------
 (4) _get_Y_Addr                                          13    12      1    1240
                                             12 BANK0     13    12      1
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) _get_X_Addr                                           4     3      1     255
                                              3 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _check_Pos                                            6     3      3      99
                                              3 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _int2string                                           9     7      2    2547
                                             12 BANK0      9     7      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     614
                                              3 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4     936
                                              3 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _check_point                                         20    18      2    2581
                                              9 BANK0     20    18      2
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     540
                                              3 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Display_Chars                                       12     9      3   11335
                                             18 BANK0     12     9      3
                          _Write_Com
                         _Write_Data
 ---------------------------------------------------------------------------------
 (3) _Write_Data                                           2     0      2    2870
                                             16 BANK0      2     0      2
                        _delay_100us
                      _readFromTable (ARG)
 ---------------------------------------------------------------------------------
 (1) _init_cfg                                             0     0      0    6195
                          _Write_Com
                        _delay_100us
 ---------------------------------------------------------------------------------
 (3) _Write_Com                                            2     0      2    4195
                                             16 BANK0      2     0      2
                        _delay_100us
 ---------------------------------------------------------------------------------
 (4) _delay_100us                                          7     5      2    2000
                                              9 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     998
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  2     2      0     510
                                              1 BANK0      2     2      0
                            _get_key
                      i1_delay_100us
 ---------------------------------------------------------------------------------
 (10) _get_key                                             2     2      0     267
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                           _read_key
                      i1_delay_100us
 ---------------------------------------------------------------------------------
 (10) i1_delay_100us                                       7     5      2     243
                                              6 COMMON     7     5      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (11) _read_key                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_cfg
     _Write_Com
       _delay_100us
         ___wmul
     _delay_100us
       ___wmul
   _init_environment
     _Clear_Screen
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
       _delay_100us
         ___wmul
     _memset
   _run_game
     _Display_Char
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
     _Display_Chars
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
     _choose_level2
       _Clear_Screen
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
       _Display_Char
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
       _Display_Chars
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
       _init_environment
         _Clear_Screen
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           _delay_100us
             ___wmul
         _memset
       _set_menu
         _Display_Char
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
       _wayout_display1
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
       _wayout_display2
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
     _heibaiqi
       _Display_Char
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
       _Display_Chars
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
       _choose_point
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         ___bmul
         ___wmul
         _check_point
           ___bmul
           ___wmul
         _int2string
           ___awdiv
           ___awmod
         _set_point
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           ___bmul (ARG)
           _check_Pos (ARG)
           _get_X_Addr (ARG)
           _get_Y_Addr (ARG)
             ___awdiv
           _readFromTable (ARG)
       _init_environment
         _Clear_Screen
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           _delay_100us
             ___wmul
         _memset
       _judge_result
         _check_point
           ___bmul
           ___wmul
       _set_menu
         _Display_Char
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
       _set_point
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         ___bmul (ARG)
         _check_Pos (ARG)
         _get_X_Addr (ARG)
         _get_Y_Addr (ARG)
           ___awdiv
         _readFromTable (ARG)
     _init_heibaiqi
       _Clear_Screen
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
       _draw_heibaiqi_right
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
         _int2string
           ___awdiv
           ___awmod
       _memset
       _set_point
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         ___bmul (ARG)
         _check_Pos (ARG)
         _get_X_Addr (ARG)
         _get_Y_Addr (ARG)
           ___awdiv
         _readFromTable (ARG)
     _init_wayout
       _Clear_Screen
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
       _draw_wayout_right
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
         _int2string
           ___awdiv
           ___awmod
       _set_point
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         ___bmul (ARG)
         _check_Pos (ARG)
         _get_X_Addr (ARG)
         _get_Y_Addr (ARG)
           ___awdiv
         _readFromTable (ARG)
     _wayout
       _Clear_Screen
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         _delay_100us
           ___wmul
       _Display_Chars
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
       _check_if_complete
       _choose
         _change_near
           _if_in_table
           _set_point
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
             ___bmul (ARG)
             _check_Pos (ARG)
             _get_X_Addr (ARG)
             _get_Y_Addr (ARG)
               ___awdiv
             _readFromTable (ARG)
         _if_in_table
         _set_point
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           ___bmul (ARG)
           _check_Pos (ARG)
           _get_X_Addr (ARG)
           _get_Y_Addr (ARG)
             ___awdiv
           _readFromTable (ARG)
       _choose_level2
         _Clear_Screen
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           _delay_100us
             ___wmul
         _Display_Char
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         _Display_Chars
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
         _init_environment
           _Clear_Screen
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
             _delay_100us
               ___wmul
           _memset
         _set_menu
           _Display_Char
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
           _Display_Chars
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
         _wayout_display1
           _Display_Chars
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
         _wayout_display2
           _Display_Chars
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
       _init_wayout
         _Clear_Screen
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           _delay_100us
             ___wmul
         _draw_wayout_right
           _Display_Chars
             _Write_Com
               _delay_100us
                 ___wmul
             _Write_Data
               _delay_100us
                 ___wmul
               _readFromTable (ARG)
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           _delay_100us
             ___wmul
           _int2string
             ___awdiv
             ___awmod
         _set_point
           _Write_Com
             _delay_100us
               ___wmul
           _Write_Data
             _delay_100us
               ___wmul
             _readFromTable (ARG)
           ___bmul (ARG)
           _check_Pos (ARG)
           _get_X_Addr (ARG)
           _get_Y_Addr (ARG)
             ___awdiv
           _readFromTable (ARG)
       _int2string
         ___awdiv
         ___awmod
       _set_point
         _Write_Com
           _delay_100us
             ___wmul
         _Write_Data
           _delay_100us
             ___wmul
           _readFromTable (ARG)
         ___bmul (ARG)
         _check_Pos (ARG)
         _get_X_Addr (ARG)
         _get_Y_Addr (ARG)
           ___awdiv
         _readFromTable (ARG)
   _set_menu
     _Display_Char
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
     _Display_Chars
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
   _start_video
     _Clear_Screen
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)
       _delay_100us
         ___wmul
     _Display_Chars
       _Write_Com
         _delay_100us
           ___wmul
       _Write_Data
         _delay_100us
           ___wmul
         _readFromTable (ARG)

 _ISR (ROOT)
   _get_key
     _read_key
     i1_delay_100us
       i1___wmul
   i1_delay_100us
     i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               40      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Jun 17 20:18:38 2019

              ??_choose_point 0047                ___bmul@product 0025               ??_choose_level2 003F  
                 __CFG_CP$OFF 0000                  ___awdiv@sign 0029           ___wmul@multiplicand 0025  
            i1___wmul@product 0074             Display_Char@F6426 00E6              Display_Char@data 0032  
                 __CFG_LVP$ON 0000                           l106 0CE4                           l114 0EC6  
                         l123 0F88                           l116 0ECF                           l179 0393  
                         l379 11E2                           l863 1FCD                           l779 0691  
                         _RB0 0068                           _RB1 0069                           _RC0 0070  
                         _RB2 006A                           _RC1 0071                           _RB3 006B  
                         _RC2 0072                           _RC3 0073                           _RB5 006D  
                         _RC4 0074                           _RC5 0075                           _PR2 001B  
                         _ISR 0004                           _key 0069                   _start_video 1166  
                ___awmod@sign 0029                  __CFG_BORV$LO 0000                           wreg 0009  
                __CFG_IESO$ON 0000                          ?_ISR 0070                          l3005 14A3  
                        l3101 1F65                          l3023 1550                          l3015 1538  
                        l3105 1F6B                          l3033 1568                          l3041 1FAF  
                        l3131 0C14                          l3211 0705                          l3125 0BFD  
                        l3029 1560                          l3205 06E2                          l3151 0CB5  
                        l3143 0C7F                          l3055 179B                          l3231 075B  
                        l4111 1670                          l3145 0C82                          l3153 0CBA  
                        l3225 074B                          l3217 0729                          l4121 1693  
                        l3147 0CB3                          l3139 0C4A                          l3155 0CBE  
                        l3411 157E                          l3323 09C9                          l3307 0994  
                        l3235 0764                          l3165 0CF0                          l3069 17F0  
                        l3317 09B9                          l3261 07E8                          l3253 07C4  
                        l3245 07A0                          l3159 0CDC                          l3351 0E9E  
                        l3343 0E89                          l3327 09D1                          l3095 1FFE  
                        l4151 16C7                          l4143 16BB                          l4135 16A8  
                        l3257 07D6                          l3249 07B2                          l4145 16BE  
                        l3443 159A                          l3419 1583                          l3291 0962  
                        l3275 1719                          l3515 0BD0                          l3611 0A36  
                        l2901 11C1                          l3381 0F7E                          l3373 0EE9  
                        l3437 1594                          l3429 158E                          l3517 0B1E  
                        l3189 06B0                          l3621 0ACB                          l3605 0A29  
                        l2815 10F8                          l2831 1430                          l2903 11C3  
                        l3359 0EBE                          l3455 15A5                          l3535 0B46  
                        l3615 0AAD                          l2841 1438                          l2825 1425  
                        l2913 11D4                          l3385 0F8C                          l3393 0FB6  
                        l3481 15D2                          l3465 15BC                          l3473 15CC  
                        l3449 15A0                          l2843 1444                          l2915 11D6  
                        l2907 11CA                          l3643 08BE                          l3547 0B72  
                        l3539 0B54                          l3619 0ABC                          l2853 145F  
                        l2909 11CC                          l2941 14F9                          l3389 0FAA  
                        l3469 15C4                          l3805 031D                          l3661 0942  
                        l3565 0B9F                          l2919 11DE                          l3823 034E  
                        l3831 0373                          l3751 00A5                          l3671 11EA  
                        l3639 0892                          l3903 042B                          l4279 1F5E  
                        l2857 1467                          l2849 1456                          l2953 1350  
                        l2929 1F2F                          l2881 1310                          l3489 15D8  
                        l3833 0378                          l3577 0BCD                          l3569 0BAF  
                        l2971 1375                          l3827 0358                          l3819 0346  
                        l3683 1204                          l3691 1214                          l3915 04C1  
                        l2965 135D                          l2957 1357                          l3781 01F1  
                        l3757 00C5                          l3677 11EF                          l2799 1FC7  
                        l2967 1369                          l2975 137E                          l2887 1328  
                        l3839 037E                          l3687 120C                          l3927 0557  
                        l3793 0287                          l3769 015B                          l2979 1386  
                        l3971 0664                          l3939 05ED                          l3891 0395  
                        l3981 0679                          l3957 0648                          l3969 0662  
                        l3985 067C                          STR_1 10CF                          STR_2 10CF  
                        STR_3 1040                          STR_4 1000                          STR_5 1036  
                        STR_6 1000                          STR_7 10BB                          STR_8 1000  
                        STR_9 102B                          _LATA 010C                          _LATC 010E  
                        u4005 1744                          u3135 143B                          u4015 1753  
                        u3065 1FCE                          u4105 0E77                          u3075 1FD3  
                        u3155 1445                          u3315 14C7                          u3165 144F  
                        u3405 1360                          u4205 0F41                          u5005 01F6  
                        u3095 110E                          u3175 1457                          u3335 14D8  
                        u4215 0F5D                          u4135 0EA8                          u5015 0208  
                        _PIE1 0091                          u3425 136F                          u3345 14E7  
                        u5105 02B3                          u5025 021D                          u3435 1376  
                        u3355 14FC                          u5115 02C2                          u5035 022C  
                        u3365 150B                          u5125 02D9                          u5045 0243  
                        u5135 02EB                          u5055 0255                          u4185 0F0D  
                        u5145 0300                          u5065 026A                          u5305 03C1  
                        u3635 0C3B                          u4275 0FBD                          u5155 030F  
                        u5075 0279                          u5315 03D0                          u5085 028C  
                        u3565 1FEC                          u5405 047D                          u5325 03E7  
                        u5095 029E                          u5415 048F                          u5335 03F9  
                        u3665 0C71                          u3585 1FFA                          u4705 08EC  
                        u4625 0ADD                          u4545 0A45                          u5505 053A  
                        u5425 04A4                          u5345 040E                          u4715 08FB  
                        u4555 0A6A                          u5515 0549                          u5435 04B3  
                        u5355 041D                          u3685 0CA6                          u3925 16E5  
                        u4645 0896                          u4565 0A7B                          u5525 055C  
                        u5445 04C6                          u5365 0430                          u5285 039A  
                        u5535 056E                          u5455 04D8                          u5375 0442  
                        u5295 03AC                          u4905 013E                          u4745 11F2  
                        u3945 16F7                          u4665 08AB                          u4585 0A91  
                        u5545 0583                          u5465 04ED                          u5385 0457  
                        _PIR1 0011                          u4915 014D                          u4595 0AA0  
                        u5555 0592                          u5475 04FC                          u5395 0466  
                        u4925 0160                          u4845 00CA                          u3965 1709  
                        u4685 08C1                          u5565 05A9                          u5485 0513  
                        u4935 0172                          u4855 00DC                          u4695 08D7  
                        u5575 05BB                          u5495 0525                          u4945 0187  
                        u4865 00F1                          u3985 171C                          u5585 05D0  
                        u4955 0196                          u4875 0100                          u3995 172F  
                        u5595 05DF                          u4965 01AD                          u4885 0117  
                        u4975 01BF                          u4895 0129                          u4985 01D4  
                        u4995 01E3                          _TMR2 001A                          _WPUC 020E  
                __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000                          _main 1F52  
                        fsr0h 0005                          fsr1h 0007                          fsr0l 0004  
                        indf0 0000                          indf1 0001                          fsr1l 0006  
                        btemp 007E                 __CFG_BOREN$ON 0000                          ltemp 007E  
                        start 0022                          ttemp 007E                          wtemp 007E  
           ___bmul@multiplier 0026                 __CFG_MCLRE$ON 0000        __size_ofi1_delay_100us 0022  
                       ??_ISR 0021             check_point@result 0034                 __CFG_PLLEN$ON 0000  
                       ?_main 01E0               __end_of___awdiv 146C                         STR_10 1020  
                       STR_11 1013                         STR_20 10AB                         STR_12 104A  
                       STR_13 10C3                         STR_21 108B                         STR_30 10CF  
                       STR_14 10CF                         STR_22 1053                         STR_31 10CF  
                       STR_15 10CF                         STR_23 1063                         STR_32 10B3  
                       STR_24 1073                         STR_16 105B                         STR_25 10CB  
                       STR_33 1000                         STR_17 106B                 __CFG_WDTE$OFF 0000  
                       STR_26 10CA                         STR_18 107B                         STR_19 109B  
                       STR_27 1083                         STR_28 1093               __end_of___awmod 138B  
                       STR_29 10A3            Display_Chars@F6420 00EA               ___awdiv@divisor 0023  
                       i1l471 115C                         i1l464 1150                         i1l473 1160  
                       i1l467 1154                         i1l469 1158                         i1l576 001E  
                       i1l863 1F96                   int2string@a 0034               ___awdiv@counter 0028  
                 int2string@i 0032                         _PORTA 000C                         _PORTC 000E  
                       _TRISA 008C                         _TRISB 008D                         _TRISC 008E  
                ?_init_wayout 0070               __end_of_get_key 11B8                         _arrow 0067  
                       _empty 0166          __size_of_change_near 008E          __size_of_check_point 0107  
                       _level 2270                         _table 00A6          __size_of_delay_100us 0025  
                       _start 00A3              __end_ofi1___wmul 1FA9                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
         i1___wmul@multiplier 0070                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F            check_point@add_col 0039  
          check_point@add_row 0038               __initialization 0024             _check_if_complete 11E4  
                __end_of_main 1F62            ?_check_if_complete 0070                __CFG_LPBOR$OFF 0000  
                      ??_main 0064        __size_of_readFromTable 0058           ??_check_if_complete 0023  
          judge_result@player 0040            judge_result@result 0041          __end_of_Display_Char 1300  
               i1_delay_100us 10D3              ___awdiv@dividend 0025                        _ANSELA 018C  
                      _ANSELB 018D          __end_of_choose_point 1000                        i1l4083 11A0  
                      i1l4227 001B          __size_of_if_in_table 0020                        i1l4095 11B6  
                      i1l3697 1F90                        i1l3885 1164                        i1l3991 10D5  
                      u480_25 1F9C            check_if_complete@i 0026            check_if_complete@j 0027  
                      _OSCCON 0099                        u565_25 10EA                        u479_25 1F97  
                      _TMR2IF 0089         __size_of_Clear_Screen 005D      __size_of_wayout_display1 0034  
    __size_of_wayout_display2 0034     __end_of_check_if_complete 1216                __CFG_PWRTE$OFF 0000  
      __size_of_init_heibaiqi 0078              __end_of_heibaiqi 0394            draw_wayout_right@i 0043  
          draw_wayout_right@j 0042                        ___bmul 1F62                        ___wmul 1FC4  
                   ??___awdiv 0027                __CFG_STVREN$ON 0000                     ??___awmod 0027  
               Clear_Screen@i 0036                 Clear_Screen@j 0035                        _choose 0881  
            __end_of_init_cfg 164D        draw_wayout_right@level 003E                        _memset 1FA9  
            __end_of_read_key 1166              ___awdiv@quotient 002A               ___awmod@divisor 0023  
                      _player 00A1                        _screen 01B0                        _result 00A2  
             ___awmod@counter 0028                        _wayout 0394                     ??_get_key 007D  
                __pdataBIGRAM 2270              __end_of_set_menu 113F           Display_Chars@string 0032  
              ?i1_delay_100us 0076                  _Clear_Screen 151A              __end_of_run_game 16D2  
               ?_judge_result 0070       __end_of__initialization 0082                 _readFromTable 14C2  
          __size_of_Write_Com 000F   __end_of_draw_heibaiqi_right 0A14           ___bmul@multiplicand 0023  
             check_point@flag 003B                __pcstackCOMMON 0070               check_point@temp 0036  
             check_point@oppo 0035                  __pidataBANK1 1F04                  __pidataBANK2 138B  
                __pidataBANK3 127E                    _Write_Data 1F43            __size_of_check_Pos 000E  
   __size_of_init_environment 001A               get_Y_Addr@F6431 00EE                     ?i1___wmul 0070  
            choose_level2@tag 0043                _OPTION_REGbits 0095                  ?_start_video 0070  
               _init_heibaiqi 0809           choose_level2@offset 0045          __size_of_init_wayout 00E4  
              ??_judge_result 003D                    __pbssBANK0 0064                    __pbssBANK1 00A0  
                  __pbssBANK2 0166                    __pbssBANK4 0220                ?_readFromTable 0023  
                Write_Com@com 0030             Clear_Screen@value 0032    __size_of_check_if_complete 0032  
                  __pmaintext 1F52         __end_of_Display_Chars 14C2                       ?___bmul 0023  
           ??_wayout_display1 003E             ??_wayout_display2 003E                       ?___wmul 0023  
                  __pintentry 0004                       ?_choose 0050                    _get_X_Addr 11B8  
                     ?_memset 0023                    _get_Y_Addr 1300         __end_of_choose_level2 0BEB  
       __size_of_Display_Char 0042                       ?_wayout 0070                    ??i1___wmul 0074  
          __size_of_set_point 00A0             __end_of_Write_Com 1F43                ?_init_heibaiqi 0070  
             ??i1_delay_100us 0078         get_Y_Addr@addr_Offset 0038              choose_point@temp 0052  
       __size_of_choose_point 018E                 int2string@num 002D               get_key@last_key 0020  
                   ?_heibaiqi 0070             __end_of_check_Pos 1F34                    _int2string 13D1  
                   ?_init_cfg 0070                     ?_read_key 0070             _draw_wayout_right 0692  
          ?_draw_wayout_right 003E                     ?_set_menu 0070                  _Display_Char 12BE  
                  check_Pos@x 0070                    check_Pos@y 0023               __size_of___bmul 0012  
                 ?_Write_Data 0030                    _last_table 0220                       ___awdiv 141A  
                     ___awmod 1345               __size_of___wmul 001C                  _choose_first 0146  
                _choose_empty 013E                     ?_run_game 0070               __size_of_choose 00C3  
                _choose_point 0E72           ??_draw_wayout_right 0040               __size_of_memset 001B  
                     __ptext1 1166                       __ptext2 164D                       __ptext3 0394  
                     __ptext4 0A14                       __ptext5 0692                       __ptext6 0AF8  
                     __ptext7 124A                       __ptext8 1216                       __ptext9 0881  
                     _get_key 118E               __size_of_wayout 02FE                  __size_of_ISR 001E  
                   _T2CONbits 001C                 ??_change_near 0049                 ??_check_point 002B  
            ___awmod@dividend 0025                 ??_delay_100us 002B                       choose@i 0050  
                     choose@j 0052                    ??_heibaiqi 0058                       clrloop0 1F0F  
                     _towards 01A0               ??_readFromTable 0026          end_of_initialization 0082  
          choose_point@result 0051     __end_of_draw_wayout_right 07FA                       init_ram 1F1A  
                     memset@c 0023                       memset@n 0025                       memset@p 0028  
                  ??_init_cfg 0032                       initloop 1F1B                    ??_read_key 0070  
           __end_of_set_point 1800               int2string@begin 002C                    ??_set_menu 003E  
                init_wayout@i 0056                  init_wayout@j 0058                  __pstringtext 1000  
                  ??_run_game 0062              _init_environment 1F74         i1___wmul@multiplicand 0072  
        __end_of_judge_result 15DE                   ?_get_X_Addr 0023                   ?_get_Y_Addr 002C  
             ??_init_heibaiqi 0045              set_point@point_x 0042              set_point@point_y 0039  
                _display_step 012A              __CFG_FOSC$INTOSC 0000                     _TRISBbits 008D  
               ??_if_in_table 0027          __size_of_start_video 0028           __size_of_Write_Data 000F  
         __end_of_change_near 1760           __end_of_check_point 0CF2                   ?_int2string 002C  
         __end_of_delay_100us 111A                    _total_step 00A5               judge_result@col 0043  
      set_point@is_Offset_Pos 003E               judge_result@row 0042                __end_of___bmul 1F74  
               __pidataBIGRAM 0CF2                __end_of___wmul 1FE0                _get_Y_Addr$456 0032  
              _get_Y_Addr$457 0034                __end_of_choose 0944                readFromTable@x 002D  
              readFromTable@y 0023                __end_of_memset 1FC4                __end_of_wayout 0692  
         start_initialization 0024             __size_ofi1___wmul 001B                   __end_of_ISR 0022  
           choose_level2@step 0042         Display_Char@addresses 0036               _wayout_display1 1216  
             _wayout_display2 124A    __size_of_draw_wayout_right 0168           __size_of_get_X_Addr 002C  
         __size_of_get_Y_Addr 0045           __end_of_if_in_table 2000           readFromTable@offset 0024  
                    ??___bmul 0024                      ??___wmul 0027                      ??_choose 0054  
                 __pdataBANK1 00E6                   __pdataBANK2 0120                   __pdataBANK3 01A0  
__size_of_draw_heibaiqi_right 00D0                      ??_memset 0027           __size_of_int2string 0049  
                    ??_wayout 005B                set_point@value 003A                     ___latbits 0002  
                 _change_near 16D2                   _check_point 0BEB                 Write_Data@dat 0030  
               ??_init_wayout 0045                 __pcstackBANK0 0020                 __pcstackBANK3 01E0  
              check_point@col 0029                   _delay_100us 10F5                get_X_Addr@addr 0025  
              check_point@ply 002A                check_point@row 0037                     _Write_Com 1F34  
           __size_of_heibaiqi 030E                get_Y_Addr@addr 0037                     _check_Pos 1F26  
                   _black_num 0068                  change_near@k 0045                  change_near@l 0047  
                check_point@i 003C                  check_point@j 003A             __size_of_init_cfg 006F  
           __size_of_read_key 0027         __size_of_judge_result 0067                  delay_100us@h 002E  
                delay_100us@i 002C                  ??_Write_Data 0032                      ?___awdiv 0023  
                    ?___awmod 0023             __size_of_set_menu 0025               choose_point@col 0045  
             choose_point@ply 0046               choose_point@row 0056          set_point@init_X_Addr 0040  
        set_point@init_Y_Addr 0041                delay_100us@cnt 0029             __size_of_run_game 0085  
                    ?_get_key 0070          init_wayout@level_num 0055       __end_of_wayout_display1 124A  
     __end_of_wayout_display2 127E         __end_ofi1_delay_100us 10F5                     _empty_num 00A0  
                  ?_Write_Com 0030                   _if_in_table 1FE0        __size_of_Display_Chars 0056  
                   _level_num 006A      __end_of_init_environment 1F8E            __end_of_Write_Data 1F52  
                _judge_result 1577           __end_of_init_wayout 0AF8                ___wmul@product 0027  
           choose_point@right 0053        Display_Chars@addresses 0037        __size_of_choose_level2 00F3  
                  ?_check_Pos 0023                     clear_ram0 1F0E                    set_point@i 0043  
                   _set_point 1760                i1delay_100us@h 007B                i1delay_100us@i 0079  
                ??_get_X_Addr 0024                  ??_get_Y_Addr 002D             ___wmul@multiplier 0023  
                   _white_num 006B                      i1___wmul 1F8E                Display_Chars@i 003B  
              Display_Chars@x 003D                Display_Chars@y 0034                      _WPUBbits 020D  
               ?_Clear_Screen 0032                  ??_int2string 002E         __end_of_readFromTable 151A  
                 _first_chess 0156                  _second_chess 015E            __end_of_get_X_Addr 11E4  
          __end_of_get_Y_Addr 1345                    ?_set_point 0039                 _Display_Chars 146C  
            __size_of___awdiv 0052              __size_of___awmod 0046                 _choose_level2 0AF8  
          __end_of_int2string 141A                 _choose_second 014E         __end_of_init_heibaiqi 0881  
               ??_start_video 003E              __size_of_get_key 002A                ??_Clear_Screen 0034  
            ?_wayout_display1 0070              ?_wayout_display2 0070                   _init_wayout 0A14  
                 ??_Write_Com 0032                      __ptext10 16D2                      __ptext11 1FE0  
                    __ptext20 1FA9                      __ptext12 11E4                      __ptext21 151A  
                    __ptext13 0809                      __ptext30 141A                      __ptext22 0E72  
                    __ptext14 0944                      __ptext31 0BEB                      __ptext23 1760  
                    __ptext15 0086                      _heibaiqi 0086                      __ptext40 118E  
                    __ptext32 1F62                      __ptext24 14C2                      __ptext16 111A  
                    __ptext41 10D3                      __ptext33 146C                      __ptext25 1300  
                    __ptext17 12BE                      __ptext42 1F8E                      __ptext34 1F43  
                    __ptext26 11B8                      __ptext18 1577                      __ptext43 113F  
                    __ptext35 15DE                      __ptext27 1F26                      __ptext19 1F74  
                    __ptext36 1F34                      __ptext28 13D1                      __ptext37 10F5  
                    __ptext29 1345                      __ptext38 1FC4                choose_point@up 0054  
         _draw_heibaiqi_right 0944           get_Y_Addr@addresses 002F                      _init_cfg 15DE  
               __size_of_main 0010                      _read_key 113F                   ??_check_Pos 0026  
                    _set_menu 111A                ?_Display_Chars 0032                      _temp_key 00A4  
                    int$flags 007E                      _run_game 164D                 Display_Char@i 003A  
               Display_Char@x 003C                 Display_Char@y 0033          ?_draw_heibaiqi_right 0070  
                    main@argc 01E0                      main@argv 01E2                ?_choose_level2 0070  
                  _INTCONbits 000B                  ?_change_near 0045                  ?_check_point 0029  
         get_Y_Addr@init_Addr 0036                  ?_delay_100us 0029       choose_level2@max_level3 0041  
                    memset@p1 0029           __end_of_start_video 118E                      intlevel1 0000  
               choose_point@i 0055                 choose_point@j 0057             __CFG_CLKOUTEN$OFF 0000  
               ?_Display_Char 0032                   ??_set_point 003B         ??_draw_heibaiqi_right 003E  
               ?_choose_point 0045                   _temp_cursor 0064                  if_in_table@i 0023  
                if_in_table@j 0025                   get_X_Addr@x 0026                   get_X_Addr@y 0023  
                 get_Y_Addr@x 0031                   get_Y_Addr@y 002C          draw_heibaiqi_right@i 0041  
        draw_heibaiqi_right@j 0040                  ?_if_in_table 0023                 _display_black 0120  
             check_Pos@result 0026              i1delay_100us@cnt 0076             ?_init_environment 0070  
               _display_white 0134            ??_init_environment 0037               ??_Display_Chars 0035  
              ??_Display_Char 0034          __end_of_Clear_Screen 1577  
